
Lededas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08007968  08007968  00017968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e00  08007e00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007e00  08007e00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e00  08007e00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000070  08007e78  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08007e78  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2b3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d78  00000000  00000000  0002b34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000251e  00000000  00000000  0002daf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b9d3  00000000  00000000  00030016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00060cc1  00000000  00000000  0003b9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0009c6aa  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000948  00000000  00000000  0009c700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002878  00000000  00000000  0009d048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800794c 	.word	0x0800794c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800794c 	.word	0x0800794c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f000 ff0d 	bl	8001234 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fe5d 	bl	80010e4 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 feff 	bl	8001234 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fef5 	bl	8001234 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fe85 	bl	8001168 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe7b 	bl	8001168 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dadd>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	464f      	mov	r7, r9
 8000484:	4646      	mov	r6, r8
 8000486:	46d6      	mov	lr, sl
 8000488:	000d      	movs	r5, r1
 800048a:	0004      	movs	r4, r0
 800048c:	b5c0      	push	{r6, r7, lr}
 800048e:	001f      	movs	r7, r3
 8000490:	0011      	movs	r1, r2
 8000492:	0328      	lsls	r0, r5, #12
 8000494:	0f62      	lsrs	r2, r4, #29
 8000496:	0a40      	lsrs	r0, r0, #9
 8000498:	4310      	orrs	r0, r2
 800049a:	007a      	lsls	r2, r7, #1
 800049c:	0d52      	lsrs	r2, r2, #21
 800049e:	00e3      	lsls	r3, r4, #3
 80004a0:	033c      	lsls	r4, r7, #12
 80004a2:	4691      	mov	r9, r2
 80004a4:	0a64      	lsrs	r4, r4, #9
 80004a6:	0ffa      	lsrs	r2, r7, #31
 80004a8:	0f4f      	lsrs	r7, r1, #29
 80004aa:	006e      	lsls	r6, r5, #1
 80004ac:	4327      	orrs	r7, r4
 80004ae:	4692      	mov	sl, r2
 80004b0:	46b8      	mov	r8, r7
 80004b2:	0d76      	lsrs	r6, r6, #21
 80004b4:	0fed      	lsrs	r5, r5, #31
 80004b6:	00c9      	lsls	r1, r1, #3
 80004b8:	4295      	cmp	r5, r2
 80004ba:	d100      	bne.n	80004be <__aeabi_dadd+0x3e>
 80004bc:	e099      	b.n	80005f2 <__aeabi_dadd+0x172>
 80004be:	464c      	mov	r4, r9
 80004c0:	1b34      	subs	r4, r6, r4
 80004c2:	46a4      	mov	ip, r4
 80004c4:	2c00      	cmp	r4, #0
 80004c6:	dc00      	bgt.n	80004ca <__aeabi_dadd+0x4a>
 80004c8:	e07c      	b.n	80005c4 <__aeabi_dadd+0x144>
 80004ca:	464a      	mov	r2, r9
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d100      	bne.n	80004d2 <__aeabi_dadd+0x52>
 80004d0:	e0b8      	b.n	8000644 <__aeabi_dadd+0x1c4>
 80004d2:	4ac5      	ldr	r2, [pc, #788]	; (80007e8 <__aeabi_dadd+0x368>)
 80004d4:	4296      	cmp	r6, r2
 80004d6:	d100      	bne.n	80004da <__aeabi_dadd+0x5a>
 80004d8:	e11c      	b.n	8000714 <__aeabi_dadd+0x294>
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	003c      	movs	r4, r7
 80004de:	0412      	lsls	r2, r2, #16
 80004e0:	4314      	orrs	r4, r2
 80004e2:	46a0      	mov	r8, r4
 80004e4:	4662      	mov	r2, ip
 80004e6:	2a38      	cmp	r2, #56	; 0x38
 80004e8:	dd00      	ble.n	80004ec <__aeabi_dadd+0x6c>
 80004ea:	e161      	b.n	80007b0 <__aeabi_dadd+0x330>
 80004ec:	2a1f      	cmp	r2, #31
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_dadd+0x72>
 80004f0:	e1cc      	b.n	800088c <__aeabi_dadd+0x40c>
 80004f2:	4664      	mov	r4, ip
 80004f4:	2220      	movs	r2, #32
 80004f6:	1b12      	subs	r2, r2, r4
 80004f8:	4644      	mov	r4, r8
 80004fa:	4094      	lsls	r4, r2
 80004fc:	000f      	movs	r7, r1
 80004fe:	46a1      	mov	r9, r4
 8000500:	4664      	mov	r4, ip
 8000502:	4091      	lsls	r1, r2
 8000504:	40e7      	lsrs	r7, r4
 8000506:	464c      	mov	r4, r9
 8000508:	1e4a      	subs	r2, r1, #1
 800050a:	4191      	sbcs	r1, r2
 800050c:	433c      	orrs	r4, r7
 800050e:	4642      	mov	r2, r8
 8000510:	4321      	orrs	r1, r4
 8000512:	4664      	mov	r4, ip
 8000514:	40e2      	lsrs	r2, r4
 8000516:	1a80      	subs	r0, r0, r2
 8000518:	1a5c      	subs	r4, r3, r1
 800051a:	42a3      	cmp	r3, r4
 800051c:	419b      	sbcs	r3, r3
 800051e:	425f      	negs	r7, r3
 8000520:	1bc7      	subs	r7, r0, r7
 8000522:	023b      	lsls	r3, r7, #8
 8000524:	d400      	bmi.n	8000528 <__aeabi_dadd+0xa8>
 8000526:	e0d0      	b.n	80006ca <__aeabi_dadd+0x24a>
 8000528:	027f      	lsls	r7, r7, #9
 800052a:	0a7f      	lsrs	r7, r7, #9
 800052c:	2f00      	cmp	r7, #0
 800052e:	d100      	bne.n	8000532 <__aeabi_dadd+0xb2>
 8000530:	e0ff      	b.n	8000732 <__aeabi_dadd+0x2b2>
 8000532:	0038      	movs	r0, r7
 8000534:	f001 fe34 	bl	80021a0 <__clzsi2>
 8000538:	0001      	movs	r1, r0
 800053a:	3908      	subs	r1, #8
 800053c:	2320      	movs	r3, #32
 800053e:	0022      	movs	r2, r4
 8000540:	1a5b      	subs	r3, r3, r1
 8000542:	408f      	lsls	r7, r1
 8000544:	40da      	lsrs	r2, r3
 8000546:	408c      	lsls	r4, r1
 8000548:	4317      	orrs	r7, r2
 800054a:	42b1      	cmp	r1, r6
 800054c:	da00      	bge.n	8000550 <__aeabi_dadd+0xd0>
 800054e:	e0ff      	b.n	8000750 <__aeabi_dadd+0x2d0>
 8000550:	1b89      	subs	r1, r1, r6
 8000552:	1c4b      	adds	r3, r1, #1
 8000554:	2b1f      	cmp	r3, #31
 8000556:	dd00      	ble.n	800055a <__aeabi_dadd+0xda>
 8000558:	e0a8      	b.n	80006ac <__aeabi_dadd+0x22c>
 800055a:	2220      	movs	r2, #32
 800055c:	0039      	movs	r1, r7
 800055e:	1ad2      	subs	r2, r2, r3
 8000560:	0020      	movs	r0, r4
 8000562:	4094      	lsls	r4, r2
 8000564:	4091      	lsls	r1, r2
 8000566:	40d8      	lsrs	r0, r3
 8000568:	1e62      	subs	r2, r4, #1
 800056a:	4194      	sbcs	r4, r2
 800056c:	40df      	lsrs	r7, r3
 800056e:	2600      	movs	r6, #0
 8000570:	4301      	orrs	r1, r0
 8000572:	430c      	orrs	r4, r1
 8000574:	0763      	lsls	r3, r4, #29
 8000576:	d009      	beq.n	800058c <__aeabi_dadd+0x10c>
 8000578:	230f      	movs	r3, #15
 800057a:	4023      	ands	r3, r4
 800057c:	2b04      	cmp	r3, #4
 800057e:	d005      	beq.n	800058c <__aeabi_dadd+0x10c>
 8000580:	1d23      	adds	r3, r4, #4
 8000582:	42a3      	cmp	r3, r4
 8000584:	41a4      	sbcs	r4, r4
 8000586:	4264      	negs	r4, r4
 8000588:	193f      	adds	r7, r7, r4
 800058a:	001c      	movs	r4, r3
 800058c:	023b      	lsls	r3, r7, #8
 800058e:	d400      	bmi.n	8000592 <__aeabi_dadd+0x112>
 8000590:	e09e      	b.n	80006d0 <__aeabi_dadd+0x250>
 8000592:	4b95      	ldr	r3, [pc, #596]	; (80007e8 <__aeabi_dadd+0x368>)
 8000594:	3601      	adds	r6, #1
 8000596:	429e      	cmp	r6, r3
 8000598:	d100      	bne.n	800059c <__aeabi_dadd+0x11c>
 800059a:	e0b7      	b.n	800070c <__aeabi_dadd+0x28c>
 800059c:	4a93      	ldr	r2, [pc, #588]	; (80007ec <__aeabi_dadd+0x36c>)
 800059e:	08e4      	lsrs	r4, r4, #3
 80005a0:	4017      	ands	r7, r2
 80005a2:	077b      	lsls	r3, r7, #29
 80005a4:	0571      	lsls	r1, r6, #21
 80005a6:	027f      	lsls	r7, r7, #9
 80005a8:	4323      	orrs	r3, r4
 80005aa:	0b3f      	lsrs	r7, r7, #12
 80005ac:	0d4a      	lsrs	r2, r1, #21
 80005ae:	0512      	lsls	r2, r2, #20
 80005b0:	433a      	orrs	r2, r7
 80005b2:	07ed      	lsls	r5, r5, #31
 80005b4:	432a      	orrs	r2, r5
 80005b6:	0018      	movs	r0, r3
 80005b8:	0011      	movs	r1, r2
 80005ba:	bce0      	pop	{r5, r6, r7}
 80005bc:	46ba      	mov	sl, r7
 80005be:	46b1      	mov	r9, r6
 80005c0:	46a8      	mov	r8, r5
 80005c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c4:	2c00      	cmp	r4, #0
 80005c6:	d04b      	beq.n	8000660 <__aeabi_dadd+0x1e0>
 80005c8:	464c      	mov	r4, r9
 80005ca:	1ba4      	subs	r4, r4, r6
 80005cc:	46a4      	mov	ip, r4
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d000      	beq.n	80005d4 <__aeabi_dadd+0x154>
 80005d2:	e123      	b.n	800081c <__aeabi_dadd+0x39c>
 80005d4:	0004      	movs	r4, r0
 80005d6:	431c      	orrs	r4, r3
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x15c>
 80005da:	e1af      	b.n	800093c <__aeabi_dadd+0x4bc>
 80005dc:	4662      	mov	r2, ip
 80005de:	1e54      	subs	r4, r2, #1
 80005e0:	2a01      	cmp	r2, #1
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x166>
 80005e4:	e215      	b.n	8000a12 <__aeabi_dadd+0x592>
 80005e6:	4d80      	ldr	r5, [pc, #512]	; (80007e8 <__aeabi_dadd+0x368>)
 80005e8:	45ac      	cmp	ip, r5
 80005ea:	d100      	bne.n	80005ee <__aeabi_dadd+0x16e>
 80005ec:	e1c8      	b.n	8000980 <__aeabi_dadd+0x500>
 80005ee:	46a4      	mov	ip, r4
 80005f0:	e11b      	b.n	800082a <__aeabi_dadd+0x3aa>
 80005f2:	464a      	mov	r2, r9
 80005f4:	1ab2      	subs	r2, r6, r2
 80005f6:	4694      	mov	ip, r2
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	dc00      	bgt.n	80005fe <__aeabi_dadd+0x17e>
 80005fc:	e0ac      	b.n	8000758 <__aeabi_dadd+0x2d8>
 80005fe:	464a      	mov	r2, r9
 8000600:	2a00      	cmp	r2, #0
 8000602:	d043      	beq.n	800068c <__aeabi_dadd+0x20c>
 8000604:	4a78      	ldr	r2, [pc, #480]	; (80007e8 <__aeabi_dadd+0x368>)
 8000606:	4296      	cmp	r6, r2
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x18c>
 800060a:	e1af      	b.n	800096c <__aeabi_dadd+0x4ec>
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	003c      	movs	r4, r7
 8000610:	0412      	lsls	r2, r2, #16
 8000612:	4314      	orrs	r4, r2
 8000614:	46a0      	mov	r8, r4
 8000616:	4662      	mov	r2, ip
 8000618:	2a38      	cmp	r2, #56	; 0x38
 800061a:	dc67      	bgt.n	80006ec <__aeabi_dadd+0x26c>
 800061c:	2a1f      	cmp	r2, #31
 800061e:	dc00      	bgt.n	8000622 <__aeabi_dadd+0x1a2>
 8000620:	e15f      	b.n	80008e2 <__aeabi_dadd+0x462>
 8000622:	4647      	mov	r7, r8
 8000624:	3a20      	subs	r2, #32
 8000626:	40d7      	lsrs	r7, r2
 8000628:	4662      	mov	r2, ip
 800062a:	2a20      	cmp	r2, #32
 800062c:	d005      	beq.n	800063a <__aeabi_dadd+0x1ba>
 800062e:	4664      	mov	r4, ip
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	1b12      	subs	r2, r2, r4
 8000634:	4644      	mov	r4, r8
 8000636:	4094      	lsls	r4, r2
 8000638:	4321      	orrs	r1, r4
 800063a:	1e4a      	subs	r2, r1, #1
 800063c:	4191      	sbcs	r1, r2
 800063e:	000c      	movs	r4, r1
 8000640:	433c      	orrs	r4, r7
 8000642:	e057      	b.n	80006f4 <__aeabi_dadd+0x274>
 8000644:	003a      	movs	r2, r7
 8000646:	430a      	orrs	r2, r1
 8000648:	d100      	bne.n	800064c <__aeabi_dadd+0x1cc>
 800064a:	e105      	b.n	8000858 <__aeabi_dadd+0x3d8>
 800064c:	0022      	movs	r2, r4
 800064e:	3a01      	subs	r2, #1
 8000650:	2c01      	cmp	r4, #1
 8000652:	d100      	bne.n	8000656 <__aeabi_dadd+0x1d6>
 8000654:	e182      	b.n	800095c <__aeabi_dadd+0x4dc>
 8000656:	4c64      	ldr	r4, [pc, #400]	; (80007e8 <__aeabi_dadd+0x368>)
 8000658:	45a4      	cmp	ip, r4
 800065a:	d05b      	beq.n	8000714 <__aeabi_dadd+0x294>
 800065c:	4694      	mov	ip, r2
 800065e:	e741      	b.n	80004e4 <__aeabi_dadd+0x64>
 8000660:	4c63      	ldr	r4, [pc, #396]	; (80007f0 <__aeabi_dadd+0x370>)
 8000662:	1c77      	adds	r7, r6, #1
 8000664:	4227      	tst	r7, r4
 8000666:	d000      	beq.n	800066a <__aeabi_dadd+0x1ea>
 8000668:	e0c4      	b.n	80007f4 <__aeabi_dadd+0x374>
 800066a:	0004      	movs	r4, r0
 800066c:	431c      	orrs	r4, r3
 800066e:	2e00      	cmp	r6, #0
 8000670:	d000      	beq.n	8000674 <__aeabi_dadd+0x1f4>
 8000672:	e169      	b.n	8000948 <__aeabi_dadd+0x4c8>
 8000674:	2c00      	cmp	r4, #0
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1fa>
 8000678:	e1bf      	b.n	80009fa <__aeabi_dadd+0x57a>
 800067a:	4644      	mov	r4, r8
 800067c:	430c      	orrs	r4, r1
 800067e:	d000      	beq.n	8000682 <__aeabi_dadd+0x202>
 8000680:	e1d0      	b.n	8000a24 <__aeabi_dadd+0x5a4>
 8000682:	0742      	lsls	r2, r0, #29
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	4313      	orrs	r3, r2
 8000688:	08c0      	lsrs	r0, r0, #3
 800068a:	e029      	b.n	80006e0 <__aeabi_dadd+0x260>
 800068c:	003a      	movs	r2, r7
 800068e:	430a      	orrs	r2, r1
 8000690:	d100      	bne.n	8000694 <__aeabi_dadd+0x214>
 8000692:	e170      	b.n	8000976 <__aeabi_dadd+0x4f6>
 8000694:	4662      	mov	r2, ip
 8000696:	4664      	mov	r4, ip
 8000698:	3a01      	subs	r2, #1
 800069a:	2c01      	cmp	r4, #1
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x220>
 800069e:	e0e0      	b.n	8000862 <__aeabi_dadd+0x3e2>
 80006a0:	4c51      	ldr	r4, [pc, #324]	; (80007e8 <__aeabi_dadd+0x368>)
 80006a2:	45a4      	cmp	ip, r4
 80006a4:	d100      	bne.n	80006a8 <__aeabi_dadd+0x228>
 80006a6:	e161      	b.n	800096c <__aeabi_dadd+0x4ec>
 80006a8:	4694      	mov	ip, r2
 80006aa:	e7b4      	b.n	8000616 <__aeabi_dadd+0x196>
 80006ac:	003a      	movs	r2, r7
 80006ae:	391f      	subs	r1, #31
 80006b0:	40ca      	lsrs	r2, r1
 80006b2:	0011      	movs	r1, r2
 80006b4:	2b20      	cmp	r3, #32
 80006b6:	d003      	beq.n	80006c0 <__aeabi_dadd+0x240>
 80006b8:	2240      	movs	r2, #64	; 0x40
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	409f      	lsls	r7, r3
 80006be:	433c      	orrs	r4, r7
 80006c0:	1e63      	subs	r3, r4, #1
 80006c2:	419c      	sbcs	r4, r3
 80006c4:	2700      	movs	r7, #0
 80006c6:	2600      	movs	r6, #0
 80006c8:	430c      	orrs	r4, r1
 80006ca:	0763      	lsls	r3, r4, #29
 80006cc:	d000      	beq.n	80006d0 <__aeabi_dadd+0x250>
 80006ce:	e753      	b.n	8000578 <__aeabi_dadd+0xf8>
 80006d0:	46b4      	mov	ip, r6
 80006d2:	08e4      	lsrs	r4, r4, #3
 80006d4:	077b      	lsls	r3, r7, #29
 80006d6:	4323      	orrs	r3, r4
 80006d8:	08f8      	lsrs	r0, r7, #3
 80006da:	4a43      	ldr	r2, [pc, #268]	; (80007e8 <__aeabi_dadd+0x368>)
 80006dc:	4594      	cmp	ip, r2
 80006de:	d01d      	beq.n	800071c <__aeabi_dadd+0x29c>
 80006e0:	4662      	mov	r2, ip
 80006e2:	0307      	lsls	r7, r0, #12
 80006e4:	0552      	lsls	r2, r2, #21
 80006e6:	0b3f      	lsrs	r7, r7, #12
 80006e8:	0d52      	lsrs	r2, r2, #21
 80006ea:	e760      	b.n	80005ae <__aeabi_dadd+0x12e>
 80006ec:	4644      	mov	r4, r8
 80006ee:	430c      	orrs	r4, r1
 80006f0:	1e62      	subs	r2, r4, #1
 80006f2:	4194      	sbcs	r4, r2
 80006f4:	18e4      	adds	r4, r4, r3
 80006f6:	429c      	cmp	r4, r3
 80006f8:	419b      	sbcs	r3, r3
 80006fa:	425f      	negs	r7, r3
 80006fc:	183f      	adds	r7, r7, r0
 80006fe:	023b      	lsls	r3, r7, #8
 8000700:	d5e3      	bpl.n	80006ca <__aeabi_dadd+0x24a>
 8000702:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <__aeabi_dadd+0x368>)
 8000704:	3601      	adds	r6, #1
 8000706:	429e      	cmp	r6, r3
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x28c>
 800070a:	e0b5      	b.n	8000878 <__aeabi_dadd+0x3f8>
 800070c:	0032      	movs	r2, r6
 800070e:	2700      	movs	r7, #0
 8000710:	2300      	movs	r3, #0
 8000712:	e74c      	b.n	80005ae <__aeabi_dadd+0x12e>
 8000714:	0742      	lsls	r2, r0, #29
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	4313      	orrs	r3, r2
 800071a:	08c0      	lsrs	r0, r0, #3
 800071c:	001a      	movs	r2, r3
 800071e:	4302      	orrs	r2, r0
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x2a4>
 8000722:	e1e1      	b.n	8000ae8 <__aeabi_dadd+0x668>
 8000724:	2780      	movs	r7, #128	; 0x80
 8000726:	033f      	lsls	r7, r7, #12
 8000728:	4307      	orrs	r7, r0
 800072a:	033f      	lsls	r7, r7, #12
 800072c:	4a2e      	ldr	r2, [pc, #184]	; (80007e8 <__aeabi_dadd+0x368>)
 800072e:	0b3f      	lsrs	r7, r7, #12
 8000730:	e73d      	b.n	80005ae <__aeabi_dadd+0x12e>
 8000732:	0020      	movs	r0, r4
 8000734:	f001 fd34 	bl	80021a0 <__clzsi2>
 8000738:	0001      	movs	r1, r0
 800073a:	3118      	adds	r1, #24
 800073c:	291f      	cmp	r1, #31
 800073e:	dc00      	bgt.n	8000742 <__aeabi_dadd+0x2c2>
 8000740:	e6fc      	b.n	800053c <__aeabi_dadd+0xbc>
 8000742:	3808      	subs	r0, #8
 8000744:	4084      	lsls	r4, r0
 8000746:	0027      	movs	r7, r4
 8000748:	2400      	movs	r4, #0
 800074a:	42b1      	cmp	r1, r6
 800074c:	db00      	blt.n	8000750 <__aeabi_dadd+0x2d0>
 800074e:	e6ff      	b.n	8000550 <__aeabi_dadd+0xd0>
 8000750:	4a26      	ldr	r2, [pc, #152]	; (80007ec <__aeabi_dadd+0x36c>)
 8000752:	1a76      	subs	r6, r6, r1
 8000754:	4017      	ands	r7, r2
 8000756:	e70d      	b.n	8000574 <__aeabi_dadd+0xf4>
 8000758:	2a00      	cmp	r2, #0
 800075a:	d02f      	beq.n	80007bc <__aeabi_dadd+0x33c>
 800075c:	464a      	mov	r2, r9
 800075e:	1b92      	subs	r2, r2, r6
 8000760:	4694      	mov	ip, r2
 8000762:	2e00      	cmp	r6, #0
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x2e8>
 8000766:	e0ad      	b.n	80008c4 <__aeabi_dadd+0x444>
 8000768:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <__aeabi_dadd+0x368>)
 800076a:	4591      	cmp	r9, r2
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0x2f0>
 800076e:	e10f      	b.n	8000990 <__aeabi_dadd+0x510>
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0412      	lsls	r2, r2, #16
 8000774:	4310      	orrs	r0, r2
 8000776:	4662      	mov	r2, ip
 8000778:	2a38      	cmp	r2, #56	; 0x38
 800077a:	dd00      	ble.n	800077e <__aeabi_dadd+0x2fe>
 800077c:	e10f      	b.n	800099e <__aeabi_dadd+0x51e>
 800077e:	2a1f      	cmp	r2, #31
 8000780:	dd00      	ble.n	8000784 <__aeabi_dadd+0x304>
 8000782:	e180      	b.n	8000a86 <__aeabi_dadd+0x606>
 8000784:	4664      	mov	r4, ip
 8000786:	2220      	movs	r2, #32
 8000788:	001e      	movs	r6, r3
 800078a:	1b12      	subs	r2, r2, r4
 800078c:	4667      	mov	r7, ip
 800078e:	0004      	movs	r4, r0
 8000790:	4093      	lsls	r3, r2
 8000792:	4094      	lsls	r4, r2
 8000794:	40fe      	lsrs	r6, r7
 8000796:	1e5a      	subs	r2, r3, #1
 8000798:	4193      	sbcs	r3, r2
 800079a:	40f8      	lsrs	r0, r7
 800079c:	4334      	orrs	r4, r6
 800079e:	431c      	orrs	r4, r3
 80007a0:	4480      	add	r8, r0
 80007a2:	1864      	adds	r4, r4, r1
 80007a4:	428c      	cmp	r4, r1
 80007a6:	41bf      	sbcs	r7, r7
 80007a8:	427f      	negs	r7, r7
 80007aa:	464e      	mov	r6, r9
 80007ac:	4447      	add	r7, r8
 80007ae:	e7a6      	b.n	80006fe <__aeabi_dadd+0x27e>
 80007b0:	4642      	mov	r2, r8
 80007b2:	430a      	orrs	r2, r1
 80007b4:	0011      	movs	r1, r2
 80007b6:	1e4a      	subs	r2, r1, #1
 80007b8:	4191      	sbcs	r1, r2
 80007ba:	e6ad      	b.n	8000518 <__aeabi_dadd+0x98>
 80007bc:	4c0c      	ldr	r4, [pc, #48]	; (80007f0 <__aeabi_dadd+0x370>)
 80007be:	1c72      	adds	r2, r6, #1
 80007c0:	4222      	tst	r2, r4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x346>
 80007c4:	e0a1      	b.n	800090a <__aeabi_dadd+0x48a>
 80007c6:	0002      	movs	r2, r0
 80007c8:	431a      	orrs	r2, r3
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_dadd+0x350>
 80007ce:	e0fa      	b.n	80009c6 <__aeabi_dadd+0x546>
 80007d0:	2a00      	cmp	r2, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_dadd+0x356>
 80007d4:	e145      	b.n	8000a62 <__aeabi_dadd+0x5e2>
 80007d6:	003a      	movs	r2, r7
 80007d8:	430a      	orrs	r2, r1
 80007da:	d000      	beq.n	80007de <__aeabi_dadd+0x35e>
 80007dc:	e146      	b.n	8000a6c <__aeabi_dadd+0x5ec>
 80007de:	0742      	lsls	r2, r0, #29
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	08c0      	lsrs	r0, r0, #3
 80007e6:	e77b      	b.n	80006e0 <__aeabi_dadd+0x260>
 80007e8:	000007ff 	.word	0x000007ff
 80007ec:	ff7fffff 	.word	0xff7fffff
 80007f0:	000007fe 	.word	0x000007fe
 80007f4:	4647      	mov	r7, r8
 80007f6:	1a5c      	subs	r4, r3, r1
 80007f8:	1bc2      	subs	r2, r0, r7
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	41bf      	sbcs	r7, r7
 80007fe:	427f      	negs	r7, r7
 8000800:	46b9      	mov	r9, r7
 8000802:	0017      	movs	r7, r2
 8000804:	464a      	mov	r2, r9
 8000806:	1abf      	subs	r7, r7, r2
 8000808:	023a      	lsls	r2, r7, #8
 800080a:	d500      	bpl.n	800080e <__aeabi_dadd+0x38e>
 800080c:	e08d      	b.n	800092a <__aeabi_dadd+0x4aa>
 800080e:	0023      	movs	r3, r4
 8000810:	433b      	orrs	r3, r7
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x396>
 8000814:	e68a      	b.n	800052c <__aeabi_dadd+0xac>
 8000816:	2000      	movs	r0, #0
 8000818:	2500      	movs	r5, #0
 800081a:	e761      	b.n	80006e0 <__aeabi_dadd+0x260>
 800081c:	4cb4      	ldr	r4, [pc, #720]	; (8000af0 <__aeabi_dadd+0x670>)
 800081e:	45a1      	cmp	r9, r4
 8000820:	d100      	bne.n	8000824 <__aeabi_dadd+0x3a4>
 8000822:	e0ad      	b.n	8000980 <__aeabi_dadd+0x500>
 8000824:	2480      	movs	r4, #128	; 0x80
 8000826:	0424      	lsls	r4, r4, #16
 8000828:	4320      	orrs	r0, r4
 800082a:	4664      	mov	r4, ip
 800082c:	2c38      	cmp	r4, #56	; 0x38
 800082e:	dc3d      	bgt.n	80008ac <__aeabi_dadd+0x42c>
 8000830:	4662      	mov	r2, ip
 8000832:	2c1f      	cmp	r4, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0x3b8>
 8000836:	e0b7      	b.n	80009a8 <__aeabi_dadd+0x528>
 8000838:	2520      	movs	r5, #32
 800083a:	001e      	movs	r6, r3
 800083c:	1b2d      	subs	r5, r5, r4
 800083e:	0004      	movs	r4, r0
 8000840:	40ab      	lsls	r3, r5
 8000842:	40ac      	lsls	r4, r5
 8000844:	40d6      	lsrs	r6, r2
 8000846:	40d0      	lsrs	r0, r2
 8000848:	4642      	mov	r2, r8
 800084a:	1e5d      	subs	r5, r3, #1
 800084c:	41ab      	sbcs	r3, r5
 800084e:	4334      	orrs	r4, r6
 8000850:	1a12      	subs	r2, r2, r0
 8000852:	4690      	mov	r8, r2
 8000854:	4323      	orrs	r3, r4
 8000856:	e02c      	b.n	80008b2 <__aeabi_dadd+0x432>
 8000858:	0742      	lsls	r2, r0, #29
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	4313      	orrs	r3, r2
 800085e:	08c0      	lsrs	r0, r0, #3
 8000860:	e73b      	b.n	80006da <__aeabi_dadd+0x25a>
 8000862:	185c      	adds	r4, r3, r1
 8000864:	429c      	cmp	r4, r3
 8000866:	419b      	sbcs	r3, r3
 8000868:	4440      	add	r0, r8
 800086a:	425b      	negs	r3, r3
 800086c:	18c7      	adds	r7, r0, r3
 800086e:	2601      	movs	r6, #1
 8000870:	023b      	lsls	r3, r7, #8
 8000872:	d400      	bmi.n	8000876 <__aeabi_dadd+0x3f6>
 8000874:	e729      	b.n	80006ca <__aeabi_dadd+0x24a>
 8000876:	2602      	movs	r6, #2
 8000878:	4a9e      	ldr	r2, [pc, #632]	; (8000af4 <__aeabi_dadd+0x674>)
 800087a:	0863      	lsrs	r3, r4, #1
 800087c:	4017      	ands	r7, r2
 800087e:	2201      	movs	r2, #1
 8000880:	4014      	ands	r4, r2
 8000882:	431c      	orrs	r4, r3
 8000884:	07fb      	lsls	r3, r7, #31
 8000886:	431c      	orrs	r4, r3
 8000888:	087f      	lsrs	r7, r7, #1
 800088a:	e673      	b.n	8000574 <__aeabi_dadd+0xf4>
 800088c:	4644      	mov	r4, r8
 800088e:	3a20      	subs	r2, #32
 8000890:	40d4      	lsrs	r4, r2
 8000892:	4662      	mov	r2, ip
 8000894:	2a20      	cmp	r2, #32
 8000896:	d005      	beq.n	80008a4 <__aeabi_dadd+0x424>
 8000898:	4667      	mov	r7, ip
 800089a:	2240      	movs	r2, #64	; 0x40
 800089c:	1bd2      	subs	r2, r2, r7
 800089e:	4647      	mov	r7, r8
 80008a0:	4097      	lsls	r7, r2
 80008a2:	4339      	orrs	r1, r7
 80008a4:	1e4a      	subs	r2, r1, #1
 80008a6:	4191      	sbcs	r1, r2
 80008a8:	4321      	orrs	r1, r4
 80008aa:	e635      	b.n	8000518 <__aeabi_dadd+0x98>
 80008ac:	4303      	orrs	r3, r0
 80008ae:	1e58      	subs	r0, r3, #1
 80008b0:	4183      	sbcs	r3, r0
 80008b2:	1acc      	subs	r4, r1, r3
 80008b4:	42a1      	cmp	r1, r4
 80008b6:	41bf      	sbcs	r7, r7
 80008b8:	4643      	mov	r3, r8
 80008ba:	427f      	negs	r7, r7
 80008bc:	4655      	mov	r5, sl
 80008be:	464e      	mov	r6, r9
 80008c0:	1bdf      	subs	r7, r3, r7
 80008c2:	e62e      	b.n	8000522 <__aeabi_dadd+0xa2>
 80008c4:	0002      	movs	r2, r0
 80008c6:	431a      	orrs	r2, r3
 80008c8:	d100      	bne.n	80008cc <__aeabi_dadd+0x44c>
 80008ca:	e0bd      	b.n	8000a48 <__aeabi_dadd+0x5c8>
 80008cc:	4662      	mov	r2, ip
 80008ce:	4664      	mov	r4, ip
 80008d0:	3a01      	subs	r2, #1
 80008d2:	2c01      	cmp	r4, #1
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x458>
 80008d6:	e0e5      	b.n	8000aa4 <__aeabi_dadd+0x624>
 80008d8:	4c85      	ldr	r4, [pc, #532]	; (8000af0 <__aeabi_dadd+0x670>)
 80008da:	45a4      	cmp	ip, r4
 80008dc:	d058      	beq.n	8000990 <__aeabi_dadd+0x510>
 80008de:	4694      	mov	ip, r2
 80008e0:	e749      	b.n	8000776 <__aeabi_dadd+0x2f6>
 80008e2:	4664      	mov	r4, ip
 80008e4:	2220      	movs	r2, #32
 80008e6:	1b12      	subs	r2, r2, r4
 80008e8:	4644      	mov	r4, r8
 80008ea:	4094      	lsls	r4, r2
 80008ec:	000f      	movs	r7, r1
 80008ee:	46a1      	mov	r9, r4
 80008f0:	4664      	mov	r4, ip
 80008f2:	4091      	lsls	r1, r2
 80008f4:	40e7      	lsrs	r7, r4
 80008f6:	464c      	mov	r4, r9
 80008f8:	1e4a      	subs	r2, r1, #1
 80008fa:	4191      	sbcs	r1, r2
 80008fc:	433c      	orrs	r4, r7
 80008fe:	4642      	mov	r2, r8
 8000900:	430c      	orrs	r4, r1
 8000902:	4661      	mov	r1, ip
 8000904:	40ca      	lsrs	r2, r1
 8000906:	1880      	adds	r0, r0, r2
 8000908:	e6f4      	b.n	80006f4 <__aeabi_dadd+0x274>
 800090a:	4c79      	ldr	r4, [pc, #484]	; (8000af0 <__aeabi_dadd+0x670>)
 800090c:	42a2      	cmp	r2, r4
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x492>
 8000910:	e6fd      	b.n	800070e <__aeabi_dadd+0x28e>
 8000912:	1859      	adds	r1, r3, r1
 8000914:	4299      	cmp	r1, r3
 8000916:	419b      	sbcs	r3, r3
 8000918:	4440      	add	r0, r8
 800091a:	425f      	negs	r7, r3
 800091c:	19c7      	adds	r7, r0, r7
 800091e:	07fc      	lsls	r4, r7, #31
 8000920:	0849      	lsrs	r1, r1, #1
 8000922:	0016      	movs	r6, r2
 8000924:	430c      	orrs	r4, r1
 8000926:	087f      	lsrs	r7, r7, #1
 8000928:	e6cf      	b.n	80006ca <__aeabi_dadd+0x24a>
 800092a:	1acc      	subs	r4, r1, r3
 800092c:	42a1      	cmp	r1, r4
 800092e:	41bf      	sbcs	r7, r7
 8000930:	4643      	mov	r3, r8
 8000932:	427f      	negs	r7, r7
 8000934:	1a18      	subs	r0, r3, r0
 8000936:	4655      	mov	r5, sl
 8000938:	1bc7      	subs	r7, r0, r7
 800093a:	e5f7      	b.n	800052c <__aeabi_dadd+0xac>
 800093c:	08c9      	lsrs	r1, r1, #3
 800093e:	077b      	lsls	r3, r7, #29
 8000940:	4655      	mov	r5, sl
 8000942:	430b      	orrs	r3, r1
 8000944:	08f8      	lsrs	r0, r7, #3
 8000946:	e6c8      	b.n	80006da <__aeabi_dadd+0x25a>
 8000948:	2c00      	cmp	r4, #0
 800094a:	d000      	beq.n	800094e <__aeabi_dadd+0x4ce>
 800094c:	e081      	b.n	8000a52 <__aeabi_dadd+0x5d2>
 800094e:	4643      	mov	r3, r8
 8000950:	430b      	orrs	r3, r1
 8000952:	d115      	bne.n	8000980 <__aeabi_dadd+0x500>
 8000954:	2080      	movs	r0, #128	; 0x80
 8000956:	2500      	movs	r5, #0
 8000958:	0300      	lsls	r0, r0, #12
 800095a:	e6e3      	b.n	8000724 <__aeabi_dadd+0x2a4>
 800095c:	1a5c      	subs	r4, r3, r1
 800095e:	42a3      	cmp	r3, r4
 8000960:	419b      	sbcs	r3, r3
 8000962:	1bc7      	subs	r7, r0, r7
 8000964:	425b      	negs	r3, r3
 8000966:	2601      	movs	r6, #1
 8000968:	1aff      	subs	r7, r7, r3
 800096a:	e5da      	b.n	8000522 <__aeabi_dadd+0xa2>
 800096c:	0742      	lsls	r2, r0, #29
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	4313      	orrs	r3, r2
 8000972:	08c0      	lsrs	r0, r0, #3
 8000974:	e6d2      	b.n	800071c <__aeabi_dadd+0x29c>
 8000976:	0742      	lsls	r2, r0, #29
 8000978:	08db      	lsrs	r3, r3, #3
 800097a:	4313      	orrs	r3, r2
 800097c:	08c0      	lsrs	r0, r0, #3
 800097e:	e6ac      	b.n	80006da <__aeabi_dadd+0x25a>
 8000980:	4643      	mov	r3, r8
 8000982:	4642      	mov	r2, r8
 8000984:	08c9      	lsrs	r1, r1, #3
 8000986:	075b      	lsls	r3, r3, #29
 8000988:	4655      	mov	r5, sl
 800098a:	430b      	orrs	r3, r1
 800098c:	08d0      	lsrs	r0, r2, #3
 800098e:	e6c5      	b.n	800071c <__aeabi_dadd+0x29c>
 8000990:	4643      	mov	r3, r8
 8000992:	4642      	mov	r2, r8
 8000994:	075b      	lsls	r3, r3, #29
 8000996:	08c9      	lsrs	r1, r1, #3
 8000998:	430b      	orrs	r3, r1
 800099a:	08d0      	lsrs	r0, r2, #3
 800099c:	e6be      	b.n	800071c <__aeabi_dadd+0x29c>
 800099e:	4303      	orrs	r3, r0
 80009a0:	001c      	movs	r4, r3
 80009a2:	1e63      	subs	r3, r4, #1
 80009a4:	419c      	sbcs	r4, r3
 80009a6:	e6fc      	b.n	80007a2 <__aeabi_dadd+0x322>
 80009a8:	0002      	movs	r2, r0
 80009aa:	3c20      	subs	r4, #32
 80009ac:	40e2      	lsrs	r2, r4
 80009ae:	0014      	movs	r4, r2
 80009b0:	4662      	mov	r2, ip
 80009b2:	2a20      	cmp	r2, #32
 80009b4:	d003      	beq.n	80009be <__aeabi_dadd+0x53e>
 80009b6:	2540      	movs	r5, #64	; 0x40
 80009b8:	1aad      	subs	r5, r5, r2
 80009ba:	40a8      	lsls	r0, r5
 80009bc:	4303      	orrs	r3, r0
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4323      	orrs	r3, r4
 80009c4:	e775      	b.n	80008b2 <__aeabi_dadd+0x432>
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d0e2      	beq.n	8000990 <__aeabi_dadd+0x510>
 80009ca:	003a      	movs	r2, r7
 80009cc:	430a      	orrs	r2, r1
 80009ce:	d0cd      	beq.n	800096c <__aeabi_dadd+0x4ec>
 80009d0:	0742      	lsls	r2, r0, #29
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	4313      	orrs	r3, r2
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	08c0      	lsrs	r0, r0, #3
 80009da:	0312      	lsls	r2, r2, #12
 80009dc:	4210      	tst	r0, r2
 80009de:	d006      	beq.n	80009ee <__aeabi_dadd+0x56e>
 80009e0:	08fc      	lsrs	r4, r7, #3
 80009e2:	4214      	tst	r4, r2
 80009e4:	d103      	bne.n	80009ee <__aeabi_dadd+0x56e>
 80009e6:	0020      	movs	r0, r4
 80009e8:	08cb      	lsrs	r3, r1, #3
 80009ea:	077a      	lsls	r2, r7, #29
 80009ec:	4313      	orrs	r3, r2
 80009ee:	0f5a      	lsrs	r2, r3, #29
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	0752      	lsls	r2, r2, #29
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	e690      	b.n	800071c <__aeabi_dadd+0x29c>
 80009fa:	4643      	mov	r3, r8
 80009fc:	430b      	orrs	r3, r1
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x582>
 8000a00:	e709      	b.n	8000816 <__aeabi_dadd+0x396>
 8000a02:	4643      	mov	r3, r8
 8000a04:	4642      	mov	r2, r8
 8000a06:	08c9      	lsrs	r1, r1, #3
 8000a08:	075b      	lsls	r3, r3, #29
 8000a0a:	4655      	mov	r5, sl
 8000a0c:	430b      	orrs	r3, r1
 8000a0e:	08d0      	lsrs	r0, r2, #3
 8000a10:	e666      	b.n	80006e0 <__aeabi_dadd+0x260>
 8000a12:	1acc      	subs	r4, r1, r3
 8000a14:	42a1      	cmp	r1, r4
 8000a16:	4189      	sbcs	r1, r1
 8000a18:	1a3f      	subs	r7, r7, r0
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	4655      	mov	r5, sl
 8000a1e:	2601      	movs	r6, #1
 8000a20:	1a7f      	subs	r7, r7, r1
 8000a22:	e57e      	b.n	8000522 <__aeabi_dadd+0xa2>
 8000a24:	4642      	mov	r2, r8
 8000a26:	1a5c      	subs	r4, r3, r1
 8000a28:	1a87      	subs	r7, r0, r2
 8000a2a:	42a3      	cmp	r3, r4
 8000a2c:	4192      	sbcs	r2, r2
 8000a2e:	4252      	negs	r2, r2
 8000a30:	1abf      	subs	r7, r7, r2
 8000a32:	023a      	lsls	r2, r7, #8
 8000a34:	d53d      	bpl.n	8000ab2 <__aeabi_dadd+0x632>
 8000a36:	1acc      	subs	r4, r1, r3
 8000a38:	42a1      	cmp	r1, r4
 8000a3a:	4189      	sbcs	r1, r1
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	4249      	negs	r1, r1
 8000a40:	1a1f      	subs	r7, r3, r0
 8000a42:	4655      	mov	r5, sl
 8000a44:	1a7f      	subs	r7, r7, r1
 8000a46:	e595      	b.n	8000574 <__aeabi_dadd+0xf4>
 8000a48:	077b      	lsls	r3, r7, #29
 8000a4a:	08c9      	lsrs	r1, r1, #3
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	08f8      	lsrs	r0, r7, #3
 8000a50:	e643      	b.n	80006da <__aeabi_dadd+0x25a>
 8000a52:	4644      	mov	r4, r8
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	430c      	orrs	r4, r1
 8000a58:	d130      	bne.n	8000abc <__aeabi_dadd+0x63c>
 8000a5a:	0742      	lsls	r2, r0, #29
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c0      	lsrs	r0, r0, #3
 8000a60:	e65c      	b.n	800071c <__aeabi_dadd+0x29c>
 8000a62:	077b      	lsls	r3, r7, #29
 8000a64:	08c9      	lsrs	r1, r1, #3
 8000a66:	430b      	orrs	r3, r1
 8000a68:	08f8      	lsrs	r0, r7, #3
 8000a6a:	e639      	b.n	80006e0 <__aeabi_dadd+0x260>
 8000a6c:	185c      	adds	r4, r3, r1
 8000a6e:	429c      	cmp	r4, r3
 8000a70:	419b      	sbcs	r3, r3
 8000a72:	4440      	add	r0, r8
 8000a74:	425b      	negs	r3, r3
 8000a76:	18c7      	adds	r7, r0, r3
 8000a78:	023b      	lsls	r3, r7, #8
 8000a7a:	d400      	bmi.n	8000a7e <__aeabi_dadd+0x5fe>
 8000a7c:	e625      	b.n	80006ca <__aeabi_dadd+0x24a>
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <__aeabi_dadd+0x674>)
 8000a80:	2601      	movs	r6, #1
 8000a82:	401f      	ands	r7, r3
 8000a84:	e621      	b.n	80006ca <__aeabi_dadd+0x24a>
 8000a86:	0004      	movs	r4, r0
 8000a88:	3a20      	subs	r2, #32
 8000a8a:	40d4      	lsrs	r4, r2
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2a20      	cmp	r2, #32
 8000a90:	d004      	beq.n	8000a9c <__aeabi_dadd+0x61c>
 8000a92:	2240      	movs	r2, #64	; 0x40
 8000a94:	4666      	mov	r6, ip
 8000a96:	1b92      	subs	r2, r2, r6
 8000a98:	4090      	lsls	r0, r2
 8000a9a:	4303      	orrs	r3, r0
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	4193      	sbcs	r3, r2
 8000aa0:	431c      	orrs	r4, r3
 8000aa2:	e67e      	b.n	80007a2 <__aeabi_dadd+0x322>
 8000aa4:	185c      	adds	r4, r3, r1
 8000aa6:	428c      	cmp	r4, r1
 8000aa8:	4189      	sbcs	r1, r1
 8000aaa:	4440      	add	r0, r8
 8000aac:	4249      	negs	r1, r1
 8000aae:	1847      	adds	r7, r0, r1
 8000ab0:	e6dd      	b.n	800086e <__aeabi_dadd+0x3ee>
 8000ab2:	0023      	movs	r3, r4
 8000ab4:	433b      	orrs	r3, r7
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x63a>
 8000ab8:	e6ad      	b.n	8000816 <__aeabi_dadd+0x396>
 8000aba:	e606      	b.n	80006ca <__aeabi_dadd+0x24a>
 8000abc:	0744      	lsls	r4, r0, #29
 8000abe:	4323      	orrs	r3, r4
 8000ac0:	2480      	movs	r4, #128	; 0x80
 8000ac2:	08c0      	lsrs	r0, r0, #3
 8000ac4:	0324      	lsls	r4, r4, #12
 8000ac6:	4220      	tst	r0, r4
 8000ac8:	d008      	beq.n	8000adc <__aeabi_dadd+0x65c>
 8000aca:	4642      	mov	r2, r8
 8000acc:	08d6      	lsrs	r6, r2, #3
 8000ace:	4226      	tst	r6, r4
 8000ad0:	d104      	bne.n	8000adc <__aeabi_dadd+0x65c>
 8000ad2:	4655      	mov	r5, sl
 8000ad4:	0030      	movs	r0, r6
 8000ad6:	08cb      	lsrs	r3, r1, #3
 8000ad8:	0751      	lsls	r1, r2, #29
 8000ada:	430b      	orrs	r3, r1
 8000adc:	0f5a      	lsrs	r2, r3, #29
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	0752      	lsls	r2, r2, #29
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	e619      	b.n	800071c <__aeabi_dadd+0x29c>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4a01      	ldr	r2, [pc, #4]	; (8000af0 <__aeabi_dadd+0x670>)
 8000aec:	001f      	movs	r7, r3
 8000aee:	e55e      	b.n	80005ae <__aeabi_dadd+0x12e>
 8000af0:	000007ff 	.word	0x000007ff
 8000af4:	ff7fffff 	.word	0xff7fffff

08000af8 <__aeabi_ddiv>:
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	4657      	mov	r7, sl
 8000afc:	464e      	mov	r6, r9
 8000afe:	4645      	mov	r5, r8
 8000b00:	46de      	mov	lr, fp
 8000b02:	b5e0      	push	{r5, r6, r7, lr}
 8000b04:	4681      	mov	r9, r0
 8000b06:	0005      	movs	r5, r0
 8000b08:	030c      	lsls	r4, r1, #12
 8000b0a:	0048      	lsls	r0, r1, #1
 8000b0c:	4692      	mov	sl, r2
 8000b0e:	001f      	movs	r7, r3
 8000b10:	b085      	sub	sp, #20
 8000b12:	0b24      	lsrs	r4, r4, #12
 8000b14:	0d40      	lsrs	r0, r0, #21
 8000b16:	0fce      	lsrs	r6, r1, #31
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_ddiv+0x26>
 8000b1c:	e156      	b.n	8000dcc <__aeabi_ddiv+0x2d4>
 8000b1e:	4bd4      	ldr	r3, [pc, #848]	; (8000e70 <__aeabi_ddiv+0x378>)
 8000b20:	4298      	cmp	r0, r3
 8000b22:	d100      	bne.n	8000b26 <__aeabi_ddiv+0x2e>
 8000b24:	e172      	b.n	8000e0c <__aeabi_ddiv+0x314>
 8000b26:	0f6b      	lsrs	r3, r5, #29
 8000b28:	00e4      	lsls	r4, r4, #3
 8000b2a:	431c      	orrs	r4, r3
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	041b      	lsls	r3, r3, #16
 8000b30:	4323      	orrs	r3, r4
 8000b32:	4698      	mov	r8, r3
 8000b34:	4bcf      	ldr	r3, [pc, #828]	; (8000e74 <__aeabi_ddiv+0x37c>)
 8000b36:	00ed      	lsls	r5, r5, #3
 8000b38:	469b      	mov	fp, r3
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	4699      	mov	r9, r3
 8000b3e:	4483      	add	fp, r0
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	033c      	lsls	r4, r7, #12
 8000b44:	007b      	lsls	r3, r7, #1
 8000b46:	4650      	mov	r0, sl
 8000b48:	0b24      	lsrs	r4, r4, #12
 8000b4a:	0d5b      	lsrs	r3, r3, #21
 8000b4c:	0fff      	lsrs	r7, r7, #31
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_ddiv+0x5c>
 8000b52:	e11f      	b.n	8000d94 <__aeabi_ddiv+0x29c>
 8000b54:	4ac6      	ldr	r2, [pc, #792]	; (8000e70 <__aeabi_ddiv+0x378>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d100      	bne.n	8000b5c <__aeabi_ddiv+0x64>
 8000b5a:	e162      	b.n	8000e22 <__aeabi_ddiv+0x32a>
 8000b5c:	49c5      	ldr	r1, [pc, #788]	; (8000e74 <__aeabi_ddiv+0x37c>)
 8000b5e:	0f42      	lsrs	r2, r0, #29
 8000b60:	468c      	mov	ip, r1
 8000b62:	00e4      	lsls	r4, r4, #3
 8000b64:	4659      	mov	r1, fp
 8000b66:	4314      	orrs	r4, r2
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	4463      	add	r3, ip
 8000b6c:	0412      	lsls	r2, r2, #16
 8000b6e:	1acb      	subs	r3, r1, r3
 8000b70:	4314      	orrs	r4, r2
 8000b72:	469b      	mov	fp, r3
 8000b74:	00c2      	lsls	r2, r0, #3
 8000b76:	2000      	movs	r0, #0
 8000b78:	0033      	movs	r3, r6
 8000b7a:	407b      	eors	r3, r7
 8000b7c:	469a      	mov	sl, r3
 8000b7e:	464b      	mov	r3, r9
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d827      	bhi.n	8000bd4 <__aeabi_ddiv+0xdc>
 8000b84:	49bc      	ldr	r1, [pc, #752]	; (8000e78 <__aeabi_ddiv+0x380>)
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	58cb      	ldr	r3, [r1, r3]
 8000b8a:	469f      	mov	pc, r3
 8000b8c:	46b2      	mov	sl, r6
 8000b8e:	9b00      	ldr	r3, [sp, #0]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d016      	beq.n	8000bc2 <__aeabi_ddiv+0xca>
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d100      	bne.n	8000b9a <__aeabi_ddiv+0xa2>
 8000b98:	e28e      	b.n	80010b8 <__aeabi_ddiv+0x5c0>
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_ddiv+0xa8>
 8000b9e:	e0d9      	b.n	8000d54 <__aeabi_ddiv+0x25c>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2400      	movs	r4, #0
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	4652      	mov	r2, sl
 8000ba8:	051b      	lsls	r3, r3, #20
 8000baa:	4323      	orrs	r3, r4
 8000bac:	07d2      	lsls	r2, r2, #31
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	b005      	add	sp, #20
 8000bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb8:	46bb      	mov	fp, r7
 8000bba:	46b2      	mov	sl, r6
 8000bbc:	46a9      	mov	r9, r5
 8000bbe:	46a0      	mov	r8, r4
 8000bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc2:	2400      	movs	r4, #0
 8000bc4:	2500      	movs	r5, #0
 8000bc6:	4baa      	ldr	r3, [pc, #680]	; (8000e70 <__aeabi_ddiv+0x378>)
 8000bc8:	e7ed      	b.n	8000ba6 <__aeabi_ddiv+0xae>
 8000bca:	46ba      	mov	sl, r7
 8000bcc:	46a0      	mov	r8, r4
 8000bce:	0015      	movs	r5, r2
 8000bd0:	9000      	str	r0, [sp, #0]
 8000bd2:	e7dc      	b.n	8000b8e <__aeabi_ddiv+0x96>
 8000bd4:	4544      	cmp	r4, r8
 8000bd6:	d200      	bcs.n	8000bda <__aeabi_ddiv+0xe2>
 8000bd8:	e1c7      	b.n	8000f6a <__aeabi_ddiv+0x472>
 8000bda:	d100      	bne.n	8000bde <__aeabi_ddiv+0xe6>
 8000bdc:	e1c2      	b.n	8000f64 <__aeabi_ddiv+0x46c>
 8000bde:	2301      	movs	r3, #1
 8000be0:	425b      	negs	r3, r3
 8000be2:	469c      	mov	ip, r3
 8000be4:	002e      	movs	r6, r5
 8000be6:	4640      	mov	r0, r8
 8000be8:	2500      	movs	r5, #0
 8000bea:	44e3      	add	fp, ip
 8000bec:	0223      	lsls	r3, r4, #8
 8000bee:	0e14      	lsrs	r4, r2, #24
 8000bf0:	431c      	orrs	r4, r3
 8000bf2:	0c1b      	lsrs	r3, r3, #16
 8000bf4:	4699      	mov	r9, r3
 8000bf6:	0423      	lsls	r3, r4, #16
 8000bf8:	0c1f      	lsrs	r7, r3, #16
 8000bfa:	0212      	lsls	r2, r2, #8
 8000bfc:	4649      	mov	r1, r9
 8000bfe:	9200      	str	r2, [sp, #0]
 8000c00:	9701      	str	r7, [sp, #4]
 8000c02:	f7ff fb0f 	bl	8000224 <__aeabi_uidivmod>
 8000c06:	0002      	movs	r2, r0
 8000c08:	437a      	muls	r2, r7
 8000c0a:	040b      	lsls	r3, r1, #16
 8000c0c:	0c31      	lsrs	r1, r6, #16
 8000c0e:	4680      	mov	r8, r0
 8000c10:	4319      	orrs	r1, r3
 8000c12:	428a      	cmp	r2, r1
 8000c14:	d907      	bls.n	8000c26 <__aeabi_ddiv+0x12e>
 8000c16:	2301      	movs	r3, #1
 8000c18:	425b      	negs	r3, r3
 8000c1a:	469c      	mov	ip, r3
 8000c1c:	1909      	adds	r1, r1, r4
 8000c1e:	44e0      	add	r8, ip
 8000c20:	428c      	cmp	r4, r1
 8000c22:	d800      	bhi.n	8000c26 <__aeabi_ddiv+0x12e>
 8000c24:	e207      	b.n	8001036 <__aeabi_ddiv+0x53e>
 8000c26:	1a88      	subs	r0, r1, r2
 8000c28:	4649      	mov	r1, r9
 8000c2a:	f7ff fafb 	bl	8000224 <__aeabi_uidivmod>
 8000c2e:	0409      	lsls	r1, r1, #16
 8000c30:	468c      	mov	ip, r1
 8000c32:	0431      	lsls	r1, r6, #16
 8000c34:	4666      	mov	r6, ip
 8000c36:	9a01      	ldr	r2, [sp, #4]
 8000c38:	0c09      	lsrs	r1, r1, #16
 8000c3a:	4342      	muls	r2, r0
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	4331      	orrs	r1, r6
 8000c40:	428a      	cmp	r2, r1
 8000c42:	d904      	bls.n	8000c4e <__aeabi_ddiv+0x156>
 8000c44:	1909      	adds	r1, r1, r4
 8000c46:	3b01      	subs	r3, #1
 8000c48:	428c      	cmp	r4, r1
 8000c4a:	d800      	bhi.n	8000c4e <__aeabi_ddiv+0x156>
 8000c4c:	e1ed      	b.n	800102a <__aeabi_ddiv+0x532>
 8000c4e:	1a88      	subs	r0, r1, r2
 8000c50:	4642      	mov	r2, r8
 8000c52:	0412      	lsls	r2, r2, #16
 8000c54:	431a      	orrs	r2, r3
 8000c56:	4690      	mov	r8, r2
 8000c58:	4641      	mov	r1, r8
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	040e      	lsls	r6, r1, #16
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	001f      	movs	r7, r3
 8000c62:	9302      	str	r3, [sp, #8]
 8000c64:	9b00      	ldr	r3, [sp, #0]
 8000c66:	0c36      	lsrs	r6, r6, #16
 8000c68:	041b      	lsls	r3, r3, #16
 8000c6a:	0c19      	lsrs	r1, r3, #16
 8000c6c:	000b      	movs	r3, r1
 8000c6e:	4373      	muls	r3, r6
 8000c70:	0c12      	lsrs	r2, r2, #16
 8000c72:	437e      	muls	r6, r7
 8000c74:	9103      	str	r1, [sp, #12]
 8000c76:	4351      	muls	r1, r2
 8000c78:	437a      	muls	r2, r7
 8000c7a:	0c1f      	lsrs	r7, r3, #16
 8000c7c:	46bc      	mov	ip, r7
 8000c7e:	1876      	adds	r6, r6, r1
 8000c80:	4466      	add	r6, ip
 8000c82:	42b1      	cmp	r1, r6
 8000c84:	d903      	bls.n	8000c8e <__aeabi_ddiv+0x196>
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	0249      	lsls	r1, r1, #9
 8000c8a:	468c      	mov	ip, r1
 8000c8c:	4462      	add	r2, ip
 8000c8e:	0c31      	lsrs	r1, r6, #16
 8000c90:	188a      	adds	r2, r1, r2
 8000c92:	0431      	lsls	r1, r6, #16
 8000c94:	041e      	lsls	r6, r3, #16
 8000c96:	0c36      	lsrs	r6, r6, #16
 8000c98:	198e      	adds	r6, r1, r6
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d302      	bcc.n	8000ca4 <__aeabi_ddiv+0x1ac>
 8000c9e:	d112      	bne.n	8000cc6 <__aeabi_ddiv+0x1ce>
 8000ca0:	42b5      	cmp	r5, r6
 8000ca2:	d210      	bcs.n	8000cc6 <__aeabi_ddiv+0x1ce>
 8000ca4:	4643      	mov	r3, r8
 8000ca6:	1e59      	subs	r1, r3, #1
 8000ca8:	9b00      	ldr	r3, [sp, #0]
 8000caa:	469c      	mov	ip, r3
 8000cac:	4465      	add	r5, ip
 8000cae:	001f      	movs	r7, r3
 8000cb0:	429d      	cmp	r5, r3
 8000cb2:	419b      	sbcs	r3, r3
 8000cb4:	425b      	negs	r3, r3
 8000cb6:	191b      	adds	r3, r3, r4
 8000cb8:	18c0      	adds	r0, r0, r3
 8000cba:	4284      	cmp	r4, r0
 8000cbc:	d200      	bcs.n	8000cc0 <__aeabi_ddiv+0x1c8>
 8000cbe:	e1a0      	b.n	8001002 <__aeabi_ddiv+0x50a>
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_ddiv+0x1cc>
 8000cc2:	e19b      	b.n	8000ffc <__aeabi_ddiv+0x504>
 8000cc4:	4688      	mov	r8, r1
 8000cc6:	1bae      	subs	r6, r5, r6
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	41ad      	sbcs	r5, r5
 8000ccc:	1a80      	subs	r0, r0, r2
 8000cce:	426d      	negs	r5, r5
 8000cd0:	1b40      	subs	r0, r0, r5
 8000cd2:	4284      	cmp	r4, r0
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_ddiv+0x1e0>
 8000cd6:	e1d5      	b.n	8001084 <__aeabi_ddiv+0x58c>
 8000cd8:	4649      	mov	r1, r9
 8000cda:	f7ff faa3 	bl	8000224 <__aeabi_uidivmod>
 8000cde:	9a01      	ldr	r2, [sp, #4]
 8000ce0:	040b      	lsls	r3, r1, #16
 8000ce2:	4342      	muls	r2, r0
 8000ce4:	0c31      	lsrs	r1, r6, #16
 8000ce6:	0005      	movs	r5, r0
 8000ce8:	4319      	orrs	r1, r3
 8000cea:	428a      	cmp	r2, r1
 8000cec:	d900      	bls.n	8000cf0 <__aeabi_ddiv+0x1f8>
 8000cee:	e16c      	b.n	8000fca <__aeabi_ddiv+0x4d2>
 8000cf0:	1a88      	subs	r0, r1, r2
 8000cf2:	4649      	mov	r1, r9
 8000cf4:	f7ff fa96 	bl	8000224 <__aeabi_uidivmod>
 8000cf8:	9a01      	ldr	r2, [sp, #4]
 8000cfa:	0436      	lsls	r6, r6, #16
 8000cfc:	4342      	muls	r2, r0
 8000cfe:	0409      	lsls	r1, r1, #16
 8000d00:	0c36      	lsrs	r6, r6, #16
 8000d02:	0003      	movs	r3, r0
 8000d04:	430e      	orrs	r6, r1
 8000d06:	42b2      	cmp	r2, r6
 8000d08:	d900      	bls.n	8000d0c <__aeabi_ddiv+0x214>
 8000d0a:	e153      	b.n	8000fb4 <__aeabi_ddiv+0x4bc>
 8000d0c:	9803      	ldr	r0, [sp, #12]
 8000d0e:	1ab6      	subs	r6, r6, r2
 8000d10:	0002      	movs	r2, r0
 8000d12:	042d      	lsls	r5, r5, #16
 8000d14:	431d      	orrs	r5, r3
 8000d16:	9f02      	ldr	r7, [sp, #8]
 8000d18:	042b      	lsls	r3, r5, #16
 8000d1a:	0c1b      	lsrs	r3, r3, #16
 8000d1c:	435a      	muls	r2, r3
 8000d1e:	437b      	muls	r3, r7
 8000d20:	469c      	mov	ip, r3
 8000d22:	0c29      	lsrs	r1, r5, #16
 8000d24:	4348      	muls	r0, r1
 8000d26:	0c13      	lsrs	r3, r2, #16
 8000d28:	4484      	add	ip, r0
 8000d2a:	4463      	add	r3, ip
 8000d2c:	4379      	muls	r1, r7
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d903      	bls.n	8000d3a <__aeabi_ddiv+0x242>
 8000d32:	2080      	movs	r0, #128	; 0x80
 8000d34:	0240      	lsls	r0, r0, #9
 8000d36:	4684      	mov	ip, r0
 8000d38:	4461      	add	r1, ip
 8000d3a:	0c18      	lsrs	r0, r3, #16
 8000d3c:	0412      	lsls	r2, r2, #16
 8000d3e:	041b      	lsls	r3, r3, #16
 8000d40:	0c12      	lsrs	r2, r2, #16
 8000d42:	1841      	adds	r1, r0, r1
 8000d44:	189b      	adds	r3, r3, r2
 8000d46:	428e      	cmp	r6, r1
 8000d48:	d200      	bcs.n	8000d4c <__aeabi_ddiv+0x254>
 8000d4a:	e0ff      	b.n	8000f4c <__aeabi_ddiv+0x454>
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_ddiv+0x258>
 8000d4e:	e0fa      	b.n	8000f46 <__aeabi_ddiv+0x44e>
 8000d50:	2301      	movs	r3, #1
 8000d52:	431d      	orrs	r5, r3
 8000d54:	4a49      	ldr	r2, [pc, #292]	; (8000e7c <__aeabi_ddiv+0x384>)
 8000d56:	445a      	add	r2, fp
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	dc00      	bgt.n	8000d5e <__aeabi_ddiv+0x266>
 8000d5c:	e0aa      	b.n	8000eb4 <__aeabi_ddiv+0x3bc>
 8000d5e:	076b      	lsls	r3, r5, #29
 8000d60:	d000      	beq.n	8000d64 <__aeabi_ddiv+0x26c>
 8000d62:	e13d      	b.n	8000fe0 <__aeabi_ddiv+0x4e8>
 8000d64:	08ed      	lsrs	r5, r5, #3
 8000d66:	4643      	mov	r3, r8
 8000d68:	01db      	lsls	r3, r3, #7
 8000d6a:	d506      	bpl.n	8000d7a <__aeabi_ddiv+0x282>
 8000d6c:	4642      	mov	r2, r8
 8000d6e:	4b44      	ldr	r3, [pc, #272]	; (8000e80 <__aeabi_ddiv+0x388>)
 8000d70:	401a      	ands	r2, r3
 8000d72:	4690      	mov	r8, r2
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	00d2      	lsls	r2, r2, #3
 8000d78:	445a      	add	r2, fp
 8000d7a:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <__aeabi_ddiv+0x38c>)
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dd00      	ble.n	8000d82 <__aeabi_ddiv+0x28a>
 8000d80:	e71f      	b.n	8000bc2 <__aeabi_ddiv+0xca>
 8000d82:	4643      	mov	r3, r8
 8000d84:	075b      	lsls	r3, r3, #29
 8000d86:	431d      	orrs	r5, r3
 8000d88:	4643      	mov	r3, r8
 8000d8a:	0552      	lsls	r2, r2, #21
 8000d8c:	025c      	lsls	r4, r3, #9
 8000d8e:	0b24      	lsrs	r4, r4, #12
 8000d90:	0d53      	lsrs	r3, r2, #21
 8000d92:	e708      	b.n	8000ba6 <__aeabi_ddiv+0xae>
 8000d94:	4652      	mov	r2, sl
 8000d96:	4322      	orrs	r2, r4
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0x2a4>
 8000d9a:	e07b      	b.n	8000e94 <__aeabi_ddiv+0x39c>
 8000d9c:	2c00      	cmp	r4, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_ddiv+0x2aa>
 8000da0:	e0fa      	b.n	8000f98 <__aeabi_ddiv+0x4a0>
 8000da2:	0020      	movs	r0, r4
 8000da4:	f001 f9fc 	bl	80021a0 <__clzsi2>
 8000da8:	0002      	movs	r2, r0
 8000daa:	3a0b      	subs	r2, #11
 8000dac:	231d      	movs	r3, #29
 8000dae:	0001      	movs	r1, r0
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	4652      	mov	r2, sl
 8000db4:	3908      	subs	r1, #8
 8000db6:	40da      	lsrs	r2, r3
 8000db8:	408c      	lsls	r4, r1
 8000dba:	4314      	orrs	r4, r2
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	408a      	lsls	r2, r1
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <__aeabi_ddiv+0x390>)
 8000dc2:	4458      	add	r0, fp
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	4483      	add	fp, r0
 8000dc8:	2000      	movs	r0, #0
 8000dca:	e6d5      	b.n	8000b78 <__aeabi_ddiv+0x80>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	4323      	orrs	r3, r4
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	d044      	beq.n	8000e5e <__aeabi_ddiv+0x366>
 8000dd4:	2c00      	cmp	r4, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0x2e2>
 8000dd8:	e0ce      	b.n	8000f78 <__aeabi_ddiv+0x480>
 8000dda:	0020      	movs	r0, r4
 8000ddc:	f001 f9e0 	bl	80021a0 <__clzsi2>
 8000de0:	0001      	movs	r1, r0
 8000de2:	0002      	movs	r2, r0
 8000de4:	390b      	subs	r1, #11
 8000de6:	231d      	movs	r3, #29
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	4649      	mov	r1, r9
 8000dec:	0010      	movs	r0, r2
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	3808      	subs	r0, #8
 8000df2:	4084      	lsls	r4, r0
 8000df4:	000b      	movs	r3, r1
 8000df6:	464d      	mov	r5, r9
 8000df8:	4323      	orrs	r3, r4
 8000dfa:	4698      	mov	r8, r3
 8000dfc:	4085      	lsls	r5, r0
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <__aeabi_ddiv+0x394>)
 8000e00:	1a83      	subs	r3, r0, r2
 8000e02:	469b      	mov	fp, r3
 8000e04:	2300      	movs	r3, #0
 8000e06:	4699      	mov	r9, r3
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	e69a      	b.n	8000b42 <__aeabi_ddiv+0x4a>
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	4323      	orrs	r3, r4
 8000e10:	4698      	mov	r8, r3
 8000e12:	d11d      	bne.n	8000e50 <__aeabi_ddiv+0x358>
 8000e14:	2308      	movs	r3, #8
 8000e16:	4699      	mov	r9, r3
 8000e18:	3b06      	subs	r3, #6
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	4683      	mov	fp, r0
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	e68f      	b.n	8000b42 <__aeabi_ddiv+0x4a>
 8000e22:	4652      	mov	r2, sl
 8000e24:	4322      	orrs	r2, r4
 8000e26:	d109      	bne.n	8000e3c <__aeabi_ddiv+0x344>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <__aeabi_ddiv+0x398>)
 8000e30:	4689      	mov	r9, r1
 8000e32:	469c      	mov	ip, r3
 8000e34:	2400      	movs	r4, #0
 8000e36:	2002      	movs	r0, #2
 8000e38:	44e3      	add	fp, ip
 8000e3a:	e69d      	b.n	8000b78 <__aeabi_ddiv+0x80>
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	464a      	mov	r2, r9
 8000e40:	431a      	orrs	r2, r3
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <__aeabi_ddiv+0x398>)
 8000e44:	4691      	mov	r9, r2
 8000e46:	469c      	mov	ip, r3
 8000e48:	4652      	mov	r2, sl
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	44e3      	add	fp, ip
 8000e4e:	e693      	b.n	8000b78 <__aeabi_ddiv+0x80>
 8000e50:	230c      	movs	r3, #12
 8000e52:	4699      	mov	r9, r3
 8000e54:	3b09      	subs	r3, #9
 8000e56:	46a0      	mov	r8, r4
 8000e58:	4683      	mov	fp, r0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	e671      	b.n	8000b42 <__aeabi_ddiv+0x4a>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	4699      	mov	r9, r3
 8000e62:	2300      	movs	r3, #0
 8000e64:	469b      	mov	fp, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	2500      	movs	r5, #0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	e669      	b.n	8000b42 <__aeabi_ddiv+0x4a>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	fffffc01 	.word	0xfffffc01
 8000e78:	0800799c 	.word	0x0800799c
 8000e7c:	000003ff 	.word	0x000003ff
 8000e80:	feffffff 	.word	0xfeffffff
 8000e84:	000007fe 	.word	0x000007fe
 8000e88:	000003f3 	.word	0x000003f3
 8000e8c:	fffffc0d 	.word	0xfffffc0d
 8000e90:	fffff801 	.word	0xfffff801
 8000e94:	4649      	mov	r1, r9
 8000e96:	2301      	movs	r3, #1
 8000e98:	4319      	orrs	r1, r3
 8000e9a:	4689      	mov	r9, r1
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	e66a      	b.n	8000b78 <__aeabi_ddiv+0x80>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2480      	movs	r4, #128	; 0x80
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	4b8a      	ldr	r3, [pc, #552]	; (80010d4 <__aeabi_ddiv+0x5dc>)
 8000eac:	0324      	lsls	r4, r4, #12
 8000eae:	e67a      	b.n	8000ba6 <__aeabi_ddiv+0xae>
 8000eb0:	2501      	movs	r5, #1
 8000eb2:	426d      	negs	r5, r5
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	2b38      	cmp	r3, #56	; 0x38
 8000eba:	dd00      	ble.n	8000ebe <__aeabi_ddiv+0x3c6>
 8000ebc:	e670      	b.n	8000ba0 <__aeabi_ddiv+0xa8>
 8000ebe:	2b1f      	cmp	r3, #31
 8000ec0:	dc00      	bgt.n	8000ec4 <__aeabi_ddiv+0x3cc>
 8000ec2:	e0bf      	b.n	8001044 <__aeabi_ddiv+0x54c>
 8000ec4:	211f      	movs	r1, #31
 8000ec6:	4249      	negs	r1, r1
 8000ec8:	1a8a      	subs	r2, r1, r2
 8000eca:	4641      	mov	r1, r8
 8000ecc:	40d1      	lsrs	r1, r2
 8000ece:	000a      	movs	r2, r1
 8000ed0:	2b20      	cmp	r3, #32
 8000ed2:	d004      	beq.n	8000ede <__aeabi_ddiv+0x3e6>
 8000ed4:	4641      	mov	r1, r8
 8000ed6:	4b80      	ldr	r3, [pc, #512]	; (80010d8 <__aeabi_ddiv+0x5e0>)
 8000ed8:	445b      	add	r3, fp
 8000eda:	4099      	lsls	r1, r3
 8000edc:	430d      	orrs	r5, r1
 8000ede:	1e6b      	subs	r3, r5, #1
 8000ee0:	419d      	sbcs	r5, r3
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	432a      	orrs	r2, r5
 8000ee6:	001d      	movs	r5, r3
 8000ee8:	2400      	movs	r4, #0
 8000eea:	4015      	ands	r5, r2
 8000eec:	4213      	tst	r3, r2
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_ddiv+0x3fa>
 8000ef0:	e0d4      	b.n	800109c <__aeabi_ddiv+0x5a4>
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4011      	ands	r1, r2
 8000ef8:	2904      	cmp	r1, #4
 8000efa:	d100      	bne.n	8000efe <__aeabi_ddiv+0x406>
 8000efc:	e0cb      	b.n	8001096 <__aeabi_ddiv+0x59e>
 8000efe:	1d11      	adds	r1, r2, #4
 8000f00:	4291      	cmp	r1, r2
 8000f02:	4192      	sbcs	r2, r2
 8000f04:	4252      	negs	r2, r2
 8000f06:	189b      	adds	r3, r3, r2
 8000f08:	000a      	movs	r2, r1
 8000f0a:	0219      	lsls	r1, r3, #8
 8000f0c:	d400      	bmi.n	8000f10 <__aeabi_ddiv+0x418>
 8000f0e:	e0c2      	b.n	8001096 <__aeabi_ddiv+0x59e>
 8000f10:	2301      	movs	r3, #1
 8000f12:	2400      	movs	r4, #0
 8000f14:	2500      	movs	r5, #0
 8000f16:	e646      	b.n	8000ba6 <__aeabi_ddiv+0xae>
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	4641      	mov	r1, r8
 8000f1c:	031b      	lsls	r3, r3, #12
 8000f1e:	4219      	tst	r1, r3
 8000f20:	d008      	beq.n	8000f34 <__aeabi_ddiv+0x43c>
 8000f22:	421c      	tst	r4, r3
 8000f24:	d106      	bne.n	8000f34 <__aeabi_ddiv+0x43c>
 8000f26:	431c      	orrs	r4, r3
 8000f28:	0324      	lsls	r4, r4, #12
 8000f2a:	46ba      	mov	sl, r7
 8000f2c:	0015      	movs	r5, r2
 8000f2e:	4b69      	ldr	r3, [pc, #420]	; (80010d4 <__aeabi_ddiv+0x5dc>)
 8000f30:	0b24      	lsrs	r4, r4, #12
 8000f32:	e638      	b.n	8000ba6 <__aeabi_ddiv+0xae>
 8000f34:	2480      	movs	r4, #128	; 0x80
 8000f36:	4643      	mov	r3, r8
 8000f38:	0324      	lsls	r4, r4, #12
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	0324      	lsls	r4, r4, #12
 8000f3e:	46b2      	mov	sl, r6
 8000f40:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <__aeabi_ddiv+0x5dc>)
 8000f42:	0b24      	lsrs	r4, r4, #12
 8000f44:	e62f      	b.n	8000ba6 <__aeabi_ddiv+0xae>
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x454>
 8000f4a:	e703      	b.n	8000d54 <__aeabi_ddiv+0x25c>
 8000f4c:	19a6      	adds	r6, r4, r6
 8000f4e:	1e68      	subs	r0, r5, #1
 8000f50:	42a6      	cmp	r6, r4
 8000f52:	d200      	bcs.n	8000f56 <__aeabi_ddiv+0x45e>
 8000f54:	e08d      	b.n	8001072 <__aeabi_ddiv+0x57a>
 8000f56:	428e      	cmp	r6, r1
 8000f58:	d200      	bcs.n	8000f5c <__aeabi_ddiv+0x464>
 8000f5a:	e0a3      	b.n	80010a4 <__aeabi_ddiv+0x5ac>
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_ddiv+0x468>
 8000f5e:	e0b3      	b.n	80010c8 <__aeabi_ddiv+0x5d0>
 8000f60:	0005      	movs	r5, r0
 8000f62:	e6f5      	b.n	8000d50 <__aeabi_ddiv+0x258>
 8000f64:	42aa      	cmp	r2, r5
 8000f66:	d900      	bls.n	8000f6a <__aeabi_ddiv+0x472>
 8000f68:	e639      	b.n	8000bde <__aeabi_ddiv+0xe6>
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	07de      	lsls	r6, r3, #31
 8000f6e:	0858      	lsrs	r0, r3, #1
 8000f70:	086b      	lsrs	r3, r5, #1
 8000f72:	431e      	orrs	r6, r3
 8000f74:	07ed      	lsls	r5, r5, #31
 8000f76:	e639      	b.n	8000bec <__aeabi_ddiv+0xf4>
 8000f78:	4648      	mov	r0, r9
 8000f7a:	f001 f911 	bl	80021a0 <__clzsi2>
 8000f7e:	0001      	movs	r1, r0
 8000f80:	0002      	movs	r2, r0
 8000f82:	3115      	adds	r1, #21
 8000f84:	3220      	adds	r2, #32
 8000f86:	291c      	cmp	r1, #28
 8000f88:	dc00      	bgt.n	8000f8c <__aeabi_ddiv+0x494>
 8000f8a:	e72c      	b.n	8000de6 <__aeabi_ddiv+0x2ee>
 8000f8c:	464b      	mov	r3, r9
 8000f8e:	3808      	subs	r0, #8
 8000f90:	4083      	lsls	r3, r0
 8000f92:	2500      	movs	r5, #0
 8000f94:	4698      	mov	r8, r3
 8000f96:	e732      	b.n	8000dfe <__aeabi_ddiv+0x306>
 8000f98:	f001 f902 	bl	80021a0 <__clzsi2>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	3215      	adds	r2, #21
 8000fa2:	3020      	adds	r0, #32
 8000fa4:	2a1c      	cmp	r2, #28
 8000fa6:	dc00      	bgt.n	8000faa <__aeabi_ddiv+0x4b2>
 8000fa8:	e700      	b.n	8000dac <__aeabi_ddiv+0x2b4>
 8000faa:	4654      	mov	r4, sl
 8000fac:	3b08      	subs	r3, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	409c      	lsls	r4, r3
 8000fb2:	e705      	b.n	8000dc0 <__aeabi_ddiv+0x2c8>
 8000fb4:	1936      	adds	r6, r6, r4
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	42b4      	cmp	r4, r6
 8000fba:	d900      	bls.n	8000fbe <__aeabi_ddiv+0x4c6>
 8000fbc:	e6a6      	b.n	8000d0c <__aeabi_ddiv+0x214>
 8000fbe:	42b2      	cmp	r2, r6
 8000fc0:	d800      	bhi.n	8000fc4 <__aeabi_ddiv+0x4cc>
 8000fc2:	e6a3      	b.n	8000d0c <__aeabi_ddiv+0x214>
 8000fc4:	1e83      	subs	r3, r0, #2
 8000fc6:	1936      	adds	r6, r6, r4
 8000fc8:	e6a0      	b.n	8000d0c <__aeabi_ddiv+0x214>
 8000fca:	1909      	adds	r1, r1, r4
 8000fcc:	3d01      	subs	r5, #1
 8000fce:	428c      	cmp	r4, r1
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x4dc>
 8000fd2:	e68d      	b.n	8000cf0 <__aeabi_ddiv+0x1f8>
 8000fd4:	428a      	cmp	r2, r1
 8000fd6:	d800      	bhi.n	8000fda <__aeabi_ddiv+0x4e2>
 8000fd8:	e68a      	b.n	8000cf0 <__aeabi_ddiv+0x1f8>
 8000fda:	1e85      	subs	r5, r0, #2
 8000fdc:	1909      	adds	r1, r1, r4
 8000fde:	e687      	b.n	8000cf0 <__aeabi_ddiv+0x1f8>
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	402b      	ands	r3, r5
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d100      	bne.n	8000fea <__aeabi_ddiv+0x4f2>
 8000fe8:	e6bc      	b.n	8000d64 <__aeabi_ddiv+0x26c>
 8000fea:	2305      	movs	r3, #5
 8000fec:	425b      	negs	r3, r3
 8000fee:	42ab      	cmp	r3, r5
 8000ff0:	419b      	sbcs	r3, r3
 8000ff2:	3504      	adds	r5, #4
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	08ed      	lsrs	r5, r5, #3
 8000ff8:	4498      	add	r8, r3
 8000ffa:	e6b4      	b.n	8000d66 <__aeabi_ddiv+0x26e>
 8000ffc:	42af      	cmp	r7, r5
 8000ffe:	d900      	bls.n	8001002 <__aeabi_ddiv+0x50a>
 8001000:	e660      	b.n	8000cc4 <__aeabi_ddiv+0x1cc>
 8001002:	4282      	cmp	r2, r0
 8001004:	d804      	bhi.n	8001010 <__aeabi_ddiv+0x518>
 8001006:	d000      	beq.n	800100a <__aeabi_ddiv+0x512>
 8001008:	e65c      	b.n	8000cc4 <__aeabi_ddiv+0x1cc>
 800100a:	42ae      	cmp	r6, r5
 800100c:	d800      	bhi.n	8001010 <__aeabi_ddiv+0x518>
 800100e:	e659      	b.n	8000cc4 <__aeabi_ddiv+0x1cc>
 8001010:	2302      	movs	r3, #2
 8001012:	425b      	negs	r3, r3
 8001014:	469c      	mov	ip, r3
 8001016:	9b00      	ldr	r3, [sp, #0]
 8001018:	44e0      	add	r8, ip
 800101a:	469c      	mov	ip, r3
 800101c:	4465      	add	r5, ip
 800101e:	429d      	cmp	r5, r3
 8001020:	419b      	sbcs	r3, r3
 8001022:	425b      	negs	r3, r3
 8001024:	191b      	adds	r3, r3, r4
 8001026:	18c0      	adds	r0, r0, r3
 8001028:	e64d      	b.n	8000cc6 <__aeabi_ddiv+0x1ce>
 800102a:	428a      	cmp	r2, r1
 800102c:	d800      	bhi.n	8001030 <__aeabi_ddiv+0x538>
 800102e:	e60e      	b.n	8000c4e <__aeabi_ddiv+0x156>
 8001030:	1e83      	subs	r3, r0, #2
 8001032:	1909      	adds	r1, r1, r4
 8001034:	e60b      	b.n	8000c4e <__aeabi_ddiv+0x156>
 8001036:	428a      	cmp	r2, r1
 8001038:	d800      	bhi.n	800103c <__aeabi_ddiv+0x544>
 800103a:	e5f4      	b.n	8000c26 <__aeabi_ddiv+0x12e>
 800103c:	1e83      	subs	r3, r0, #2
 800103e:	4698      	mov	r8, r3
 8001040:	1909      	adds	r1, r1, r4
 8001042:	e5f0      	b.n	8000c26 <__aeabi_ddiv+0x12e>
 8001044:	4925      	ldr	r1, [pc, #148]	; (80010dc <__aeabi_ddiv+0x5e4>)
 8001046:	0028      	movs	r0, r5
 8001048:	4459      	add	r1, fp
 800104a:	408d      	lsls	r5, r1
 800104c:	4642      	mov	r2, r8
 800104e:	408a      	lsls	r2, r1
 8001050:	1e69      	subs	r1, r5, #1
 8001052:	418d      	sbcs	r5, r1
 8001054:	4641      	mov	r1, r8
 8001056:	40d8      	lsrs	r0, r3
 8001058:	40d9      	lsrs	r1, r3
 800105a:	4302      	orrs	r2, r0
 800105c:	432a      	orrs	r2, r5
 800105e:	000b      	movs	r3, r1
 8001060:	0751      	lsls	r1, r2, #29
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0x56e>
 8001064:	e751      	b.n	8000f0a <__aeabi_ddiv+0x412>
 8001066:	210f      	movs	r1, #15
 8001068:	4011      	ands	r1, r2
 800106a:	2904      	cmp	r1, #4
 800106c:	d000      	beq.n	8001070 <__aeabi_ddiv+0x578>
 800106e:	e746      	b.n	8000efe <__aeabi_ddiv+0x406>
 8001070:	e74b      	b.n	8000f0a <__aeabi_ddiv+0x412>
 8001072:	0005      	movs	r5, r0
 8001074:	428e      	cmp	r6, r1
 8001076:	d000      	beq.n	800107a <__aeabi_ddiv+0x582>
 8001078:	e66a      	b.n	8000d50 <__aeabi_ddiv+0x258>
 800107a:	9a00      	ldr	r2, [sp, #0]
 800107c:	4293      	cmp	r3, r2
 800107e:	d000      	beq.n	8001082 <__aeabi_ddiv+0x58a>
 8001080:	e666      	b.n	8000d50 <__aeabi_ddiv+0x258>
 8001082:	e667      	b.n	8000d54 <__aeabi_ddiv+0x25c>
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <__aeabi_ddiv+0x5e8>)
 8001086:	445a      	add	r2, fp
 8001088:	2a00      	cmp	r2, #0
 800108a:	dc00      	bgt.n	800108e <__aeabi_ddiv+0x596>
 800108c:	e710      	b.n	8000eb0 <__aeabi_ddiv+0x3b8>
 800108e:	2301      	movs	r3, #1
 8001090:	2500      	movs	r5, #0
 8001092:	4498      	add	r8, r3
 8001094:	e667      	b.n	8000d66 <__aeabi_ddiv+0x26e>
 8001096:	075d      	lsls	r5, r3, #29
 8001098:	025b      	lsls	r3, r3, #9
 800109a:	0b1c      	lsrs	r4, r3, #12
 800109c:	08d2      	lsrs	r2, r2, #3
 800109e:	2300      	movs	r3, #0
 80010a0:	4315      	orrs	r5, r2
 80010a2:	e580      	b.n	8000ba6 <__aeabi_ddiv+0xae>
 80010a4:	9800      	ldr	r0, [sp, #0]
 80010a6:	3d02      	subs	r5, #2
 80010a8:	0042      	lsls	r2, r0, #1
 80010aa:	4282      	cmp	r2, r0
 80010ac:	41bf      	sbcs	r7, r7
 80010ae:	427f      	negs	r7, r7
 80010b0:	193c      	adds	r4, r7, r4
 80010b2:	1936      	adds	r6, r6, r4
 80010b4:	9200      	str	r2, [sp, #0]
 80010b6:	e7dd      	b.n	8001074 <__aeabi_ddiv+0x57c>
 80010b8:	2480      	movs	r4, #128	; 0x80
 80010ba:	4643      	mov	r3, r8
 80010bc:	0324      	lsls	r4, r4, #12
 80010be:	431c      	orrs	r4, r3
 80010c0:	0324      	lsls	r4, r4, #12
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__aeabi_ddiv+0x5dc>)
 80010c4:	0b24      	lsrs	r4, r4, #12
 80010c6:	e56e      	b.n	8000ba6 <__aeabi_ddiv+0xae>
 80010c8:	9a00      	ldr	r2, [sp, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3ea      	bcc.n	80010a4 <__aeabi_ddiv+0x5ac>
 80010ce:	0005      	movs	r5, r0
 80010d0:	e7d3      	b.n	800107a <__aeabi_ddiv+0x582>
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	000007ff 	.word	0x000007ff
 80010d8:	0000043e 	.word	0x0000043e
 80010dc:	0000041e 	.word	0x0000041e
 80010e0:	000003ff 	.word	0x000003ff

080010e4 <__eqdf2>:
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	464e      	mov	r6, r9
 80010e8:	4645      	mov	r5, r8
 80010ea:	46de      	mov	lr, fp
 80010ec:	4657      	mov	r7, sl
 80010ee:	4690      	mov	r8, r2
 80010f0:	b5e0      	push	{r5, r6, r7, lr}
 80010f2:	0017      	movs	r7, r2
 80010f4:	031a      	lsls	r2, r3, #12
 80010f6:	0b12      	lsrs	r2, r2, #12
 80010f8:	0005      	movs	r5, r0
 80010fa:	4684      	mov	ip, r0
 80010fc:	4819      	ldr	r0, [pc, #100]	; (8001164 <__eqdf2+0x80>)
 80010fe:	030e      	lsls	r6, r1, #12
 8001100:	004c      	lsls	r4, r1, #1
 8001102:	4691      	mov	r9, r2
 8001104:	005a      	lsls	r2, r3, #1
 8001106:	0fdb      	lsrs	r3, r3, #31
 8001108:	469b      	mov	fp, r3
 800110a:	0b36      	lsrs	r6, r6, #12
 800110c:	0d64      	lsrs	r4, r4, #21
 800110e:	0fc9      	lsrs	r1, r1, #31
 8001110:	0d52      	lsrs	r2, r2, #21
 8001112:	4284      	cmp	r4, r0
 8001114:	d019      	beq.n	800114a <__eqdf2+0x66>
 8001116:	4282      	cmp	r2, r0
 8001118:	d010      	beq.n	800113c <__eqdf2+0x58>
 800111a:	2001      	movs	r0, #1
 800111c:	4294      	cmp	r4, r2
 800111e:	d10e      	bne.n	800113e <__eqdf2+0x5a>
 8001120:	454e      	cmp	r6, r9
 8001122:	d10c      	bne.n	800113e <__eqdf2+0x5a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c4      	cmp	ip, r8
 8001128:	d109      	bne.n	800113e <__eqdf2+0x5a>
 800112a:	4559      	cmp	r1, fp
 800112c:	d017      	beq.n	800115e <__eqdf2+0x7a>
 800112e:	2c00      	cmp	r4, #0
 8001130:	d105      	bne.n	800113e <__eqdf2+0x5a>
 8001132:	0030      	movs	r0, r6
 8001134:	4328      	orrs	r0, r5
 8001136:	1e43      	subs	r3, r0, #1
 8001138:	4198      	sbcs	r0, r3
 800113a:	e000      	b.n	800113e <__eqdf2+0x5a>
 800113c:	2001      	movs	r0, #1
 800113e:	bcf0      	pop	{r4, r5, r6, r7}
 8001140:	46bb      	mov	fp, r7
 8001142:	46b2      	mov	sl, r6
 8001144:	46a9      	mov	r9, r5
 8001146:	46a0      	mov	r8, r4
 8001148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114a:	0033      	movs	r3, r6
 800114c:	2001      	movs	r0, #1
 800114e:	432b      	orrs	r3, r5
 8001150:	d1f5      	bne.n	800113e <__eqdf2+0x5a>
 8001152:	42a2      	cmp	r2, r4
 8001154:	d1f3      	bne.n	800113e <__eqdf2+0x5a>
 8001156:	464b      	mov	r3, r9
 8001158:	433b      	orrs	r3, r7
 800115a:	d1f0      	bne.n	800113e <__eqdf2+0x5a>
 800115c:	e7e2      	b.n	8001124 <__eqdf2+0x40>
 800115e:	2000      	movs	r0, #0
 8001160:	e7ed      	b.n	800113e <__eqdf2+0x5a>
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	000007ff 	.word	0x000007ff

08001168 <__gedf2>:
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	4647      	mov	r7, r8
 800116c:	46ce      	mov	lr, r9
 800116e:	0004      	movs	r4, r0
 8001170:	0018      	movs	r0, r3
 8001172:	0016      	movs	r6, r2
 8001174:	031b      	lsls	r3, r3, #12
 8001176:	0b1b      	lsrs	r3, r3, #12
 8001178:	4d2d      	ldr	r5, [pc, #180]	; (8001230 <__gedf2+0xc8>)
 800117a:	004a      	lsls	r2, r1, #1
 800117c:	4699      	mov	r9, r3
 800117e:	b580      	push	{r7, lr}
 8001180:	0043      	lsls	r3, r0, #1
 8001182:	030f      	lsls	r7, r1, #12
 8001184:	46a4      	mov	ip, r4
 8001186:	46b0      	mov	r8, r6
 8001188:	0b3f      	lsrs	r7, r7, #12
 800118a:	0d52      	lsrs	r2, r2, #21
 800118c:	0fc9      	lsrs	r1, r1, #31
 800118e:	0d5b      	lsrs	r3, r3, #21
 8001190:	0fc0      	lsrs	r0, r0, #31
 8001192:	42aa      	cmp	r2, r5
 8001194:	d021      	beq.n	80011da <__gedf2+0x72>
 8001196:	42ab      	cmp	r3, r5
 8001198:	d013      	beq.n	80011c2 <__gedf2+0x5a>
 800119a:	2a00      	cmp	r2, #0
 800119c:	d122      	bne.n	80011e4 <__gedf2+0x7c>
 800119e:	433c      	orrs	r4, r7
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <__gedf2+0x42>
 80011a4:	464d      	mov	r5, r9
 80011a6:	432e      	orrs	r6, r5
 80011a8:	d022      	beq.n	80011f0 <__gedf2+0x88>
 80011aa:	2c00      	cmp	r4, #0
 80011ac:	d010      	beq.n	80011d0 <__gedf2+0x68>
 80011ae:	4281      	cmp	r1, r0
 80011b0:	d022      	beq.n	80011f8 <__gedf2+0x90>
 80011b2:	2002      	movs	r0, #2
 80011b4:	3901      	subs	r1, #1
 80011b6:	4008      	ands	r0, r1
 80011b8:	3801      	subs	r0, #1
 80011ba:	bcc0      	pop	{r6, r7}
 80011bc:	46b9      	mov	r9, r7
 80011be:	46b0      	mov	r8, r6
 80011c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c2:	464d      	mov	r5, r9
 80011c4:	432e      	orrs	r6, r5
 80011c6:	d129      	bne.n	800121c <__gedf2+0xb4>
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	d1f0      	bne.n	80011ae <__gedf2+0x46>
 80011cc:	433c      	orrs	r4, r7
 80011ce:	d1ee      	bne.n	80011ae <__gedf2+0x46>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d1f2      	bne.n	80011ba <__gedf2+0x52>
 80011d4:	2001      	movs	r0, #1
 80011d6:	4240      	negs	r0, r0
 80011d8:	e7ef      	b.n	80011ba <__gedf2+0x52>
 80011da:	003d      	movs	r5, r7
 80011dc:	4325      	orrs	r5, r4
 80011de:	d11d      	bne.n	800121c <__gedf2+0xb4>
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d0ee      	beq.n	80011c2 <__gedf2+0x5a>
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e2      	bne.n	80011ae <__gedf2+0x46>
 80011e8:	464c      	mov	r4, r9
 80011ea:	4326      	orrs	r6, r4
 80011ec:	d1df      	bne.n	80011ae <__gedf2+0x46>
 80011ee:	e7e0      	b.n	80011b2 <__gedf2+0x4a>
 80011f0:	2000      	movs	r0, #0
 80011f2:	2c00      	cmp	r4, #0
 80011f4:	d0e1      	beq.n	80011ba <__gedf2+0x52>
 80011f6:	e7dc      	b.n	80011b2 <__gedf2+0x4a>
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dc0a      	bgt.n	8001212 <__gedf2+0xaa>
 80011fc:	dbe8      	blt.n	80011d0 <__gedf2+0x68>
 80011fe:	454f      	cmp	r7, r9
 8001200:	d8d7      	bhi.n	80011b2 <__gedf2+0x4a>
 8001202:	d00e      	beq.n	8001222 <__gedf2+0xba>
 8001204:	2000      	movs	r0, #0
 8001206:	454f      	cmp	r7, r9
 8001208:	d2d7      	bcs.n	80011ba <__gedf2+0x52>
 800120a:	2900      	cmp	r1, #0
 800120c:	d0e2      	beq.n	80011d4 <__gedf2+0x6c>
 800120e:	0008      	movs	r0, r1
 8001210:	e7d3      	b.n	80011ba <__gedf2+0x52>
 8001212:	4243      	negs	r3, r0
 8001214:	4158      	adcs	r0, r3
 8001216:	0040      	lsls	r0, r0, #1
 8001218:	3801      	subs	r0, #1
 800121a:	e7ce      	b.n	80011ba <__gedf2+0x52>
 800121c:	2002      	movs	r0, #2
 800121e:	4240      	negs	r0, r0
 8001220:	e7cb      	b.n	80011ba <__gedf2+0x52>
 8001222:	45c4      	cmp	ip, r8
 8001224:	d8c5      	bhi.n	80011b2 <__gedf2+0x4a>
 8001226:	2000      	movs	r0, #0
 8001228:	45c4      	cmp	ip, r8
 800122a:	d2c6      	bcs.n	80011ba <__gedf2+0x52>
 800122c:	e7ed      	b.n	800120a <__gedf2+0xa2>
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	000007ff 	.word	0x000007ff

08001234 <__ledf2>:
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	4647      	mov	r7, r8
 8001238:	46ce      	mov	lr, r9
 800123a:	0004      	movs	r4, r0
 800123c:	0018      	movs	r0, r3
 800123e:	0016      	movs	r6, r2
 8001240:	031b      	lsls	r3, r3, #12
 8001242:	0b1b      	lsrs	r3, r3, #12
 8001244:	4d2c      	ldr	r5, [pc, #176]	; (80012f8 <__ledf2+0xc4>)
 8001246:	004a      	lsls	r2, r1, #1
 8001248:	4699      	mov	r9, r3
 800124a:	b580      	push	{r7, lr}
 800124c:	0043      	lsls	r3, r0, #1
 800124e:	030f      	lsls	r7, r1, #12
 8001250:	46a4      	mov	ip, r4
 8001252:	46b0      	mov	r8, r6
 8001254:	0b3f      	lsrs	r7, r7, #12
 8001256:	0d52      	lsrs	r2, r2, #21
 8001258:	0fc9      	lsrs	r1, r1, #31
 800125a:	0d5b      	lsrs	r3, r3, #21
 800125c:	0fc0      	lsrs	r0, r0, #31
 800125e:	42aa      	cmp	r2, r5
 8001260:	d00d      	beq.n	800127e <__ledf2+0x4a>
 8001262:	42ab      	cmp	r3, r5
 8001264:	d010      	beq.n	8001288 <__ledf2+0x54>
 8001266:	2a00      	cmp	r2, #0
 8001268:	d127      	bne.n	80012ba <__ledf2+0x86>
 800126a:	433c      	orrs	r4, r7
 800126c:	2b00      	cmp	r3, #0
 800126e:	d111      	bne.n	8001294 <__ledf2+0x60>
 8001270:	464d      	mov	r5, r9
 8001272:	432e      	orrs	r6, r5
 8001274:	d10e      	bne.n	8001294 <__ledf2+0x60>
 8001276:	2000      	movs	r0, #0
 8001278:	2c00      	cmp	r4, #0
 800127a:	d015      	beq.n	80012a8 <__ledf2+0x74>
 800127c:	e00e      	b.n	800129c <__ledf2+0x68>
 800127e:	003d      	movs	r5, r7
 8001280:	4325      	orrs	r5, r4
 8001282:	d110      	bne.n	80012a6 <__ledf2+0x72>
 8001284:	4293      	cmp	r3, r2
 8001286:	d118      	bne.n	80012ba <__ledf2+0x86>
 8001288:	464d      	mov	r5, r9
 800128a:	432e      	orrs	r6, r5
 800128c:	d10b      	bne.n	80012a6 <__ledf2+0x72>
 800128e:	2a00      	cmp	r2, #0
 8001290:	d102      	bne.n	8001298 <__ledf2+0x64>
 8001292:	433c      	orrs	r4, r7
 8001294:	2c00      	cmp	r4, #0
 8001296:	d00b      	beq.n	80012b0 <__ledf2+0x7c>
 8001298:	4281      	cmp	r1, r0
 800129a:	d014      	beq.n	80012c6 <__ledf2+0x92>
 800129c:	2002      	movs	r0, #2
 800129e:	3901      	subs	r1, #1
 80012a0:	4008      	ands	r0, r1
 80012a2:	3801      	subs	r0, #1
 80012a4:	e000      	b.n	80012a8 <__ledf2+0x74>
 80012a6:	2002      	movs	r0, #2
 80012a8:	bcc0      	pop	{r6, r7}
 80012aa:	46b9      	mov	r9, r7
 80012ac:	46b0      	mov	r8, r6
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d1f9      	bne.n	80012a8 <__ledf2+0x74>
 80012b4:	2001      	movs	r0, #1
 80012b6:	4240      	negs	r0, r0
 80012b8:	e7f6      	b.n	80012a8 <__ledf2+0x74>
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1ec      	bne.n	8001298 <__ledf2+0x64>
 80012be:	464c      	mov	r4, r9
 80012c0:	4326      	orrs	r6, r4
 80012c2:	d1e9      	bne.n	8001298 <__ledf2+0x64>
 80012c4:	e7ea      	b.n	800129c <__ledf2+0x68>
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dd04      	ble.n	80012d4 <__ledf2+0xa0>
 80012ca:	4243      	negs	r3, r0
 80012cc:	4158      	adcs	r0, r3
 80012ce:	0040      	lsls	r0, r0, #1
 80012d0:	3801      	subs	r0, #1
 80012d2:	e7e9      	b.n	80012a8 <__ledf2+0x74>
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbeb      	blt.n	80012b0 <__ledf2+0x7c>
 80012d8:	454f      	cmp	r7, r9
 80012da:	d8df      	bhi.n	800129c <__ledf2+0x68>
 80012dc:	d006      	beq.n	80012ec <__ledf2+0xb8>
 80012de:	2000      	movs	r0, #0
 80012e0:	454f      	cmp	r7, r9
 80012e2:	d2e1      	bcs.n	80012a8 <__ledf2+0x74>
 80012e4:	2900      	cmp	r1, #0
 80012e6:	d0e5      	beq.n	80012b4 <__ledf2+0x80>
 80012e8:	0008      	movs	r0, r1
 80012ea:	e7dd      	b.n	80012a8 <__ledf2+0x74>
 80012ec:	45c4      	cmp	ip, r8
 80012ee:	d8d5      	bhi.n	800129c <__ledf2+0x68>
 80012f0:	2000      	movs	r0, #0
 80012f2:	45c4      	cmp	ip, r8
 80012f4:	d2d8      	bcs.n	80012a8 <__ledf2+0x74>
 80012f6:	e7f5      	b.n	80012e4 <__ledf2+0xb0>
 80012f8:	000007ff 	.word	0x000007ff

080012fc <__aeabi_dmul>:
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	4657      	mov	r7, sl
 8001300:	464e      	mov	r6, r9
 8001302:	4645      	mov	r5, r8
 8001304:	46de      	mov	lr, fp
 8001306:	b5e0      	push	{r5, r6, r7, lr}
 8001308:	4698      	mov	r8, r3
 800130a:	030c      	lsls	r4, r1, #12
 800130c:	004b      	lsls	r3, r1, #1
 800130e:	0006      	movs	r6, r0
 8001310:	4692      	mov	sl, r2
 8001312:	b087      	sub	sp, #28
 8001314:	0b24      	lsrs	r4, r4, #12
 8001316:	0d5b      	lsrs	r3, r3, #21
 8001318:	0fcf      	lsrs	r7, r1, #31
 800131a:	2b00      	cmp	r3, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_dmul+0x24>
 800131e:	e15c      	b.n	80015da <__aeabi_dmul+0x2de>
 8001320:	4ad9      	ldr	r2, [pc, #868]	; (8001688 <__aeabi_dmul+0x38c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d100      	bne.n	8001328 <__aeabi_dmul+0x2c>
 8001326:	e175      	b.n	8001614 <__aeabi_dmul+0x318>
 8001328:	0f42      	lsrs	r2, r0, #29
 800132a:	00e4      	lsls	r4, r4, #3
 800132c:	4314      	orrs	r4, r2
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	0412      	lsls	r2, r2, #16
 8001332:	4314      	orrs	r4, r2
 8001334:	4ad5      	ldr	r2, [pc, #852]	; (800168c <__aeabi_dmul+0x390>)
 8001336:	00c5      	lsls	r5, r0, #3
 8001338:	4694      	mov	ip, r2
 800133a:	4463      	add	r3, ip
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	4699      	mov	r9, r3
 8001342:	469b      	mov	fp, r3
 8001344:	4643      	mov	r3, r8
 8001346:	4642      	mov	r2, r8
 8001348:	031e      	lsls	r6, r3, #12
 800134a:	0fd2      	lsrs	r2, r2, #31
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4650      	mov	r0, sl
 8001350:	4690      	mov	r8, r2
 8001352:	0b36      	lsrs	r6, r6, #12
 8001354:	0d5b      	lsrs	r3, r3, #21
 8001356:	d100      	bne.n	800135a <__aeabi_dmul+0x5e>
 8001358:	e120      	b.n	800159c <__aeabi_dmul+0x2a0>
 800135a:	4acb      	ldr	r2, [pc, #812]	; (8001688 <__aeabi_dmul+0x38c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d100      	bne.n	8001362 <__aeabi_dmul+0x66>
 8001360:	e162      	b.n	8001628 <__aeabi_dmul+0x32c>
 8001362:	49ca      	ldr	r1, [pc, #808]	; (800168c <__aeabi_dmul+0x390>)
 8001364:	0f42      	lsrs	r2, r0, #29
 8001366:	468c      	mov	ip, r1
 8001368:	9900      	ldr	r1, [sp, #0]
 800136a:	4463      	add	r3, ip
 800136c:	00f6      	lsls	r6, r6, #3
 800136e:	468c      	mov	ip, r1
 8001370:	4316      	orrs	r6, r2
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	449c      	add	ip, r3
 8001376:	0412      	lsls	r2, r2, #16
 8001378:	4663      	mov	r3, ip
 800137a:	4316      	orrs	r6, r2
 800137c:	00c2      	lsls	r2, r0, #3
 800137e:	2000      	movs	r0, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	9900      	ldr	r1, [sp, #0]
 8001384:	4643      	mov	r3, r8
 8001386:	3101      	adds	r1, #1
 8001388:	468c      	mov	ip, r1
 800138a:	4649      	mov	r1, r9
 800138c:	407b      	eors	r3, r7
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	290f      	cmp	r1, #15
 8001392:	d826      	bhi.n	80013e2 <__aeabi_dmul+0xe6>
 8001394:	4bbe      	ldr	r3, [pc, #760]	; (8001690 <__aeabi_dmul+0x394>)
 8001396:	0089      	lsls	r1, r1, #2
 8001398:	5859      	ldr	r1, [r3, r1]
 800139a:	468f      	mov	pc, r1
 800139c:	4643      	mov	r3, r8
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	0034      	movs	r4, r6
 80013a2:	0015      	movs	r5, r2
 80013a4:	4683      	mov	fp, r0
 80013a6:	465b      	mov	r3, fp
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d016      	beq.n	80013da <__aeabi_dmul+0xde>
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dmul+0xb6>
 80013b0:	e203      	b.n	80017ba <__aeabi_dmul+0x4be>
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d000      	beq.n	80013b8 <__aeabi_dmul+0xbc>
 80013b6:	e0cd      	b.n	8001554 <__aeabi_dmul+0x258>
 80013b8:	2200      	movs	r2, #0
 80013ba:	2400      	movs	r4, #0
 80013bc:	2500      	movs	r5, #0
 80013be:	9b01      	ldr	r3, [sp, #4]
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	4322      	orrs	r2, r4
 80013c4:	07db      	lsls	r3, r3, #31
 80013c6:	431a      	orrs	r2, r3
 80013c8:	0028      	movs	r0, r5
 80013ca:	0011      	movs	r1, r2
 80013cc:	b007      	add	sp, #28
 80013ce:	bcf0      	pop	{r4, r5, r6, r7}
 80013d0:	46bb      	mov	fp, r7
 80013d2:	46b2      	mov	sl, r6
 80013d4:	46a9      	mov	r9, r5
 80013d6:	46a0      	mov	r8, r4
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013da:	2400      	movs	r4, #0
 80013dc:	2500      	movs	r5, #0
 80013de:	4aaa      	ldr	r2, [pc, #680]	; (8001688 <__aeabi_dmul+0x38c>)
 80013e0:	e7ed      	b.n	80013be <__aeabi_dmul+0xc2>
 80013e2:	0c28      	lsrs	r0, r5, #16
 80013e4:	042d      	lsls	r5, r5, #16
 80013e6:	0c2d      	lsrs	r5, r5, #16
 80013e8:	002b      	movs	r3, r5
 80013ea:	0c11      	lsrs	r1, r2, #16
 80013ec:	0412      	lsls	r2, r2, #16
 80013ee:	0c12      	lsrs	r2, r2, #16
 80013f0:	4353      	muls	r3, r2
 80013f2:	4698      	mov	r8, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	002f      	movs	r7, r5
 80013f8:	4343      	muls	r3, r0
 80013fa:	4699      	mov	r9, r3
 80013fc:	434f      	muls	r7, r1
 80013fe:	444f      	add	r7, r9
 8001400:	46bb      	mov	fp, r7
 8001402:	4647      	mov	r7, r8
 8001404:	000b      	movs	r3, r1
 8001406:	0c3f      	lsrs	r7, r7, #16
 8001408:	46ba      	mov	sl, r7
 800140a:	4343      	muls	r3, r0
 800140c:	44da      	add	sl, fp
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	45d1      	cmp	r9, sl
 8001412:	d904      	bls.n	800141e <__aeabi_dmul+0x122>
 8001414:	2780      	movs	r7, #128	; 0x80
 8001416:	027f      	lsls	r7, r7, #9
 8001418:	46b9      	mov	r9, r7
 800141a:	444b      	add	r3, r9
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	4653      	mov	r3, sl
 8001420:	0c1b      	lsrs	r3, r3, #16
 8001422:	469b      	mov	fp, r3
 8001424:	4653      	mov	r3, sl
 8001426:	041f      	lsls	r7, r3, #16
 8001428:	4643      	mov	r3, r8
 800142a:	041b      	lsls	r3, r3, #16
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	4698      	mov	r8, r3
 8001430:	003b      	movs	r3, r7
 8001432:	4443      	add	r3, r8
 8001434:	9304      	str	r3, [sp, #16]
 8001436:	0c33      	lsrs	r3, r6, #16
 8001438:	0436      	lsls	r6, r6, #16
 800143a:	0c36      	lsrs	r6, r6, #16
 800143c:	4698      	mov	r8, r3
 800143e:	0033      	movs	r3, r6
 8001440:	4343      	muls	r3, r0
 8001442:	4699      	mov	r9, r3
 8001444:	4643      	mov	r3, r8
 8001446:	4343      	muls	r3, r0
 8001448:	002f      	movs	r7, r5
 800144a:	469a      	mov	sl, r3
 800144c:	4643      	mov	r3, r8
 800144e:	4377      	muls	r7, r6
 8001450:	435d      	muls	r5, r3
 8001452:	0c38      	lsrs	r0, r7, #16
 8001454:	444d      	add	r5, r9
 8001456:	1945      	adds	r5, r0, r5
 8001458:	45a9      	cmp	r9, r5
 800145a:	d903      	bls.n	8001464 <__aeabi_dmul+0x168>
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	4699      	mov	r9, r3
 8001462:	44ca      	add	sl, r9
 8001464:	043f      	lsls	r7, r7, #16
 8001466:	0c28      	lsrs	r0, r5, #16
 8001468:	0c3f      	lsrs	r7, r7, #16
 800146a:	042d      	lsls	r5, r5, #16
 800146c:	19ed      	adds	r5, r5, r7
 800146e:	0c27      	lsrs	r7, r4, #16
 8001470:	0424      	lsls	r4, r4, #16
 8001472:	0c24      	lsrs	r4, r4, #16
 8001474:	0003      	movs	r3, r0
 8001476:	0020      	movs	r0, r4
 8001478:	4350      	muls	r0, r2
 800147a:	437a      	muls	r2, r7
 800147c:	4691      	mov	r9, r2
 800147e:	003a      	movs	r2, r7
 8001480:	4453      	add	r3, sl
 8001482:	9305      	str	r3, [sp, #20]
 8001484:	0c03      	lsrs	r3, r0, #16
 8001486:	469a      	mov	sl, r3
 8001488:	434a      	muls	r2, r1
 800148a:	4361      	muls	r1, r4
 800148c:	4449      	add	r1, r9
 800148e:	4451      	add	r1, sl
 8001490:	44ab      	add	fp, r5
 8001492:	4589      	cmp	r9, r1
 8001494:	d903      	bls.n	800149e <__aeabi_dmul+0x1a2>
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	4699      	mov	r9, r3
 800149c:	444a      	add	r2, r9
 800149e:	0400      	lsls	r0, r0, #16
 80014a0:	0c0b      	lsrs	r3, r1, #16
 80014a2:	0c00      	lsrs	r0, r0, #16
 80014a4:	0409      	lsls	r1, r1, #16
 80014a6:	1809      	adds	r1, r1, r0
 80014a8:	0020      	movs	r0, r4
 80014aa:	4699      	mov	r9, r3
 80014ac:	4643      	mov	r3, r8
 80014ae:	4370      	muls	r0, r6
 80014b0:	435c      	muls	r4, r3
 80014b2:	437e      	muls	r6, r7
 80014b4:	435f      	muls	r7, r3
 80014b6:	0c03      	lsrs	r3, r0, #16
 80014b8:	4698      	mov	r8, r3
 80014ba:	19a4      	adds	r4, r4, r6
 80014bc:	4444      	add	r4, r8
 80014be:	444a      	add	r2, r9
 80014c0:	9703      	str	r7, [sp, #12]
 80014c2:	42a6      	cmp	r6, r4
 80014c4:	d904      	bls.n	80014d0 <__aeabi_dmul+0x1d4>
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	025b      	lsls	r3, r3, #9
 80014ca:	4698      	mov	r8, r3
 80014cc:	4447      	add	r7, r8
 80014ce:	9703      	str	r7, [sp, #12]
 80014d0:	0423      	lsls	r3, r4, #16
 80014d2:	9e02      	ldr	r6, [sp, #8]
 80014d4:	469a      	mov	sl, r3
 80014d6:	9b05      	ldr	r3, [sp, #20]
 80014d8:	445e      	add	r6, fp
 80014da:	4698      	mov	r8, r3
 80014dc:	42ae      	cmp	r6, r5
 80014de:	41ad      	sbcs	r5, r5
 80014e0:	1876      	adds	r6, r6, r1
 80014e2:	428e      	cmp	r6, r1
 80014e4:	4189      	sbcs	r1, r1
 80014e6:	0400      	lsls	r0, r0, #16
 80014e8:	0c00      	lsrs	r0, r0, #16
 80014ea:	4450      	add	r0, sl
 80014ec:	4440      	add	r0, r8
 80014ee:	426d      	negs	r5, r5
 80014f0:	1947      	adds	r7, r0, r5
 80014f2:	46b8      	mov	r8, r7
 80014f4:	4693      	mov	fp, r2
 80014f6:	4249      	negs	r1, r1
 80014f8:	4689      	mov	r9, r1
 80014fa:	44c3      	add	fp, r8
 80014fc:	44d9      	add	r9, fp
 80014fe:	4298      	cmp	r0, r3
 8001500:	4180      	sbcs	r0, r0
 8001502:	45a8      	cmp	r8, r5
 8001504:	41ad      	sbcs	r5, r5
 8001506:	4593      	cmp	fp, r2
 8001508:	4192      	sbcs	r2, r2
 800150a:	4589      	cmp	r9, r1
 800150c:	4189      	sbcs	r1, r1
 800150e:	426d      	negs	r5, r5
 8001510:	4240      	negs	r0, r0
 8001512:	4328      	orrs	r0, r5
 8001514:	0c24      	lsrs	r4, r4, #16
 8001516:	4252      	negs	r2, r2
 8001518:	4249      	negs	r1, r1
 800151a:	430a      	orrs	r2, r1
 800151c:	9b03      	ldr	r3, [sp, #12]
 800151e:	1900      	adds	r0, r0, r4
 8001520:	1880      	adds	r0, r0, r2
 8001522:	18c7      	adds	r7, r0, r3
 8001524:	464b      	mov	r3, r9
 8001526:	0ddc      	lsrs	r4, r3, #23
 8001528:	9b04      	ldr	r3, [sp, #16]
 800152a:	0275      	lsls	r5, r6, #9
 800152c:	431d      	orrs	r5, r3
 800152e:	1e6a      	subs	r2, r5, #1
 8001530:	4195      	sbcs	r5, r2
 8001532:	464b      	mov	r3, r9
 8001534:	0df6      	lsrs	r6, r6, #23
 8001536:	027f      	lsls	r7, r7, #9
 8001538:	4335      	orrs	r5, r6
 800153a:	025a      	lsls	r2, r3, #9
 800153c:	433c      	orrs	r4, r7
 800153e:	4315      	orrs	r5, r2
 8001540:	01fb      	lsls	r3, r7, #7
 8001542:	d400      	bmi.n	8001546 <__aeabi_dmul+0x24a>
 8001544:	e11c      	b.n	8001780 <__aeabi_dmul+0x484>
 8001546:	2101      	movs	r1, #1
 8001548:	086a      	lsrs	r2, r5, #1
 800154a:	400d      	ands	r5, r1
 800154c:	4315      	orrs	r5, r2
 800154e:	07e2      	lsls	r2, r4, #31
 8001550:	4315      	orrs	r5, r2
 8001552:	0864      	lsrs	r4, r4, #1
 8001554:	494f      	ldr	r1, [pc, #316]	; (8001694 <__aeabi_dmul+0x398>)
 8001556:	4461      	add	r1, ip
 8001558:	2900      	cmp	r1, #0
 800155a:	dc00      	bgt.n	800155e <__aeabi_dmul+0x262>
 800155c:	e0b0      	b.n	80016c0 <__aeabi_dmul+0x3c4>
 800155e:	076b      	lsls	r3, r5, #29
 8001560:	d009      	beq.n	8001576 <__aeabi_dmul+0x27a>
 8001562:	220f      	movs	r2, #15
 8001564:	402a      	ands	r2, r5
 8001566:	2a04      	cmp	r2, #4
 8001568:	d005      	beq.n	8001576 <__aeabi_dmul+0x27a>
 800156a:	1d2a      	adds	r2, r5, #4
 800156c:	42aa      	cmp	r2, r5
 800156e:	41ad      	sbcs	r5, r5
 8001570:	426d      	negs	r5, r5
 8001572:	1964      	adds	r4, r4, r5
 8001574:	0015      	movs	r5, r2
 8001576:	01e3      	lsls	r3, r4, #7
 8001578:	d504      	bpl.n	8001584 <__aeabi_dmul+0x288>
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4a46      	ldr	r2, [pc, #280]	; (8001698 <__aeabi_dmul+0x39c>)
 800157e:	00c9      	lsls	r1, r1, #3
 8001580:	4014      	ands	r4, r2
 8001582:	4461      	add	r1, ip
 8001584:	4a45      	ldr	r2, [pc, #276]	; (800169c <__aeabi_dmul+0x3a0>)
 8001586:	4291      	cmp	r1, r2
 8001588:	dd00      	ble.n	800158c <__aeabi_dmul+0x290>
 800158a:	e726      	b.n	80013da <__aeabi_dmul+0xde>
 800158c:	0762      	lsls	r2, r4, #29
 800158e:	08ed      	lsrs	r5, r5, #3
 8001590:	0264      	lsls	r4, r4, #9
 8001592:	0549      	lsls	r1, r1, #21
 8001594:	4315      	orrs	r5, r2
 8001596:	0b24      	lsrs	r4, r4, #12
 8001598:	0d4a      	lsrs	r2, r1, #21
 800159a:	e710      	b.n	80013be <__aeabi_dmul+0xc2>
 800159c:	4652      	mov	r2, sl
 800159e:	4332      	orrs	r2, r6
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dmul+0x2a8>
 80015a2:	e07f      	b.n	80016a4 <__aeabi_dmul+0x3a8>
 80015a4:	2e00      	cmp	r6, #0
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0x2ae>
 80015a8:	e0dc      	b.n	8001764 <__aeabi_dmul+0x468>
 80015aa:	0030      	movs	r0, r6
 80015ac:	f000 fdf8 	bl	80021a0 <__clzsi2>
 80015b0:	0002      	movs	r2, r0
 80015b2:	3a0b      	subs	r2, #11
 80015b4:	231d      	movs	r3, #29
 80015b6:	0001      	movs	r1, r0
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	4652      	mov	r2, sl
 80015bc:	3908      	subs	r1, #8
 80015be:	40da      	lsrs	r2, r3
 80015c0:	408e      	lsls	r6, r1
 80015c2:	4316      	orrs	r6, r2
 80015c4:	4652      	mov	r2, sl
 80015c6:	408a      	lsls	r2, r1
 80015c8:	9b00      	ldr	r3, [sp, #0]
 80015ca:	4935      	ldr	r1, [pc, #212]	; (80016a0 <__aeabi_dmul+0x3a4>)
 80015cc:	1a18      	subs	r0, r3, r0
 80015ce:	0003      	movs	r3, r0
 80015d0:	468c      	mov	ip, r1
 80015d2:	4463      	add	r3, ip
 80015d4:	2000      	movs	r0, #0
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	e6d3      	b.n	8001382 <__aeabi_dmul+0x86>
 80015da:	0025      	movs	r5, r4
 80015dc:	4305      	orrs	r5, r0
 80015de:	d04a      	beq.n	8001676 <__aeabi_dmul+0x37a>
 80015e0:	2c00      	cmp	r4, #0
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0x2ea>
 80015e4:	e0b0      	b.n	8001748 <__aeabi_dmul+0x44c>
 80015e6:	0020      	movs	r0, r4
 80015e8:	f000 fdda 	bl	80021a0 <__clzsi2>
 80015ec:	0001      	movs	r1, r0
 80015ee:	0002      	movs	r2, r0
 80015f0:	390b      	subs	r1, #11
 80015f2:	231d      	movs	r3, #29
 80015f4:	0010      	movs	r0, r2
 80015f6:	1a5b      	subs	r3, r3, r1
 80015f8:	0031      	movs	r1, r6
 80015fa:	0035      	movs	r5, r6
 80015fc:	3808      	subs	r0, #8
 80015fe:	4084      	lsls	r4, r0
 8001600:	40d9      	lsrs	r1, r3
 8001602:	4085      	lsls	r5, r0
 8001604:	430c      	orrs	r4, r1
 8001606:	4826      	ldr	r0, [pc, #152]	; (80016a0 <__aeabi_dmul+0x3a4>)
 8001608:	1a83      	subs	r3, r0, r2
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	4699      	mov	r9, r3
 8001610:	469b      	mov	fp, r3
 8001612:	e697      	b.n	8001344 <__aeabi_dmul+0x48>
 8001614:	0005      	movs	r5, r0
 8001616:	4325      	orrs	r5, r4
 8001618:	d126      	bne.n	8001668 <__aeabi_dmul+0x36c>
 800161a:	2208      	movs	r2, #8
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2302      	movs	r3, #2
 8001620:	2400      	movs	r4, #0
 8001622:	4691      	mov	r9, r2
 8001624:	469b      	mov	fp, r3
 8001626:	e68d      	b.n	8001344 <__aeabi_dmul+0x48>
 8001628:	4652      	mov	r2, sl
 800162a:	9b00      	ldr	r3, [sp, #0]
 800162c:	4332      	orrs	r2, r6
 800162e:	d110      	bne.n	8001652 <__aeabi_dmul+0x356>
 8001630:	4915      	ldr	r1, [pc, #84]	; (8001688 <__aeabi_dmul+0x38c>)
 8001632:	2600      	movs	r6, #0
 8001634:	468c      	mov	ip, r1
 8001636:	4463      	add	r3, ip
 8001638:	4649      	mov	r1, r9
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2302      	movs	r3, #2
 800163e:	4319      	orrs	r1, r3
 8001640:	4689      	mov	r9, r1
 8001642:	2002      	movs	r0, #2
 8001644:	e69d      	b.n	8001382 <__aeabi_dmul+0x86>
 8001646:	465b      	mov	r3, fp
 8001648:	9701      	str	r7, [sp, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d000      	beq.n	8001650 <__aeabi_dmul+0x354>
 800164e:	e6ad      	b.n	80013ac <__aeabi_dmul+0xb0>
 8001650:	e6c3      	b.n	80013da <__aeabi_dmul+0xde>
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <__aeabi_dmul+0x38c>)
 8001654:	2003      	movs	r0, #3
 8001656:	4694      	mov	ip, r2
 8001658:	4463      	add	r3, ip
 800165a:	464a      	mov	r2, r9
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2303      	movs	r3, #3
 8001660:	431a      	orrs	r2, r3
 8001662:	4691      	mov	r9, r2
 8001664:	4652      	mov	r2, sl
 8001666:	e68c      	b.n	8001382 <__aeabi_dmul+0x86>
 8001668:	220c      	movs	r2, #12
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2303      	movs	r3, #3
 800166e:	0005      	movs	r5, r0
 8001670:	4691      	mov	r9, r2
 8001672:	469b      	mov	fp, r3
 8001674:	e666      	b.n	8001344 <__aeabi_dmul+0x48>
 8001676:	2304      	movs	r3, #4
 8001678:	4699      	mov	r9, r3
 800167a:	2300      	movs	r3, #0
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	2400      	movs	r4, #0
 8001682:	469b      	mov	fp, r3
 8001684:	e65e      	b.n	8001344 <__aeabi_dmul+0x48>
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	000007ff 	.word	0x000007ff
 800168c:	fffffc01 	.word	0xfffffc01
 8001690:	080079dc 	.word	0x080079dc
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	fffffc0d 	.word	0xfffffc0d
 80016a4:	4649      	mov	r1, r9
 80016a6:	2301      	movs	r3, #1
 80016a8:	4319      	orrs	r1, r3
 80016aa:	4689      	mov	r9, r1
 80016ac:	2600      	movs	r6, #0
 80016ae:	2001      	movs	r0, #1
 80016b0:	e667      	b.n	8001382 <__aeabi_dmul+0x86>
 80016b2:	2300      	movs	r3, #0
 80016b4:	2480      	movs	r4, #128	; 0x80
 80016b6:	2500      	movs	r5, #0
 80016b8:	4a43      	ldr	r2, [pc, #268]	; (80017c8 <__aeabi_dmul+0x4cc>)
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	0324      	lsls	r4, r4, #12
 80016be:	e67e      	b.n	80013be <__aeabi_dmul+0xc2>
 80016c0:	2001      	movs	r0, #1
 80016c2:	1a40      	subs	r0, r0, r1
 80016c4:	2838      	cmp	r0, #56	; 0x38
 80016c6:	dd00      	ble.n	80016ca <__aeabi_dmul+0x3ce>
 80016c8:	e676      	b.n	80013b8 <__aeabi_dmul+0xbc>
 80016ca:	281f      	cmp	r0, #31
 80016cc:	dd5b      	ble.n	8001786 <__aeabi_dmul+0x48a>
 80016ce:	221f      	movs	r2, #31
 80016d0:	0023      	movs	r3, r4
 80016d2:	4252      	negs	r2, r2
 80016d4:	1a51      	subs	r1, r2, r1
 80016d6:	40cb      	lsrs	r3, r1
 80016d8:	0019      	movs	r1, r3
 80016da:	2820      	cmp	r0, #32
 80016dc:	d003      	beq.n	80016e6 <__aeabi_dmul+0x3ea>
 80016de:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <__aeabi_dmul+0x4d0>)
 80016e0:	4462      	add	r2, ip
 80016e2:	4094      	lsls	r4, r2
 80016e4:	4325      	orrs	r5, r4
 80016e6:	1e6a      	subs	r2, r5, #1
 80016e8:	4195      	sbcs	r5, r2
 80016ea:	002a      	movs	r2, r5
 80016ec:	430a      	orrs	r2, r1
 80016ee:	2107      	movs	r1, #7
 80016f0:	000d      	movs	r5, r1
 80016f2:	2400      	movs	r4, #0
 80016f4:	4015      	ands	r5, r2
 80016f6:	4211      	tst	r1, r2
 80016f8:	d05b      	beq.n	80017b2 <__aeabi_dmul+0x4b6>
 80016fa:	210f      	movs	r1, #15
 80016fc:	2400      	movs	r4, #0
 80016fe:	4011      	ands	r1, r2
 8001700:	2904      	cmp	r1, #4
 8001702:	d053      	beq.n	80017ac <__aeabi_dmul+0x4b0>
 8001704:	1d11      	adds	r1, r2, #4
 8001706:	4291      	cmp	r1, r2
 8001708:	4192      	sbcs	r2, r2
 800170a:	4252      	negs	r2, r2
 800170c:	18a4      	adds	r4, r4, r2
 800170e:	000a      	movs	r2, r1
 8001710:	0223      	lsls	r3, r4, #8
 8001712:	d54b      	bpl.n	80017ac <__aeabi_dmul+0x4b0>
 8001714:	2201      	movs	r2, #1
 8001716:	2400      	movs	r4, #0
 8001718:	2500      	movs	r5, #0
 800171a:	e650      	b.n	80013be <__aeabi_dmul+0xc2>
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	031b      	lsls	r3, r3, #12
 8001720:	421c      	tst	r4, r3
 8001722:	d009      	beq.n	8001738 <__aeabi_dmul+0x43c>
 8001724:	421e      	tst	r6, r3
 8001726:	d107      	bne.n	8001738 <__aeabi_dmul+0x43c>
 8001728:	4333      	orrs	r3, r6
 800172a:	031c      	lsls	r4, r3, #12
 800172c:	4643      	mov	r3, r8
 800172e:	0015      	movs	r5, r2
 8001730:	0b24      	lsrs	r4, r4, #12
 8001732:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <__aeabi_dmul+0x4cc>)
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	e642      	b.n	80013be <__aeabi_dmul+0xc2>
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	0312      	lsls	r2, r2, #12
 800173c:	4314      	orrs	r4, r2
 800173e:	0324      	lsls	r4, r4, #12
 8001740:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <__aeabi_dmul+0x4cc>)
 8001742:	0b24      	lsrs	r4, r4, #12
 8001744:	9701      	str	r7, [sp, #4]
 8001746:	e63a      	b.n	80013be <__aeabi_dmul+0xc2>
 8001748:	f000 fd2a 	bl	80021a0 <__clzsi2>
 800174c:	0001      	movs	r1, r0
 800174e:	0002      	movs	r2, r0
 8001750:	3115      	adds	r1, #21
 8001752:	3220      	adds	r2, #32
 8001754:	291c      	cmp	r1, #28
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x45e>
 8001758:	e74b      	b.n	80015f2 <__aeabi_dmul+0x2f6>
 800175a:	0034      	movs	r4, r6
 800175c:	3808      	subs	r0, #8
 800175e:	2500      	movs	r5, #0
 8001760:	4084      	lsls	r4, r0
 8001762:	e750      	b.n	8001606 <__aeabi_dmul+0x30a>
 8001764:	f000 fd1c 	bl	80021a0 <__clzsi2>
 8001768:	0003      	movs	r3, r0
 800176a:	001a      	movs	r2, r3
 800176c:	3215      	adds	r2, #21
 800176e:	3020      	adds	r0, #32
 8001770:	2a1c      	cmp	r2, #28
 8001772:	dc00      	bgt.n	8001776 <__aeabi_dmul+0x47a>
 8001774:	e71e      	b.n	80015b4 <__aeabi_dmul+0x2b8>
 8001776:	4656      	mov	r6, sl
 8001778:	3b08      	subs	r3, #8
 800177a:	2200      	movs	r2, #0
 800177c:	409e      	lsls	r6, r3
 800177e:	e723      	b.n	80015c8 <__aeabi_dmul+0x2cc>
 8001780:	9b00      	ldr	r3, [sp, #0]
 8001782:	469c      	mov	ip, r3
 8001784:	e6e6      	b.n	8001554 <__aeabi_dmul+0x258>
 8001786:	4912      	ldr	r1, [pc, #72]	; (80017d0 <__aeabi_dmul+0x4d4>)
 8001788:	0022      	movs	r2, r4
 800178a:	4461      	add	r1, ip
 800178c:	002e      	movs	r6, r5
 800178e:	408d      	lsls	r5, r1
 8001790:	408a      	lsls	r2, r1
 8001792:	40c6      	lsrs	r6, r0
 8001794:	1e69      	subs	r1, r5, #1
 8001796:	418d      	sbcs	r5, r1
 8001798:	4332      	orrs	r2, r6
 800179a:	432a      	orrs	r2, r5
 800179c:	40c4      	lsrs	r4, r0
 800179e:	0753      	lsls	r3, r2, #29
 80017a0:	d0b6      	beq.n	8001710 <__aeabi_dmul+0x414>
 80017a2:	210f      	movs	r1, #15
 80017a4:	4011      	ands	r1, r2
 80017a6:	2904      	cmp	r1, #4
 80017a8:	d1ac      	bne.n	8001704 <__aeabi_dmul+0x408>
 80017aa:	e7b1      	b.n	8001710 <__aeabi_dmul+0x414>
 80017ac:	0765      	lsls	r5, r4, #29
 80017ae:	0264      	lsls	r4, r4, #9
 80017b0:	0b24      	lsrs	r4, r4, #12
 80017b2:	08d2      	lsrs	r2, r2, #3
 80017b4:	4315      	orrs	r5, r2
 80017b6:	2200      	movs	r2, #0
 80017b8:	e601      	b.n	80013be <__aeabi_dmul+0xc2>
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	0312      	lsls	r2, r2, #12
 80017be:	4314      	orrs	r4, r2
 80017c0:	0324      	lsls	r4, r4, #12
 80017c2:	4a01      	ldr	r2, [pc, #4]	; (80017c8 <__aeabi_dmul+0x4cc>)
 80017c4:	0b24      	lsrs	r4, r4, #12
 80017c6:	e5fa      	b.n	80013be <__aeabi_dmul+0xc2>
 80017c8:	000007ff 	.word	0x000007ff
 80017cc:	0000043e 	.word	0x0000043e
 80017d0:	0000041e 	.word	0x0000041e

080017d4 <__aeabi_dsub>:
 80017d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d6:	4657      	mov	r7, sl
 80017d8:	464e      	mov	r6, r9
 80017da:	4645      	mov	r5, r8
 80017dc:	46de      	mov	lr, fp
 80017de:	b5e0      	push	{r5, r6, r7, lr}
 80017e0:	001e      	movs	r6, r3
 80017e2:	0017      	movs	r7, r2
 80017e4:	004a      	lsls	r2, r1, #1
 80017e6:	030b      	lsls	r3, r1, #12
 80017e8:	0d52      	lsrs	r2, r2, #21
 80017ea:	0a5b      	lsrs	r3, r3, #9
 80017ec:	4690      	mov	r8, r2
 80017ee:	0f42      	lsrs	r2, r0, #29
 80017f0:	431a      	orrs	r2, r3
 80017f2:	0fcd      	lsrs	r5, r1, #31
 80017f4:	4ccd      	ldr	r4, [pc, #820]	; (8001b2c <__aeabi_dsub+0x358>)
 80017f6:	0331      	lsls	r1, r6, #12
 80017f8:	00c3      	lsls	r3, r0, #3
 80017fa:	4694      	mov	ip, r2
 80017fc:	0070      	lsls	r0, r6, #1
 80017fe:	0f7a      	lsrs	r2, r7, #29
 8001800:	0a49      	lsrs	r1, r1, #9
 8001802:	00ff      	lsls	r7, r7, #3
 8001804:	469a      	mov	sl, r3
 8001806:	46b9      	mov	r9, r7
 8001808:	0d40      	lsrs	r0, r0, #21
 800180a:	0ff6      	lsrs	r6, r6, #31
 800180c:	4311      	orrs	r1, r2
 800180e:	42a0      	cmp	r0, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x40>
 8001812:	e0b1      	b.n	8001978 <__aeabi_dsub+0x1a4>
 8001814:	2201      	movs	r2, #1
 8001816:	4056      	eors	r6, r2
 8001818:	46b3      	mov	fp, r6
 800181a:	42b5      	cmp	r5, r6
 800181c:	d100      	bne.n	8001820 <__aeabi_dsub+0x4c>
 800181e:	e088      	b.n	8001932 <__aeabi_dsub+0x15e>
 8001820:	4642      	mov	r2, r8
 8001822:	1a12      	subs	r2, r2, r0
 8001824:	2a00      	cmp	r2, #0
 8001826:	dc00      	bgt.n	800182a <__aeabi_dsub+0x56>
 8001828:	e0ae      	b.n	8001988 <__aeabi_dsub+0x1b4>
 800182a:	2800      	cmp	r0, #0
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x5c>
 800182e:	e0c1      	b.n	80019b4 <__aeabi_dsub+0x1e0>
 8001830:	48be      	ldr	r0, [pc, #760]	; (8001b2c <__aeabi_dsub+0x358>)
 8001832:	4580      	cmp	r8, r0
 8001834:	d100      	bne.n	8001838 <__aeabi_dsub+0x64>
 8001836:	e151      	b.n	8001adc <__aeabi_dsub+0x308>
 8001838:	2080      	movs	r0, #128	; 0x80
 800183a:	0400      	lsls	r0, r0, #16
 800183c:	4301      	orrs	r1, r0
 800183e:	2a38      	cmp	r2, #56	; 0x38
 8001840:	dd00      	ble.n	8001844 <__aeabi_dsub+0x70>
 8001842:	e17b      	b.n	8001b3c <__aeabi_dsub+0x368>
 8001844:	2a1f      	cmp	r2, #31
 8001846:	dd00      	ble.n	800184a <__aeabi_dsub+0x76>
 8001848:	e1ee      	b.n	8001c28 <__aeabi_dsub+0x454>
 800184a:	2020      	movs	r0, #32
 800184c:	003e      	movs	r6, r7
 800184e:	1a80      	subs	r0, r0, r2
 8001850:	000c      	movs	r4, r1
 8001852:	40d6      	lsrs	r6, r2
 8001854:	40d1      	lsrs	r1, r2
 8001856:	4087      	lsls	r7, r0
 8001858:	4662      	mov	r2, ip
 800185a:	4084      	lsls	r4, r0
 800185c:	1a52      	subs	r2, r2, r1
 800185e:	1e78      	subs	r0, r7, #1
 8001860:	4187      	sbcs	r7, r0
 8001862:	4694      	mov	ip, r2
 8001864:	4334      	orrs	r4, r6
 8001866:	4327      	orrs	r7, r4
 8001868:	1bdc      	subs	r4, r3, r7
 800186a:	42a3      	cmp	r3, r4
 800186c:	419b      	sbcs	r3, r3
 800186e:	4662      	mov	r2, ip
 8001870:	425b      	negs	r3, r3
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	4699      	mov	r9, r3
 8001876:	464b      	mov	r3, r9
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dsub+0xaa>
 800187c:	e118      	b.n	8001ab0 <__aeabi_dsub+0x2dc>
 800187e:	464b      	mov	r3, r9
 8001880:	0258      	lsls	r0, r3, #9
 8001882:	0a43      	lsrs	r3, r0, #9
 8001884:	4699      	mov	r9, r3
 8001886:	464b      	mov	r3, r9
 8001888:	2b00      	cmp	r3, #0
 800188a:	d100      	bne.n	800188e <__aeabi_dsub+0xba>
 800188c:	e137      	b.n	8001afe <__aeabi_dsub+0x32a>
 800188e:	4648      	mov	r0, r9
 8001890:	f000 fc86 	bl	80021a0 <__clzsi2>
 8001894:	0001      	movs	r1, r0
 8001896:	3908      	subs	r1, #8
 8001898:	2320      	movs	r3, #32
 800189a:	0022      	movs	r2, r4
 800189c:	4648      	mov	r0, r9
 800189e:	1a5b      	subs	r3, r3, r1
 80018a0:	40da      	lsrs	r2, r3
 80018a2:	4088      	lsls	r0, r1
 80018a4:	408c      	lsls	r4, r1
 80018a6:	4643      	mov	r3, r8
 80018a8:	4310      	orrs	r0, r2
 80018aa:	4588      	cmp	r8, r1
 80018ac:	dd00      	ble.n	80018b0 <__aeabi_dsub+0xdc>
 80018ae:	e136      	b.n	8001b1e <__aeabi_dsub+0x34a>
 80018b0:	1ac9      	subs	r1, r1, r3
 80018b2:	1c4b      	adds	r3, r1, #1
 80018b4:	2b1f      	cmp	r3, #31
 80018b6:	dd00      	ble.n	80018ba <__aeabi_dsub+0xe6>
 80018b8:	e0ea      	b.n	8001a90 <__aeabi_dsub+0x2bc>
 80018ba:	2220      	movs	r2, #32
 80018bc:	0026      	movs	r6, r4
 80018be:	1ad2      	subs	r2, r2, r3
 80018c0:	0001      	movs	r1, r0
 80018c2:	4094      	lsls	r4, r2
 80018c4:	40de      	lsrs	r6, r3
 80018c6:	40d8      	lsrs	r0, r3
 80018c8:	2300      	movs	r3, #0
 80018ca:	4091      	lsls	r1, r2
 80018cc:	1e62      	subs	r2, r4, #1
 80018ce:	4194      	sbcs	r4, r2
 80018d0:	4681      	mov	r9, r0
 80018d2:	4698      	mov	r8, r3
 80018d4:	4331      	orrs	r1, r6
 80018d6:	430c      	orrs	r4, r1
 80018d8:	0763      	lsls	r3, r4, #29
 80018da:	d009      	beq.n	80018f0 <__aeabi_dsub+0x11c>
 80018dc:	230f      	movs	r3, #15
 80018de:	4023      	ands	r3, r4
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d005      	beq.n	80018f0 <__aeabi_dsub+0x11c>
 80018e4:	1d23      	adds	r3, r4, #4
 80018e6:	42a3      	cmp	r3, r4
 80018e8:	41a4      	sbcs	r4, r4
 80018ea:	4264      	negs	r4, r4
 80018ec:	44a1      	add	r9, r4
 80018ee:	001c      	movs	r4, r3
 80018f0:	464b      	mov	r3, r9
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	d400      	bmi.n	80018f8 <__aeabi_dsub+0x124>
 80018f6:	e0de      	b.n	8001ab6 <__aeabi_dsub+0x2e2>
 80018f8:	4641      	mov	r1, r8
 80018fa:	4b8c      	ldr	r3, [pc, #560]	; (8001b2c <__aeabi_dsub+0x358>)
 80018fc:	3101      	adds	r1, #1
 80018fe:	4299      	cmp	r1, r3
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x130>
 8001902:	e0e7      	b.n	8001ad4 <__aeabi_dsub+0x300>
 8001904:	464b      	mov	r3, r9
 8001906:	488a      	ldr	r0, [pc, #552]	; (8001b30 <__aeabi_dsub+0x35c>)
 8001908:	08e4      	lsrs	r4, r4, #3
 800190a:	4003      	ands	r3, r0
 800190c:	0018      	movs	r0, r3
 800190e:	0549      	lsls	r1, r1, #21
 8001910:	075b      	lsls	r3, r3, #29
 8001912:	0240      	lsls	r0, r0, #9
 8001914:	4323      	orrs	r3, r4
 8001916:	0d4a      	lsrs	r2, r1, #21
 8001918:	0b04      	lsrs	r4, r0, #12
 800191a:	0512      	lsls	r2, r2, #20
 800191c:	07ed      	lsls	r5, r5, #31
 800191e:	4322      	orrs	r2, r4
 8001920:	432a      	orrs	r2, r5
 8001922:	0018      	movs	r0, r3
 8001924:	0011      	movs	r1, r2
 8001926:	bcf0      	pop	{r4, r5, r6, r7}
 8001928:	46bb      	mov	fp, r7
 800192a:	46b2      	mov	sl, r6
 800192c:	46a9      	mov	r9, r5
 800192e:	46a0      	mov	r8, r4
 8001930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001932:	4642      	mov	r2, r8
 8001934:	1a12      	subs	r2, r2, r0
 8001936:	2a00      	cmp	r2, #0
 8001938:	dd52      	ble.n	80019e0 <__aeabi_dsub+0x20c>
 800193a:	2800      	cmp	r0, #0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x16c>
 800193e:	e09c      	b.n	8001a7a <__aeabi_dsub+0x2a6>
 8001940:	45a0      	cmp	r8, r4
 8001942:	d100      	bne.n	8001946 <__aeabi_dsub+0x172>
 8001944:	e0ca      	b.n	8001adc <__aeabi_dsub+0x308>
 8001946:	2080      	movs	r0, #128	; 0x80
 8001948:	0400      	lsls	r0, r0, #16
 800194a:	4301      	orrs	r1, r0
 800194c:	2a38      	cmp	r2, #56	; 0x38
 800194e:	dd00      	ble.n	8001952 <__aeabi_dsub+0x17e>
 8001950:	e149      	b.n	8001be6 <__aeabi_dsub+0x412>
 8001952:	2a1f      	cmp	r2, #31
 8001954:	dc00      	bgt.n	8001958 <__aeabi_dsub+0x184>
 8001956:	e197      	b.n	8001c88 <__aeabi_dsub+0x4b4>
 8001958:	0010      	movs	r0, r2
 800195a:	000e      	movs	r6, r1
 800195c:	3820      	subs	r0, #32
 800195e:	40c6      	lsrs	r6, r0
 8001960:	2a20      	cmp	r2, #32
 8001962:	d004      	beq.n	800196e <__aeabi_dsub+0x19a>
 8001964:	2040      	movs	r0, #64	; 0x40
 8001966:	1a82      	subs	r2, r0, r2
 8001968:	4091      	lsls	r1, r2
 800196a:	430f      	orrs	r7, r1
 800196c:	46b9      	mov	r9, r7
 800196e:	464c      	mov	r4, r9
 8001970:	1e62      	subs	r2, r4, #1
 8001972:	4194      	sbcs	r4, r2
 8001974:	4334      	orrs	r4, r6
 8001976:	e13a      	b.n	8001bee <__aeabi_dsub+0x41a>
 8001978:	000a      	movs	r2, r1
 800197a:	433a      	orrs	r2, r7
 800197c:	d028      	beq.n	80019d0 <__aeabi_dsub+0x1fc>
 800197e:	46b3      	mov	fp, r6
 8001980:	42b5      	cmp	r5, r6
 8001982:	d02b      	beq.n	80019dc <__aeabi_dsub+0x208>
 8001984:	4a6b      	ldr	r2, [pc, #428]	; (8001b34 <__aeabi_dsub+0x360>)
 8001986:	4442      	add	r2, r8
 8001988:	2a00      	cmp	r2, #0
 800198a:	d05d      	beq.n	8001a48 <__aeabi_dsub+0x274>
 800198c:	4642      	mov	r2, r8
 800198e:	4644      	mov	r4, r8
 8001990:	1a82      	subs	r2, r0, r2
 8001992:	2c00      	cmp	r4, #0
 8001994:	d000      	beq.n	8001998 <__aeabi_dsub+0x1c4>
 8001996:	e0f5      	b.n	8001b84 <__aeabi_dsub+0x3b0>
 8001998:	4665      	mov	r5, ip
 800199a:	431d      	orrs	r5, r3
 800199c:	d100      	bne.n	80019a0 <__aeabi_dsub+0x1cc>
 800199e:	e19c      	b.n	8001cda <__aeabi_dsub+0x506>
 80019a0:	1e55      	subs	r5, r2, #1
 80019a2:	2a01      	cmp	r2, #1
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0x1d4>
 80019a6:	e1fb      	b.n	8001da0 <__aeabi_dsub+0x5cc>
 80019a8:	4c60      	ldr	r4, [pc, #384]	; (8001b2c <__aeabi_dsub+0x358>)
 80019aa:	42a2      	cmp	r2, r4
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0x1dc>
 80019ae:	e1bd      	b.n	8001d2c <__aeabi_dsub+0x558>
 80019b0:	002a      	movs	r2, r5
 80019b2:	e0f0      	b.n	8001b96 <__aeabi_dsub+0x3c2>
 80019b4:	0008      	movs	r0, r1
 80019b6:	4338      	orrs	r0, r7
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0x1e8>
 80019ba:	e0c3      	b.n	8001b44 <__aeabi_dsub+0x370>
 80019bc:	1e50      	subs	r0, r2, #1
 80019be:	2a01      	cmp	r2, #1
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x1f0>
 80019c2:	e1a8      	b.n	8001d16 <__aeabi_dsub+0x542>
 80019c4:	4c59      	ldr	r4, [pc, #356]	; (8001b2c <__aeabi_dsub+0x358>)
 80019c6:	42a2      	cmp	r2, r4
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x1f8>
 80019ca:	e087      	b.n	8001adc <__aeabi_dsub+0x308>
 80019cc:	0002      	movs	r2, r0
 80019ce:	e736      	b.n	800183e <__aeabi_dsub+0x6a>
 80019d0:	2201      	movs	r2, #1
 80019d2:	4056      	eors	r6, r2
 80019d4:	46b3      	mov	fp, r6
 80019d6:	42b5      	cmp	r5, r6
 80019d8:	d000      	beq.n	80019dc <__aeabi_dsub+0x208>
 80019da:	e721      	b.n	8001820 <__aeabi_dsub+0x4c>
 80019dc:	4a55      	ldr	r2, [pc, #340]	; (8001b34 <__aeabi_dsub+0x360>)
 80019de:	4442      	add	r2, r8
 80019e0:	2a00      	cmp	r2, #0
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dsub+0x212>
 80019e4:	e0b5      	b.n	8001b52 <__aeabi_dsub+0x37e>
 80019e6:	4642      	mov	r2, r8
 80019e8:	4644      	mov	r4, r8
 80019ea:	1a82      	subs	r2, r0, r2
 80019ec:	2c00      	cmp	r4, #0
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x21e>
 80019f0:	e138      	b.n	8001c64 <__aeabi_dsub+0x490>
 80019f2:	4e4e      	ldr	r6, [pc, #312]	; (8001b2c <__aeabi_dsub+0x358>)
 80019f4:	42b0      	cmp	r0, r6
 80019f6:	d100      	bne.n	80019fa <__aeabi_dsub+0x226>
 80019f8:	e1de      	b.n	8001db8 <__aeabi_dsub+0x5e4>
 80019fa:	2680      	movs	r6, #128	; 0x80
 80019fc:	4664      	mov	r4, ip
 80019fe:	0436      	lsls	r6, r6, #16
 8001a00:	4334      	orrs	r4, r6
 8001a02:	46a4      	mov	ip, r4
 8001a04:	2a38      	cmp	r2, #56	; 0x38
 8001a06:	dd00      	ble.n	8001a0a <__aeabi_dsub+0x236>
 8001a08:	e196      	b.n	8001d38 <__aeabi_dsub+0x564>
 8001a0a:	2a1f      	cmp	r2, #31
 8001a0c:	dd00      	ble.n	8001a10 <__aeabi_dsub+0x23c>
 8001a0e:	e224      	b.n	8001e5a <__aeabi_dsub+0x686>
 8001a10:	2620      	movs	r6, #32
 8001a12:	1ab4      	subs	r4, r6, r2
 8001a14:	46a2      	mov	sl, r4
 8001a16:	4664      	mov	r4, ip
 8001a18:	4656      	mov	r6, sl
 8001a1a:	40b4      	lsls	r4, r6
 8001a1c:	46a1      	mov	r9, r4
 8001a1e:	001c      	movs	r4, r3
 8001a20:	464e      	mov	r6, r9
 8001a22:	40d4      	lsrs	r4, r2
 8001a24:	4326      	orrs	r6, r4
 8001a26:	0034      	movs	r4, r6
 8001a28:	4656      	mov	r6, sl
 8001a2a:	40b3      	lsls	r3, r6
 8001a2c:	1e5e      	subs	r6, r3, #1
 8001a2e:	41b3      	sbcs	r3, r6
 8001a30:	431c      	orrs	r4, r3
 8001a32:	4663      	mov	r3, ip
 8001a34:	40d3      	lsrs	r3, r2
 8001a36:	18c9      	adds	r1, r1, r3
 8001a38:	19e4      	adds	r4, r4, r7
 8001a3a:	42bc      	cmp	r4, r7
 8001a3c:	41bf      	sbcs	r7, r7
 8001a3e:	427f      	negs	r7, r7
 8001a40:	46b9      	mov	r9, r7
 8001a42:	4680      	mov	r8, r0
 8001a44:	4489      	add	r9, r1
 8001a46:	e0d8      	b.n	8001bfa <__aeabi_dsub+0x426>
 8001a48:	4640      	mov	r0, r8
 8001a4a:	4c3b      	ldr	r4, [pc, #236]	; (8001b38 <__aeabi_dsub+0x364>)
 8001a4c:	3001      	adds	r0, #1
 8001a4e:	4220      	tst	r0, r4
 8001a50:	d000      	beq.n	8001a54 <__aeabi_dsub+0x280>
 8001a52:	e0b4      	b.n	8001bbe <__aeabi_dsub+0x3ea>
 8001a54:	4640      	mov	r0, r8
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d000      	beq.n	8001a5c <__aeabi_dsub+0x288>
 8001a5a:	e144      	b.n	8001ce6 <__aeabi_dsub+0x512>
 8001a5c:	4660      	mov	r0, ip
 8001a5e:	4318      	orrs	r0, r3
 8001a60:	d100      	bne.n	8001a64 <__aeabi_dsub+0x290>
 8001a62:	e190      	b.n	8001d86 <__aeabi_dsub+0x5b2>
 8001a64:	0008      	movs	r0, r1
 8001a66:	4338      	orrs	r0, r7
 8001a68:	d000      	beq.n	8001a6c <__aeabi_dsub+0x298>
 8001a6a:	e1aa      	b.n	8001dc2 <__aeabi_dsub+0x5ee>
 8001a6c:	4661      	mov	r1, ip
 8001a6e:	08db      	lsrs	r3, r3, #3
 8001a70:	0749      	lsls	r1, r1, #29
 8001a72:	430b      	orrs	r3, r1
 8001a74:	4661      	mov	r1, ip
 8001a76:	08cc      	lsrs	r4, r1, #3
 8001a78:	e027      	b.n	8001aca <__aeabi_dsub+0x2f6>
 8001a7a:	0008      	movs	r0, r1
 8001a7c:	4338      	orrs	r0, r7
 8001a7e:	d061      	beq.n	8001b44 <__aeabi_dsub+0x370>
 8001a80:	1e50      	subs	r0, r2, #1
 8001a82:	2a01      	cmp	r2, #1
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dsub+0x2b4>
 8001a86:	e139      	b.n	8001cfc <__aeabi_dsub+0x528>
 8001a88:	42a2      	cmp	r2, r4
 8001a8a:	d027      	beq.n	8001adc <__aeabi_dsub+0x308>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	e75d      	b.n	800194c <__aeabi_dsub+0x178>
 8001a90:	0002      	movs	r2, r0
 8001a92:	391f      	subs	r1, #31
 8001a94:	40ca      	lsrs	r2, r1
 8001a96:	0011      	movs	r1, r2
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d003      	beq.n	8001aa4 <__aeabi_dsub+0x2d0>
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	4098      	lsls	r0, r3
 8001aa2:	4304      	orrs	r4, r0
 8001aa4:	1e63      	subs	r3, r4, #1
 8001aa6:	419c      	sbcs	r4, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	4699      	mov	r9, r3
 8001aac:	4698      	mov	r8, r3
 8001aae:	430c      	orrs	r4, r1
 8001ab0:	0763      	lsls	r3, r4, #29
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_dsub+0x2e2>
 8001ab4:	e712      	b.n	80018dc <__aeabi_dsub+0x108>
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	464a      	mov	r2, r9
 8001aba:	08e4      	lsrs	r4, r4, #3
 8001abc:	075b      	lsls	r3, r3, #29
 8001abe:	4323      	orrs	r3, r4
 8001ac0:	08d4      	lsrs	r4, r2, #3
 8001ac2:	4642      	mov	r2, r8
 8001ac4:	4919      	ldr	r1, [pc, #100]	; (8001b2c <__aeabi_dsub+0x358>)
 8001ac6:	428a      	cmp	r2, r1
 8001ac8:	d00e      	beq.n	8001ae8 <__aeabi_dsub+0x314>
 8001aca:	0324      	lsls	r4, r4, #12
 8001acc:	0552      	lsls	r2, r2, #21
 8001ace:	0b24      	lsrs	r4, r4, #12
 8001ad0:	0d52      	lsrs	r2, r2, #21
 8001ad2:	e722      	b.n	800191a <__aeabi_dsub+0x146>
 8001ad4:	000a      	movs	r2, r1
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e71e      	b.n	800191a <__aeabi_dsub+0x146>
 8001adc:	08db      	lsrs	r3, r3, #3
 8001ade:	4662      	mov	r2, ip
 8001ae0:	0752      	lsls	r2, r2, #29
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	4662      	mov	r2, ip
 8001ae6:	08d4      	lsrs	r4, r2, #3
 8001ae8:	001a      	movs	r2, r3
 8001aea:	4322      	orrs	r2, r4
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x31c>
 8001aee:	e1fc      	b.n	8001eea <__aeabi_dsub+0x716>
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	0312      	lsls	r2, r2, #12
 8001af4:	4314      	orrs	r4, r2
 8001af6:	0324      	lsls	r4, r4, #12
 8001af8:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <__aeabi_dsub+0x358>)
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	e70d      	b.n	800191a <__aeabi_dsub+0x146>
 8001afe:	0020      	movs	r0, r4
 8001b00:	f000 fb4e 	bl	80021a0 <__clzsi2>
 8001b04:	0001      	movs	r1, r0
 8001b06:	3118      	adds	r1, #24
 8001b08:	291f      	cmp	r1, #31
 8001b0a:	dc00      	bgt.n	8001b0e <__aeabi_dsub+0x33a>
 8001b0c:	e6c4      	b.n	8001898 <__aeabi_dsub+0xc4>
 8001b0e:	3808      	subs	r0, #8
 8001b10:	4084      	lsls	r4, r0
 8001b12:	4643      	mov	r3, r8
 8001b14:	0020      	movs	r0, r4
 8001b16:	2400      	movs	r4, #0
 8001b18:	4588      	cmp	r8, r1
 8001b1a:	dc00      	bgt.n	8001b1e <__aeabi_dsub+0x34a>
 8001b1c:	e6c8      	b.n	80018b0 <__aeabi_dsub+0xdc>
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__aeabi_dsub+0x35c>)
 8001b20:	1a5b      	subs	r3, r3, r1
 8001b22:	4010      	ands	r0, r2
 8001b24:	4698      	mov	r8, r3
 8001b26:	4681      	mov	r9, r0
 8001b28:	e6d6      	b.n	80018d8 <__aeabi_dsub+0x104>
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	000007ff 	.word	0x000007ff
 8001b30:	ff7fffff 	.word	0xff7fffff
 8001b34:	fffff801 	.word	0xfffff801
 8001b38:	000007fe 	.word	0x000007fe
 8001b3c:	430f      	orrs	r7, r1
 8001b3e:	1e7a      	subs	r2, r7, #1
 8001b40:	4197      	sbcs	r7, r2
 8001b42:	e691      	b.n	8001868 <__aeabi_dsub+0x94>
 8001b44:	4661      	mov	r1, ip
 8001b46:	08db      	lsrs	r3, r3, #3
 8001b48:	0749      	lsls	r1, r1, #29
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	4661      	mov	r1, ip
 8001b4e:	08cc      	lsrs	r4, r1, #3
 8001b50:	e7b8      	b.n	8001ac4 <__aeabi_dsub+0x2f0>
 8001b52:	4640      	mov	r0, r8
 8001b54:	4cd3      	ldr	r4, [pc, #844]	; (8001ea4 <__aeabi_dsub+0x6d0>)
 8001b56:	3001      	adds	r0, #1
 8001b58:	4220      	tst	r0, r4
 8001b5a:	d000      	beq.n	8001b5e <__aeabi_dsub+0x38a>
 8001b5c:	e0a2      	b.n	8001ca4 <__aeabi_dsub+0x4d0>
 8001b5e:	4640      	mov	r0, r8
 8001b60:	2800      	cmp	r0, #0
 8001b62:	d000      	beq.n	8001b66 <__aeabi_dsub+0x392>
 8001b64:	e101      	b.n	8001d6a <__aeabi_dsub+0x596>
 8001b66:	4660      	mov	r0, ip
 8001b68:	4318      	orrs	r0, r3
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dsub+0x39a>
 8001b6c:	e15e      	b.n	8001e2c <__aeabi_dsub+0x658>
 8001b6e:	0008      	movs	r0, r1
 8001b70:	4338      	orrs	r0, r7
 8001b72:	d000      	beq.n	8001b76 <__aeabi_dsub+0x3a2>
 8001b74:	e15f      	b.n	8001e36 <__aeabi_dsub+0x662>
 8001b76:	4661      	mov	r1, ip
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	0749      	lsls	r1, r1, #29
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	4661      	mov	r1, ip
 8001b80:	08cc      	lsrs	r4, r1, #3
 8001b82:	e7a2      	b.n	8001aca <__aeabi_dsub+0x2f6>
 8001b84:	4dc8      	ldr	r5, [pc, #800]	; (8001ea8 <__aeabi_dsub+0x6d4>)
 8001b86:	42a8      	cmp	r0, r5
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x3b8>
 8001b8a:	e0cf      	b.n	8001d2c <__aeabi_dsub+0x558>
 8001b8c:	2580      	movs	r5, #128	; 0x80
 8001b8e:	4664      	mov	r4, ip
 8001b90:	042d      	lsls	r5, r5, #16
 8001b92:	432c      	orrs	r4, r5
 8001b94:	46a4      	mov	ip, r4
 8001b96:	2a38      	cmp	r2, #56	; 0x38
 8001b98:	dc56      	bgt.n	8001c48 <__aeabi_dsub+0x474>
 8001b9a:	2a1f      	cmp	r2, #31
 8001b9c:	dd00      	ble.n	8001ba0 <__aeabi_dsub+0x3cc>
 8001b9e:	e0d1      	b.n	8001d44 <__aeabi_dsub+0x570>
 8001ba0:	2520      	movs	r5, #32
 8001ba2:	001e      	movs	r6, r3
 8001ba4:	1aad      	subs	r5, r5, r2
 8001ba6:	4664      	mov	r4, ip
 8001ba8:	40ab      	lsls	r3, r5
 8001baa:	40ac      	lsls	r4, r5
 8001bac:	40d6      	lsrs	r6, r2
 8001bae:	1e5d      	subs	r5, r3, #1
 8001bb0:	41ab      	sbcs	r3, r5
 8001bb2:	4334      	orrs	r4, r6
 8001bb4:	4323      	orrs	r3, r4
 8001bb6:	4664      	mov	r4, ip
 8001bb8:	40d4      	lsrs	r4, r2
 8001bba:	1b09      	subs	r1, r1, r4
 8001bbc:	e049      	b.n	8001c52 <__aeabi_dsub+0x47e>
 8001bbe:	4660      	mov	r0, ip
 8001bc0:	1bdc      	subs	r4, r3, r7
 8001bc2:	1a46      	subs	r6, r0, r1
 8001bc4:	42a3      	cmp	r3, r4
 8001bc6:	4180      	sbcs	r0, r0
 8001bc8:	4240      	negs	r0, r0
 8001bca:	4681      	mov	r9, r0
 8001bcc:	0030      	movs	r0, r6
 8001bce:	464e      	mov	r6, r9
 8001bd0:	1b80      	subs	r0, r0, r6
 8001bd2:	4681      	mov	r9, r0
 8001bd4:	0200      	lsls	r0, r0, #8
 8001bd6:	d476      	bmi.n	8001cc6 <__aeabi_dsub+0x4f2>
 8001bd8:	464b      	mov	r3, r9
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_dsub+0x40c>
 8001bde:	e652      	b.n	8001886 <__aeabi_dsub+0xb2>
 8001be0:	2400      	movs	r4, #0
 8001be2:	2500      	movs	r5, #0
 8001be4:	e771      	b.n	8001aca <__aeabi_dsub+0x2f6>
 8001be6:	4339      	orrs	r1, r7
 8001be8:	000c      	movs	r4, r1
 8001bea:	1e62      	subs	r2, r4, #1
 8001bec:	4194      	sbcs	r4, r2
 8001bee:	18e4      	adds	r4, r4, r3
 8001bf0:	429c      	cmp	r4, r3
 8001bf2:	419b      	sbcs	r3, r3
 8001bf4:	425b      	negs	r3, r3
 8001bf6:	4463      	add	r3, ip
 8001bf8:	4699      	mov	r9, r3
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	d400      	bmi.n	8001c02 <__aeabi_dsub+0x42e>
 8001c00:	e756      	b.n	8001ab0 <__aeabi_dsub+0x2dc>
 8001c02:	2301      	movs	r3, #1
 8001c04:	469c      	mov	ip, r3
 8001c06:	4ba8      	ldr	r3, [pc, #672]	; (8001ea8 <__aeabi_dsub+0x6d4>)
 8001c08:	44e0      	add	r8, ip
 8001c0a:	4598      	cmp	r8, r3
 8001c0c:	d038      	beq.n	8001c80 <__aeabi_dsub+0x4ac>
 8001c0e:	464b      	mov	r3, r9
 8001c10:	48a6      	ldr	r0, [pc, #664]	; (8001eac <__aeabi_dsub+0x6d8>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	4003      	ands	r3, r0
 8001c16:	0018      	movs	r0, r3
 8001c18:	0863      	lsrs	r3, r4, #1
 8001c1a:	4014      	ands	r4, r2
 8001c1c:	431c      	orrs	r4, r3
 8001c1e:	07c3      	lsls	r3, r0, #31
 8001c20:	431c      	orrs	r4, r3
 8001c22:	0843      	lsrs	r3, r0, #1
 8001c24:	4699      	mov	r9, r3
 8001c26:	e657      	b.n	80018d8 <__aeabi_dsub+0x104>
 8001c28:	0010      	movs	r0, r2
 8001c2a:	000e      	movs	r6, r1
 8001c2c:	3820      	subs	r0, #32
 8001c2e:	40c6      	lsrs	r6, r0
 8001c30:	2a20      	cmp	r2, #32
 8001c32:	d004      	beq.n	8001c3e <__aeabi_dsub+0x46a>
 8001c34:	2040      	movs	r0, #64	; 0x40
 8001c36:	1a82      	subs	r2, r0, r2
 8001c38:	4091      	lsls	r1, r2
 8001c3a:	430f      	orrs	r7, r1
 8001c3c:	46b9      	mov	r9, r7
 8001c3e:	464f      	mov	r7, r9
 8001c40:	1e7a      	subs	r2, r7, #1
 8001c42:	4197      	sbcs	r7, r2
 8001c44:	4337      	orrs	r7, r6
 8001c46:	e60f      	b.n	8001868 <__aeabi_dsub+0x94>
 8001c48:	4662      	mov	r2, ip
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	4193      	sbcs	r3, r2
 8001c52:	1afc      	subs	r4, r7, r3
 8001c54:	42a7      	cmp	r7, r4
 8001c56:	41bf      	sbcs	r7, r7
 8001c58:	427f      	negs	r7, r7
 8001c5a:	1bcb      	subs	r3, r1, r7
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	465d      	mov	r5, fp
 8001c60:	4680      	mov	r8, r0
 8001c62:	e608      	b.n	8001876 <__aeabi_dsub+0xa2>
 8001c64:	4666      	mov	r6, ip
 8001c66:	431e      	orrs	r6, r3
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x498>
 8001c6a:	e0be      	b.n	8001dea <__aeabi_dsub+0x616>
 8001c6c:	1e56      	subs	r6, r2, #1
 8001c6e:	2a01      	cmp	r2, #1
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x4a0>
 8001c72:	e109      	b.n	8001e88 <__aeabi_dsub+0x6b4>
 8001c74:	4c8c      	ldr	r4, [pc, #560]	; (8001ea8 <__aeabi_dsub+0x6d4>)
 8001c76:	42a2      	cmp	r2, r4
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x4a8>
 8001c7a:	e119      	b.n	8001eb0 <__aeabi_dsub+0x6dc>
 8001c7c:	0032      	movs	r2, r6
 8001c7e:	e6c1      	b.n	8001a04 <__aeabi_dsub+0x230>
 8001c80:	4642      	mov	r2, r8
 8001c82:	2400      	movs	r4, #0
 8001c84:	2300      	movs	r3, #0
 8001c86:	e648      	b.n	800191a <__aeabi_dsub+0x146>
 8001c88:	2020      	movs	r0, #32
 8001c8a:	000c      	movs	r4, r1
 8001c8c:	1a80      	subs	r0, r0, r2
 8001c8e:	003e      	movs	r6, r7
 8001c90:	4087      	lsls	r7, r0
 8001c92:	4084      	lsls	r4, r0
 8001c94:	40d6      	lsrs	r6, r2
 8001c96:	1e78      	subs	r0, r7, #1
 8001c98:	4187      	sbcs	r7, r0
 8001c9a:	40d1      	lsrs	r1, r2
 8001c9c:	4334      	orrs	r4, r6
 8001c9e:	433c      	orrs	r4, r7
 8001ca0:	448c      	add	ip, r1
 8001ca2:	e7a4      	b.n	8001bee <__aeabi_dsub+0x41a>
 8001ca4:	4a80      	ldr	r2, [pc, #512]	; (8001ea8 <__aeabi_dsub+0x6d4>)
 8001ca6:	4290      	cmp	r0, r2
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x4d8>
 8001caa:	e0e9      	b.n	8001e80 <__aeabi_dsub+0x6ac>
 8001cac:	19df      	adds	r7, r3, r7
 8001cae:	429f      	cmp	r7, r3
 8001cb0:	419b      	sbcs	r3, r3
 8001cb2:	4461      	add	r1, ip
 8001cb4:	425b      	negs	r3, r3
 8001cb6:	18c9      	adds	r1, r1, r3
 8001cb8:	07cc      	lsls	r4, r1, #31
 8001cba:	087f      	lsrs	r7, r7, #1
 8001cbc:	084b      	lsrs	r3, r1, #1
 8001cbe:	4699      	mov	r9, r3
 8001cc0:	4680      	mov	r8, r0
 8001cc2:	433c      	orrs	r4, r7
 8001cc4:	e6f4      	b.n	8001ab0 <__aeabi_dsub+0x2dc>
 8001cc6:	1afc      	subs	r4, r7, r3
 8001cc8:	42a7      	cmp	r7, r4
 8001cca:	41bf      	sbcs	r7, r7
 8001ccc:	4663      	mov	r3, ip
 8001cce:	427f      	negs	r7, r7
 8001cd0:	1ac9      	subs	r1, r1, r3
 8001cd2:	1bcb      	subs	r3, r1, r7
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	465d      	mov	r5, fp
 8001cd8:	e5d5      	b.n	8001886 <__aeabi_dsub+0xb2>
 8001cda:	08ff      	lsrs	r7, r7, #3
 8001cdc:	074b      	lsls	r3, r1, #29
 8001cde:	465d      	mov	r5, fp
 8001ce0:	433b      	orrs	r3, r7
 8001ce2:	08cc      	lsrs	r4, r1, #3
 8001ce4:	e6ee      	b.n	8001ac4 <__aeabi_dsub+0x2f0>
 8001ce6:	4662      	mov	r2, ip
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x51a>
 8001cec:	e082      	b.n	8001df4 <__aeabi_dsub+0x620>
 8001cee:	000b      	movs	r3, r1
 8001cf0:	433b      	orrs	r3, r7
 8001cf2:	d11b      	bne.n	8001d2c <__aeabi_dsub+0x558>
 8001cf4:	2480      	movs	r4, #128	; 0x80
 8001cf6:	2500      	movs	r5, #0
 8001cf8:	0324      	lsls	r4, r4, #12
 8001cfa:	e6f9      	b.n	8001af0 <__aeabi_dsub+0x31c>
 8001cfc:	19dc      	adds	r4, r3, r7
 8001cfe:	429c      	cmp	r4, r3
 8001d00:	419b      	sbcs	r3, r3
 8001d02:	4461      	add	r1, ip
 8001d04:	4689      	mov	r9, r1
 8001d06:	425b      	negs	r3, r3
 8001d08:	4499      	add	r9, r3
 8001d0a:	464b      	mov	r3, r9
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	d444      	bmi.n	8001d9a <__aeabi_dsub+0x5c6>
 8001d10:	2301      	movs	r3, #1
 8001d12:	4698      	mov	r8, r3
 8001d14:	e6cc      	b.n	8001ab0 <__aeabi_dsub+0x2dc>
 8001d16:	1bdc      	subs	r4, r3, r7
 8001d18:	4662      	mov	r2, ip
 8001d1a:	42a3      	cmp	r3, r4
 8001d1c:	419b      	sbcs	r3, r3
 8001d1e:	1a51      	subs	r1, r2, r1
 8001d20:	425b      	negs	r3, r3
 8001d22:	1acb      	subs	r3, r1, r3
 8001d24:	4699      	mov	r9, r3
 8001d26:	2301      	movs	r3, #1
 8001d28:	4698      	mov	r8, r3
 8001d2a:	e5a4      	b.n	8001876 <__aeabi_dsub+0xa2>
 8001d2c:	08ff      	lsrs	r7, r7, #3
 8001d2e:	074b      	lsls	r3, r1, #29
 8001d30:	465d      	mov	r5, fp
 8001d32:	433b      	orrs	r3, r7
 8001d34:	08cc      	lsrs	r4, r1, #3
 8001d36:	e6d7      	b.n	8001ae8 <__aeabi_dsub+0x314>
 8001d38:	4662      	mov	r2, ip
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	0014      	movs	r4, r2
 8001d3e:	1e63      	subs	r3, r4, #1
 8001d40:	419c      	sbcs	r4, r3
 8001d42:	e679      	b.n	8001a38 <__aeabi_dsub+0x264>
 8001d44:	0015      	movs	r5, r2
 8001d46:	4664      	mov	r4, ip
 8001d48:	3d20      	subs	r5, #32
 8001d4a:	40ec      	lsrs	r4, r5
 8001d4c:	46a0      	mov	r8, r4
 8001d4e:	2a20      	cmp	r2, #32
 8001d50:	d005      	beq.n	8001d5e <__aeabi_dsub+0x58a>
 8001d52:	2540      	movs	r5, #64	; 0x40
 8001d54:	4664      	mov	r4, ip
 8001d56:	1aaa      	subs	r2, r5, r2
 8001d58:	4094      	lsls	r4, r2
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	469a      	mov	sl, r3
 8001d5e:	4654      	mov	r4, sl
 8001d60:	1e63      	subs	r3, r4, #1
 8001d62:	419c      	sbcs	r4, r3
 8001d64:	4643      	mov	r3, r8
 8001d66:	4323      	orrs	r3, r4
 8001d68:	e773      	b.n	8001c52 <__aeabi_dsub+0x47e>
 8001d6a:	4662      	mov	r2, ip
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	d023      	beq.n	8001db8 <__aeabi_dsub+0x5e4>
 8001d70:	000a      	movs	r2, r1
 8001d72:	433a      	orrs	r2, r7
 8001d74:	d000      	beq.n	8001d78 <__aeabi_dsub+0x5a4>
 8001d76:	e0a0      	b.n	8001eba <__aeabi_dsub+0x6e6>
 8001d78:	4662      	mov	r2, ip
 8001d7a:	08db      	lsrs	r3, r3, #3
 8001d7c:	0752      	lsls	r2, r2, #29
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	4662      	mov	r2, ip
 8001d82:	08d4      	lsrs	r4, r2, #3
 8001d84:	e6b0      	b.n	8001ae8 <__aeabi_dsub+0x314>
 8001d86:	000b      	movs	r3, r1
 8001d88:	433b      	orrs	r3, r7
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x5ba>
 8001d8c:	e728      	b.n	8001be0 <__aeabi_dsub+0x40c>
 8001d8e:	08ff      	lsrs	r7, r7, #3
 8001d90:	074b      	lsls	r3, r1, #29
 8001d92:	465d      	mov	r5, fp
 8001d94:	433b      	orrs	r3, r7
 8001d96:	08cc      	lsrs	r4, r1, #3
 8001d98:	e697      	b.n	8001aca <__aeabi_dsub+0x2f6>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	4698      	mov	r8, r3
 8001d9e:	e736      	b.n	8001c0e <__aeabi_dsub+0x43a>
 8001da0:	1afc      	subs	r4, r7, r3
 8001da2:	42a7      	cmp	r7, r4
 8001da4:	41bf      	sbcs	r7, r7
 8001da6:	4663      	mov	r3, ip
 8001da8:	427f      	negs	r7, r7
 8001daa:	1ac9      	subs	r1, r1, r3
 8001dac:	1bcb      	subs	r3, r1, r7
 8001dae:	4699      	mov	r9, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	465d      	mov	r5, fp
 8001db4:	4698      	mov	r8, r3
 8001db6:	e55e      	b.n	8001876 <__aeabi_dsub+0xa2>
 8001db8:	074b      	lsls	r3, r1, #29
 8001dba:	08ff      	lsrs	r7, r7, #3
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	08cc      	lsrs	r4, r1, #3
 8001dc0:	e692      	b.n	8001ae8 <__aeabi_dsub+0x314>
 8001dc2:	1bdc      	subs	r4, r3, r7
 8001dc4:	4660      	mov	r0, ip
 8001dc6:	42a3      	cmp	r3, r4
 8001dc8:	41b6      	sbcs	r6, r6
 8001dca:	1a40      	subs	r0, r0, r1
 8001dcc:	4276      	negs	r6, r6
 8001dce:	1b80      	subs	r0, r0, r6
 8001dd0:	4681      	mov	r9, r0
 8001dd2:	0200      	lsls	r0, r0, #8
 8001dd4:	d560      	bpl.n	8001e98 <__aeabi_dsub+0x6c4>
 8001dd6:	1afc      	subs	r4, r7, r3
 8001dd8:	42a7      	cmp	r7, r4
 8001dda:	41bf      	sbcs	r7, r7
 8001ddc:	4663      	mov	r3, ip
 8001dde:	427f      	negs	r7, r7
 8001de0:	1ac9      	subs	r1, r1, r3
 8001de2:	1bcb      	subs	r3, r1, r7
 8001de4:	4699      	mov	r9, r3
 8001de6:	465d      	mov	r5, fp
 8001de8:	e576      	b.n	80018d8 <__aeabi_dsub+0x104>
 8001dea:	08ff      	lsrs	r7, r7, #3
 8001dec:	074b      	lsls	r3, r1, #29
 8001dee:	433b      	orrs	r3, r7
 8001df0:	08cc      	lsrs	r4, r1, #3
 8001df2:	e667      	b.n	8001ac4 <__aeabi_dsub+0x2f0>
 8001df4:	000a      	movs	r2, r1
 8001df6:	08db      	lsrs	r3, r3, #3
 8001df8:	433a      	orrs	r2, r7
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dsub+0x62a>
 8001dfc:	e66f      	b.n	8001ade <__aeabi_dsub+0x30a>
 8001dfe:	4662      	mov	r2, ip
 8001e00:	0752      	lsls	r2, r2, #29
 8001e02:	4313      	orrs	r3, r2
 8001e04:	4662      	mov	r2, ip
 8001e06:	08d4      	lsrs	r4, r2, #3
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	0312      	lsls	r2, r2, #12
 8001e0c:	4214      	tst	r4, r2
 8001e0e:	d007      	beq.n	8001e20 <__aeabi_dsub+0x64c>
 8001e10:	08c8      	lsrs	r0, r1, #3
 8001e12:	4210      	tst	r0, r2
 8001e14:	d104      	bne.n	8001e20 <__aeabi_dsub+0x64c>
 8001e16:	465d      	mov	r5, fp
 8001e18:	0004      	movs	r4, r0
 8001e1a:	08fb      	lsrs	r3, r7, #3
 8001e1c:	0749      	lsls	r1, r1, #29
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	0f5a      	lsrs	r2, r3, #29
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	0752      	lsls	r2, r2, #29
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	e65d      	b.n	8001ae8 <__aeabi_dsub+0x314>
 8001e2c:	074b      	lsls	r3, r1, #29
 8001e2e:	08ff      	lsrs	r7, r7, #3
 8001e30:	433b      	orrs	r3, r7
 8001e32:	08cc      	lsrs	r4, r1, #3
 8001e34:	e649      	b.n	8001aca <__aeabi_dsub+0x2f6>
 8001e36:	19dc      	adds	r4, r3, r7
 8001e38:	429c      	cmp	r4, r3
 8001e3a:	419b      	sbcs	r3, r3
 8001e3c:	4461      	add	r1, ip
 8001e3e:	4689      	mov	r9, r1
 8001e40:	425b      	negs	r3, r3
 8001e42:	4499      	add	r9, r3
 8001e44:	464b      	mov	r3, r9
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	d400      	bmi.n	8001e4c <__aeabi_dsub+0x678>
 8001e4a:	e631      	b.n	8001ab0 <__aeabi_dsub+0x2dc>
 8001e4c:	464a      	mov	r2, r9
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <__aeabi_dsub+0x6d8>)
 8001e50:	401a      	ands	r2, r3
 8001e52:	2301      	movs	r3, #1
 8001e54:	4691      	mov	r9, r2
 8001e56:	4698      	mov	r8, r3
 8001e58:	e62a      	b.n	8001ab0 <__aeabi_dsub+0x2dc>
 8001e5a:	0016      	movs	r6, r2
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	3e20      	subs	r6, #32
 8001e60:	40f4      	lsrs	r4, r6
 8001e62:	46a0      	mov	r8, r4
 8001e64:	2a20      	cmp	r2, #32
 8001e66:	d005      	beq.n	8001e74 <__aeabi_dsub+0x6a0>
 8001e68:	2640      	movs	r6, #64	; 0x40
 8001e6a:	4664      	mov	r4, ip
 8001e6c:	1ab2      	subs	r2, r6, r2
 8001e6e:	4094      	lsls	r4, r2
 8001e70:	4323      	orrs	r3, r4
 8001e72:	469a      	mov	sl, r3
 8001e74:	4654      	mov	r4, sl
 8001e76:	1e63      	subs	r3, r4, #1
 8001e78:	419c      	sbcs	r4, r3
 8001e7a:	4643      	mov	r3, r8
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	e5db      	b.n	8001a38 <__aeabi_dsub+0x264>
 8001e80:	0002      	movs	r2, r0
 8001e82:	2400      	movs	r4, #0
 8001e84:	2300      	movs	r3, #0
 8001e86:	e548      	b.n	800191a <__aeabi_dsub+0x146>
 8001e88:	19dc      	adds	r4, r3, r7
 8001e8a:	42bc      	cmp	r4, r7
 8001e8c:	41bf      	sbcs	r7, r7
 8001e8e:	4461      	add	r1, ip
 8001e90:	4689      	mov	r9, r1
 8001e92:	427f      	negs	r7, r7
 8001e94:	44b9      	add	r9, r7
 8001e96:	e738      	b.n	8001d0a <__aeabi_dsub+0x536>
 8001e98:	464b      	mov	r3, r9
 8001e9a:	4323      	orrs	r3, r4
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x6cc>
 8001e9e:	e69f      	b.n	8001be0 <__aeabi_dsub+0x40c>
 8001ea0:	e606      	b.n	8001ab0 <__aeabi_dsub+0x2dc>
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	000007fe 	.word	0x000007fe
 8001ea8:	000007ff 	.word	0x000007ff
 8001eac:	ff7fffff 	.word	0xff7fffff
 8001eb0:	08ff      	lsrs	r7, r7, #3
 8001eb2:	074b      	lsls	r3, r1, #29
 8001eb4:	433b      	orrs	r3, r7
 8001eb6:	08cc      	lsrs	r4, r1, #3
 8001eb8:	e616      	b.n	8001ae8 <__aeabi_dsub+0x314>
 8001eba:	4662      	mov	r2, ip
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	0752      	lsls	r2, r2, #29
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	4662      	mov	r2, ip
 8001ec4:	08d4      	lsrs	r4, r2, #3
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	0312      	lsls	r2, r2, #12
 8001eca:	4214      	tst	r4, r2
 8001ecc:	d007      	beq.n	8001ede <__aeabi_dsub+0x70a>
 8001ece:	08c8      	lsrs	r0, r1, #3
 8001ed0:	4210      	tst	r0, r2
 8001ed2:	d104      	bne.n	8001ede <__aeabi_dsub+0x70a>
 8001ed4:	465d      	mov	r5, fp
 8001ed6:	0004      	movs	r4, r0
 8001ed8:	08fb      	lsrs	r3, r7, #3
 8001eda:	0749      	lsls	r1, r1, #29
 8001edc:	430b      	orrs	r3, r1
 8001ede:	0f5a      	lsrs	r2, r3, #29
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	0752      	lsls	r2, r2, #29
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	e5fe      	b.n	8001ae8 <__aeabi_dsub+0x314>
 8001eea:	2300      	movs	r3, #0
 8001eec:	4a01      	ldr	r2, [pc, #4]	; (8001ef4 <__aeabi_dsub+0x720>)
 8001eee:	001c      	movs	r4, r3
 8001ef0:	e513      	b.n	800191a <__aeabi_dsub+0x146>
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	000007ff 	.word	0x000007ff

08001ef8 <__aeabi_dcmpun>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	0005      	movs	r5, r0
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <__aeabi_dcmpun+0x38>)
 8001efe:	031c      	lsls	r4, r3, #12
 8001f00:	0016      	movs	r6, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	030a      	lsls	r2, r1, #12
 8001f06:	0049      	lsls	r1, r1, #1
 8001f08:	0b12      	lsrs	r2, r2, #12
 8001f0a:	0d49      	lsrs	r1, r1, #21
 8001f0c:	0b24      	lsrs	r4, r4, #12
 8001f0e:	0d5b      	lsrs	r3, r3, #21
 8001f10:	4281      	cmp	r1, r0
 8001f12:	d008      	beq.n	8001f26 <__aeabi_dcmpun+0x2e>
 8001f14:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <__aeabi_dcmpun+0x38>)
 8001f16:	2000      	movs	r0, #0
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d103      	bne.n	8001f24 <__aeabi_dcmpun+0x2c>
 8001f1c:	0020      	movs	r0, r4
 8001f1e:	4330      	orrs	r0, r6
 8001f20:	1e43      	subs	r3, r0, #1
 8001f22:	4198      	sbcs	r0, r3
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
 8001f26:	2001      	movs	r0, #1
 8001f28:	432a      	orrs	r2, r5
 8001f2a:	d1fb      	bne.n	8001f24 <__aeabi_dcmpun+0x2c>
 8001f2c:	e7f2      	b.n	8001f14 <__aeabi_dcmpun+0x1c>
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	000007ff 	.word	0x000007ff

08001f34 <__aeabi_d2iz>:
 8001f34:	000a      	movs	r2, r1
 8001f36:	b530      	push	{r4, r5, lr}
 8001f38:	4c13      	ldr	r4, [pc, #76]	; (8001f88 <__aeabi_d2iz+0x54>)
 8001f3a:	0053      	lsls	r3, r2, #1
 8001f3c:	0309      	lsls	r1, r1, #12
 8001f3e:	0005      	movs	r5, r0
 8001f40:	0b09      	lsrs	r1, r1, #12
 8001f42:	2000      	movs	r0, #0
 8001f44:	0d5b      	lsrs	r3, r3, #21
 8001f46:	0fd2      	lsrs	r2, r2, #31
 8001f48:	42a3      	cmp	r3, r4
 8001f4a:	dd04      	ble.n	8001f56 <__aeabi_d2iz+0x22>
 8001f4c:	480f      	ldr	r0, [pc, #60]	; (8001f8c <__aeabi_d2iz+0x58>)
 8001f4e:	4283      	cmp	r3, r0
 8001f50:	dd02      	ble.n	8001f58 <__aeabi_d2iz+0x24>
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <__aeabi_d2iz+0x5c>)
 8001f54:	18d0      	adds	r0, r2, r3
 8001f56:	bd30      	pop	{r4, r5, pc}
 8001f58:	2080      	movs	r0, #128	; 0x80
 8001f5a:	0340      	lsls	r0, r0, #13
 8001f5c:	4301      	orrs	r1, r0
 8001f5e:	480d      	ldr	r0, [pc, #52]	; (8001f94 <__aeabi_d2iz+0x60>)
 8001f60:	1ac0      	subs	r0, r0, r3
 8001f62:	281f      	cmp	r0, #31
 8001f64:	dd08      	ble.n	8001f78 <__aeabi_d2iz+0x44>
 8001f66:	480c      	ldr	r0, [pc, #48]	; (8001f98 <__aeabi_d2iz+0x64>)
 8001f68:	1ac3      	subs	r3, r0, r3
 8001f6a:	40d9      	lsrs	r1, r3
 8001f6c:	000b      	movs	r3, r1
 8001f6e:	4258      	negs	r0, r3
 8001f70:	2a00      	cmp	r2, #0
 8001f72:	d1f0      	bne.n	8001f56 <__aeabi_d2iz+0x22>
 8001f74:	0018      	movs	r0, r3
 8001f76:	e7ee      	b.n	8001f56 <__aeabi_d2iz+0x22>
 8001f78:	4c08      	ldr	r4, [pc, #32]	; (8001f9c <__aeabi_d2iz+0x68>)
 8001f7a:	40c5      	lsrs	r5, r0
 8001f7c:	46a4      	mov	ip, r4
 8001f7e:	4463      	add	r3, ip
 8001f80:	4099      	lsls	r1, r3
 8001f82:	000b      	movs	r3, r1
 8001f84:	432b      	orrs	r3, r5
 8001f86:	e7f2      	b.n	8001f6e <__aeabi_d2iz+0x3a>
 8001f88:	000003fe 	.word	0x000003fe
 8001f8c:	0000041d 	.word	0x0000041d
 8001f90:	7fffffff 	.word	0x7fffffff
 8001f94:	00000433 	.word	0x00000433
 8001f98:	00000413 	.word	0x00000413
 8001f9c:	fffffbed 	.word	0xfffffbed

08001fa0 <__aeabi_i2d>:
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d016      	beq.n	8001fd4 <__aeabi_i2d+0x34>
 8001fa6:	17c3      	asrs	r3, r0, #31
 8001fa8:	18c5      	adds	r5, r0, r3
 8001faa:	405d      	eors	r5, r3
 8001fac:	0fc4      	lsrs	r4, r0, #31
 8001fae:	0028      	movs	r0, r5
 8001fb0:	f000 f8f6 	bl	80021a0 <__clzsi2>
 8001fb4:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <__aeabi_i2d+0x5c>)
 8001fb6:	1a12      	subs	r2, r2, r0
 8001fb8:	280a      	cmp	r0, #10
 8001fba:	dc16      	bgt.n	8001fea <__aeabi_i2d+0x4a>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	002e      	movs	r6, r5
 8001fc0:	3315      	adds	r3, #21
 8001fc2:	409e      	lsls	r6, r3
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	1a18      	subs	r0, r3, r0
 8001fc8:	40c5      	lsrs	r5, r0
 8001fca:	0552      	lsls	r2, r2, #21
 8001fcc:	032d      	lsls	r5, r5, #12
 8001fce:	0b2d      	lsrs	r5, r5, #12
 8001fd0:	0d53      	lsrs	r3, r2, #21
 8001fd2:	e003      	b.n	8001fdc <__aeabi_i2d+0x3c>
 8001fd4:	2400      	movs	r4, #0
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2500      	movs	r5, #0
 8001fda:	2600      	movs	r6, #0
 8001fdc:	051b      	lsls	r3, r3, #20
 8001fde:	432b      	orrs	r3, r5
 8001fe0:	07e4      	lsls	r4, r4, #31
 8001fe2:	4323      	orrs	r3, r4
 8001fe4:	0030      	movs	r0, r6
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
 8001fea:	380b      	subs	r0, #11
 8001fec:	4085      	lsls	r5, r0
 8001fee:	0552      	lsls	r2, r2, #21
 8001ff0:	032d      	lsls	r5, r5, #12
 8001ff2:	2600      	movs	r6, #0
 8001ff4:	0b2d      	lsrs	r5, r5, #12
 8001ff6:	0d53      	lsrs	r3, r2, #21
 8001ff8:	e7f0      	b.n	8001fdc <__aeabi_i2d+0x3c>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	0000041e 	.word	0x0000041e

08002000 <__aeabi_f2d>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0043      	lsls	r3, r0, #1
 8002004:	0246      	lsls	r6, r0, #9
 8002006:	0fc4      	lsrs	r4, r0, #31
 8002008:	20fe      	movs	r0, #254	; 0xfe
 800200a:	0e1b      	lsrs	r3, r3, #24
 800200c:	1c59      	adds	r1, r3, #1
 800200e:	0a75      	lsrs	r5, r6, #9
 8002010:	4208      	tst	r0, r1
 8002012:	d00c      	beq.n	800202e <__aeabi_f2d+0x2e>
 8002014:	22e0      	movs	r2, #224	; 0xe0
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4694      	mov	ip, r2
 800201a:	076d      	lsls	r5, r5, #29
 800201c:	0b36      	lsrs	r6, r6, #12
 800201e:	4463      	add	r3, ip
 8002020:	051b      	lsls	r3, r3, #20
 8002022:	4333      	orrs	r3, r6
 8002024:	07e4      	lsls	r4, r4, #31
 8002026:	4323      	orrs	r3, r4
 8002028:	0028      	movs	r0, r5
 800202a:	0019      	movs	r1, r3
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	2b00      	cmp	r3, #0
 8002030:	d114      	bne.n	800205c <__aeabi_f2d+0x5c>
 8002032:	2d00      	cmp	r5, #0
 8002034:	d01b      	beq.n	800206e <__aeabi_f2d+0x6e>
 8002036:	0028      	movs	r0, r5
 8002038:	f000 f8b2 	bl	80021a0 <__clzsi2>
 800203c:	280a      	cmp	r0, #10
 800203e:	dc1c      	bgt.n	800207a <__aeabi_f2d+0x7a>
 8002040:	230b      	movs	r3, #11
 8002042:	002e      	movs	r6, r5
 8002044:	1a1b      	subs	r3, r3, r0
 8002046:	40de      	lsrs	r6, r3
 8002048:	0003      	movs	r3, r0
 800204a:	3315      	adds	r3, #21
 800204c:	409d      	lsls	r5, r3
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <__aeabi_f2d+0x88>)
 8002050:	0336      	lsls	r6, r6, #12
 8002052:	1a12      	subs	r2, r2, r0
 8002054:	0552      	lsls	r2, r2, #21
 8002056:	0b36      	lsrs	r6, r6, #12
 8002058:	0d53      	lsrs	r3, r2, #21
 800205a:	e7e1      	b.n	8002020 <__aeabi_f2d+0x20>
 800205c:	2d00      	cmp	r5, #0
 800205e:	d009      	beq.n	8002074 <__aeabi_f2d+0x74>
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	0b36      	lsrs	r6, r6, #12
 8002064:	0312      	lsls	r2, r2, #12
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <__aeabi_f2d+0x8c>)
 8002068:	076d      	lsls	r5, r5, #29
 800206a:	4316      	orrs	r6, r2
 800206c:	e7d8      	b.n	8002020 <__aeabi_f2d+0x20>
 800206e:	2300      	movs	r3, #0
 8002070:	2600      	movs	r6, #0
 8002072:	e7d5      	b.n	8002020 <__aeabi_f2d+0x20>
 8002074:	2600      	movs	r6, #0
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <__aeabi_f2d+0x8c>)
 8002078:	e7d2      	b.n	8002020 <__aeabi_f2d+0x20>
 800207a:	0003      	movs	r3, r0
 800207c:	3b0b      	subs	r3, #11
 800207e:	409d      	lsls	r5, r3
 8002080:	002e      	movs	r6, r5
 8002082:	2500      	movs	r5, #0
 8002084:	e7e3      	b.n	800204e <__aeabi_f2d+0x4e>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	00000389 	.word	0x00000389
 800208c:	000007ff 	.word	0x000007ff

08002090 <__aeabi_d2f>:
 8002090:	0002      	movs	r2, r0
 8002092:	004b      	lsls	r3, r1, #1
 8002094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002096:	0d5b      	lsrs	r3, r3, #21
 8002098:	030c      	lsls	r4, r1, #12
 800209a:	4e3d      	ldr	r6, [pc, #244]	; (8002190 <__aeabi_d2f+0x100>)
 800209c:	0a64      	lsrs	r4, r4, #9
 800209e:	0f40      	lsrs	r0, r0, #29
 80020a0:	1c5f      	adds	r7, r3, #1
 80020a2:	0fc9      	lsrs	r1, r1, #31
 80020a4:	4304      	orrs	r4, r0
 80020a6:	00d5      	lsls	r5, r2, #3
 80020a8:	4237      	tst	r7, r6
 80020aa:	d00a      	beq.n	80020c2 <__aeabi_d2f+0x32>
 80020ac:	4839      	ldr	r0, [pc, #228]	; (8002194 <__aeabi_d2f+0x104>)
 80020ae:	181e      	adds	r6, r3, r0
 80020b0:	2efe      	cmp	r6, #254	; 0xfe
 80020b2:	dd16      	ble.n	80020e2 <__aeabi_d2f+0x52>
 80020b4:	20ff      	movs	r0, #255	; 0xff
 80020b6:	2400      	movs	r4, #0
 80020b8:	05c0      	lsls	r0, r0, #23
 80020ba:	4320      	orrs	r0, r4
 80020bc:	07c9      	lsls	r1, r1, #31
 80020be:	4308      	orrs	r0, r1
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <__aeabi_d2f+0x44>
 80020c6:	432c      	orrs	r4, r5
 80020c8:	d026      	beq.n	8002118 <__aeabi_d2f+0x88>
 80020ca:	2205      	movs	r2, #5
 80020cc:	0192      	lsls	r2, r2, #6
 80020ce:	0a54      	lsrs	r4, r2, #9
 80020d0:	b2d8      	uxtb	r0, r3
 80020d2:	e7f1      	b.n	80020b8 <__aeabi_d2f+0x28>
 80020d4:	4325      	orrs	r5, r4
 80020d6:	d0ed      	beq.n	80020b4 <__aeabi_d2f+0x24>
 80020d8:	2080      	movs	r0, #128	; 0x80
 80020da:	03c0      	lsls	r0, r0, #15
 80020dc:	4304      	orrs	r4, r0
 80020de:	20ff      	movs	r0, #255	; 0xff
 80020e0:	e7ea      	b.n	80020b8 <__aeabi_d2f+0x28>
 80020e2:	2e00      	cmp	r6, #0
 80020e4:	dd1b      	ble.n	800211e <__aeabi_d2f+0x8e>
 80020e6:	0192      	lsls	r2, r2, #6
 80020e8:	1e53      	subs	r3, r2, #1
 80020ea:	419a      	sbcs	r2, r3
 80020ec:	00e4      	lsls	r4, r4, #3
 80020ee:	0f6d      	lsrs	r5, r5, #29
 80020f0:	4322      	orrs	r2, r4
 80020f2:	432a      	orrs	r2, r5
 80020f4:	0753      	lsls	r3, r2, #29
 80020f6:	d048      	beq.n	800218a <__aeabi_d2f+0xfa>
 80020f8:	230f      	movs	r3, #15
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d000      	beq.n	8002102 <__aeabi_d2f+0x72>
 8002100:	3204      	adds	r2, #4
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	04db      	lsls	r3, r3, #19
 8002106:	4013      	ands	r3, r2
 8002108:	d03f      	beq.n	800218a <__aeabi_d2f+0xfa>
 800210a:	1c70      	adds	r0, r6, #1
 800210c:	2efe      	cmp	r6, #254	; 0xfe
 800210e:	d0d1      	beq.n	80020b4 <__aeabi_d2f+0x24>
 8002110:	0192      	lsls	r2, r2, #6
 8002112:	0a54      	lsrs	r4, r2, #9
 8002114:	b2c0      	uxtb	r0, r0
 8002116:	e7cf      	b.n	80020b8 <__aeabi_d2f+0x28>
 8002118:	2000      	movs	r0, #0
 800211a:	2400      	movs	r4, #0
 800211c:	e7cc      	b.n	80020b8 <__aeabi_d2f+0x28>
 800211e:	0032      	movs	r2, r6
 8002120:	3217      	adds	r2, #23
 8002122:	db22      	blt.n	800216a <__aeabi_d2f+0xda>
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	0400      	lsls	r0, r0, #16
 8002128:	4320      	orrs	r0, r4
 800212a:	241e      	movs	r4, #30
 800212c:	1ba4      	subs	r4, r4, r6
 800212e:	2c1f      	cmp	r4, #31
 8002130:	dd1d      	ble.n	800216e <__aeabi_d2f+0xde>
 8002132:	2202      	movs	r2, #2
 8002134:	4252      	negs	r2, r2
 8002136:	1b96      	subs	r6, r2, r6
 8002138:	0002      	movs	r2, r0
 800213a:	40f2      	lsrs	r2, r6
 800213c:	0016      	movs	r6, r2
 800213e:	2c20      	cmp	r4, #32
 8002140:	d004      	beq.n	800214c <__aeabi_d2f+0xbc>
 8002142:	4a15      	ldr	r2, [pc, #84]	; (8002198 <__aeabi_d2f+0x108>)
 8002144:	4694      	mov	ip, r2
 8002146:	4463      	add	r3, ip
 8002148:	4098      	lsls	r0, r3
 800214a:	4305      	orrs	r5, r0
 800214c:	002a      	movs	r2, r5
 800214e:	1e53      	subs	r3, r2, #1
 8002150:	419a      	sbcs	r2, r3
 8002152:	4332      	orrs	r2, r6
 8002154:	2600      	movs	r6, #0
 8002156:	0753      	lsls	r3, r2, #29
 8002158:	d1ce      	bne.n	80020f8 <__aeabi_d2f+0x68>
 800215a:	2480      	movs	r4, #128	; 0x80
 800215c:	0013      	movs	r3, r2
 800215e:	04e4      	lsls	r4, r4, #19
 8002160:	2001      	movs	r0, #1
 8002162:	4023      	ands	r3, r4
 8002164:	4222      	tst	r2, r4
 8002166:	d1d3      	bne.n	8002110 <__aeabi_d2f+0x80>
 8002168:	e7b0      	b.n	80020cc <__aeabi_d2f+0x3c>
 800216a:	2300      	movs	r3, #0
 800216c:	e7ad      	b.n	80020ca <__aeabi_d2f+0x3a>
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <__aeabi_d2f+0x10c>)
 8002170:	4694      	mov	ip, r2
 8002172:	002a      	movs	r2, r5
 8002174:	40e2      	lsrs	r2, r4
 8002176:	0014      	movs	r4, r2
 8002178:	002a      	movs	r2, r5
 800217a:	4463      	add	r3, ip
 800217c:	409a      	lsls	r2, r3
 800217e:	4098      	lsls	r0, r3
 8002180:	1e55      	subs	r5, r2, #1
 8002182:	41aa      	sbcs	r2, r5
 8002184:	4302      	orrs	r2, r0
 8002186:	4322      	orrs	r2, r4
 8002188:	e7e4      	b.n	8002154 <__aeabi_d2f+0xc4>
 800218a:	0033      	movs	r3, r6
 800218c:	e79e      	b.n	80020cc <__aeabi_d2f+0x3c>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	000007fe 	.word	0x000007fe
 8002194:	fffffc80 	.word	0xfffffc80
 8002198:	fffffca2 	.word	0xfffffca2
 800219c:	fffffc82 	.word	0xfffffc82

080021a0 <__clzsi2>:
 80021a0:	211c      	movs	r1, #28
 80021a2:	2301      	movs	r3, #1
 80021a4:	041b      	lsls	r3, r3, #16
 80021a6:	4298      	cmp	r0, r3
 80021a8:	d301      	bcc.n	80021ae <__clzsi2+0xe>
 80021aa:	0c00      	lsrs	r0, r0, #16
 80021ac:	3910      	subs	r1, #16
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	4298      	cmp	r0, r3
 80021b2:	d301      	bcc.n	80021b8 <__clzsi2+0x18>
 80021b4:	0a00      	lsrs	r0, r0, #8
 80021b6:	3908      	subs	r1, #8
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	4298      	cmp	r0, r3
 80021bc:	d301      	bcc.n	80021c2 <__clzsi2+0x22>
 80021be:	0900      	lsrs	r0, r0, #4
 80021c0:	3904      	subs	r1, #4
 80021c2:	a202      	add	r2, pc, #8	; (adr r2, 80021cc <__clzsi2+0x2c>)
 80021c4:	5c10      	ldrb	r0, [r2, r0]
 80021c6:	1840      	adds	r0, r0, r1
 80021c8:	4770      	bx	lr
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	02020304 	.word	0x02020304
 80021d0:	01010101 	.word	0x01010101
	...

080021dc <OledSetCursor>:
**		is clamped to be on the display.
*/

void
OledSetCursor(int xch, int ych)
	{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]

	/* Clamp the specified location to the display surface
	*/
	if (xch >= xchOledMax) {
 80021e6:	4b14      	ldr	r3, [pc, #80]	; (8002238 <OledSetCursor+0x5c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	db03      	blt.n	80021f8 <OledSetCursor+0x1c>
		xch = xchOledMax-1;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <OledSetCursor+0x5c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
	}

	if (ych >= ychOledMax) {
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <OledSetCursor+0x60>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	db03      	blt.n	800220a <OledSetCursor+0x2e>
		ych = ychOledMax-1;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <OledSetCursor+0x60>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3b01      	subs	r3, #1
 8002208:	603b      	str	r3, [r7, #0]
	}

	/* Save the given character location.
	*/
	xchOledCur = xch;
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <OledSetCursor+0x64>)
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	601a      	str	r2, [r3, #0]
	ychOledCur = ych;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <OledSetCursor+0x68>)
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	601a      	str	r2, [r3, #0]

	/* Convert the character location to a frame buffer address.
	*/
	OledMoveTo(xch*dxcoOledFontCur, ych*dycoOledFontCur);
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <OledSetCursor+0x6c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	435a      	muls	r2, r3
 800221e:	0010      	movs	r0, r2
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <OledSetCursor+0x70>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	4353      	muls	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	f000 fa3f 	bl	80026ac <OledMoveTo>

}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	20000094 	.word	0x20000094
 800223c:	20000098 	.word	0x20000098
 8002240:	2000008c 	.word	0x2000008c
 8002244:	20000090 	.word	0x20000090
 8002248:	200001b8 	.word	0x200001b8
 800224c:	200001bc 	.word	0x200001bc

08002250 <OledPutChar>:
**		cursor position and advance the cursor.
*/

void
OledPutChar(char ch)
	{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	0002      	movs	r2, r0
 8002258:	1dfb      	adds	r3, r7, #7
 800225a:	701a      	strb	r2, [r3, #0]

	OledDrawGlyph(ch);
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	0018      	movs	r0, r3
 8002262:	f000 f82f 	bl	80022c4 <OledDrawGlyph>
	OledAdvanceCursor();
 8002266:	f000 f875 	bl	8002354 <OledAdvanceCursor>
	if (fOledCharUpdate) {
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <OledPutChar+0x30>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <OledPutChar+0x26>
		OledUpdate();
 8002272:	f000 f999 	bl	80025a8 <OledUpdate>
	}

}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b002      	add	sp, #8
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	200001b4 	.word	0x200001b4

08002284 <OledPutString>:
**		display and advance the cursor.
*/

void
OledPutString(char * sz)
	{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

	while (*sz != '\0') {
 800228c:	e009      	b.n	80022a2 <OledPutString+0x1e>
		OledDrawGlyph(*sz);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	0018      	movs	r0, r3
 8002294:	f000 f816 	bl	80022c4 <OledDrawGlyph>
		OledAdvanceCursor();
 8002298:	f000 f85c 	bl	8002354 <OledAdvanceCursor>
		sz += 1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3301      	adds	r3, #1
 80022a0:	607b      	str	r3, [r7, #4]
	while (*sz != '\0') {
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f1      	bne.n	800228e <OledPutString+0xa>
	}

	if (fOledCharUpdate) {
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <OledPutString+0x3c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <OledPutString+0x32>
		OledUpdate();
 80022b2:	f000 f979 	bl	80025a8 <OledUpdate>
	}

}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b002      	add	sp, #8
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	200001b4 	.word	0x200001b4

080022c4 <OledDrawGlyph>:
**		current drawing position in the display buffer.
*/

void
OledDrawGlyph(char ch)
	{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	0002      	movs	r2, r0
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	701a      	strb	r2, [r3, #0]
	uint8_t *	pbFont;
	uint8_t *	pbBmp;
	int		ib;

	if ((ch & 0x80) != 0) {
 80022d0:	1dfb      	adds	r3, r7, #7
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b25b      	sxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db2f      	blt.n	800233a <OledDrawGlyph+0x76>
		return;
	}

	if (ch < chOledUserMax) {
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b1f      	cmp	r3, #31
 80022e0:	d807      	bhi.n	80022f2 <OledDrawGlyph+0x2e>
		pbFont = pbOledFontUser + ch*cbOledChar;
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <OledDrawGlyph+0x80>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1dfa      	adds	r2, r7, #7
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	00d2      	lsls	r2, r2, #3
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	e00c      	b.n	800230c <OledDrawGlyph+0x48>
	}
	else if ((ch & 0x80) == 0) {
 80022f2:	1dfb      	adds	r3, r7, #7
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b25b      	sxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db07      	blt.n	800230c <OledDrawGlyph+0x48>
		pbFont = pbOledFontCur + (ch-chOledUserMax) * cbOledChar;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <OledDrawGlyph+0x84>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1dfa      	adds	r2, r7, #7
 8002302:	7812      	ldrb	r2, [r2, #0]
 8002304:	3a20      	subs	r2, #32
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	189b      	adds	r3, r3, r2
 800230a:	617b      	str	r3, [r7, #20]
	}

	pbBmp = pbOledCur;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <OledDrawGlyph+0x88>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	613b      	str	r3, [r7, #16]

	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e00a      	b.n	800232e <OledDrawGlyph+0x6a>
		*pbBmp++ = *pbFont++;
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	1c53      	adds	r3, r2, #1
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1c59      	adds	r1, r3, #1
 8002322:	6139      	str	r1, [r7, #16]
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	701a      	strb	r2, [r3, #0]
	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3301      	adds	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <OledDrawGlyph+0x8c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	dbef      	blt.n	8002318 <OledDrawGlyph+0x54>
 8002338:	e000      	b.n	800233c <OledDrawGlyph+0x78>
		return;
 800233a:	46c0      	nop			; (mov r8, r8)
	}

}
 800233c:	46bd      	mov	sp, r7
 800233e:	b006      	add	sp, #24
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	200001c4 	.word	0x200001c4
 8002348:	200001c0 	.word	0x200001c0
 800234c:	200001a4 	.word	0x200001a4
 8002350:	200001b8 	.word	0x200001b8

08002354 <OledAdvanceCursor>:
**		end of the display.
*/

void
OledAdvanceCursor()
	{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

	xchOledCur += 1;
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <OledAdvanceCursor+0x54>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <OledAdvanceCursor+0x54>)
 8002360:	601a      	str	r2, [r3, #0]
	if (xchOledCur >= xchOledMax) {
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <OledAdvanceCursor+0x54>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <OledAdvanceCursor+0x58>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	db07      	blt.n	800237e <OledAdvanceCursor+0x2a>
		xchOledCur = 0;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <OledAdvanceCursor+0x54>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
		ychOledCur += 1;
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <OledAdvanceCursor+0x5c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <OledAdvanceCursor+0x5c>)
 800237c:	601a      	str	r2, [r3, #0]
	}
	if (ychOledCur >= ychOledMax) {
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <OledAdvanceCursor+0x5c>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <OledAdvanceCursor+0x60>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	db02      	blt.n	8002390 <OledAdvanceCursor+0x3c>
		ychOledCur = 0;
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <OledAdvanceCursor+0x5c>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
	}

	OledSetCursor(xchOledCur, ychOledCur);
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <OledAdvanceCursor+0x54>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <OledAdvanceCursor+0x5c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0019      	movs	r1, r3
 800239a:	0010      	movs	r0, r2
 800239c:	f7ff ff1e 	bl	80021dc <OledSetCursor>

}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	2000008c 	.word	0x2000008c
 80023ac:	20000094 	.word	0x20000094
 80023b0:	20000090 	.word	0x20000090
 80023b4:	20000098 	.word	0x20000098

080023b8 <OledInit>:
**		Initialize the OLED display subsystem.
*/

void
OledInit()
	{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0

	/* Init the PIC32 peripherals used to talk to the display.
	*/
	OledHostInit();
 80023bc:	f000 f809 	bl	80023d2 <OledHostInit>

	/* Init the memory variables used to control access to the
	** display.
	*/
	OledDvrInit();
 80023c0:	f000 f82a 	bl	8002418 <OledDvrInit>

	/* Init the OLED display hardware.
	*/
	OledDevInit();
 80023c4:	f000 f886 	bl	80024d4 <OledDevInit>

	/* Clear the display.
	*/
	OledClear();
 80023c8:	f000 f8c8 	bl	800255c <OledClear>

}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <OledHostInit>:
**		SPI2. This needs to be generalized.
*/

void
OledHostInit()
	{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0

	//pinMode(DataCmd, OUTPUT);
	//pinMode(VbatCtrl, OUTPUT);
	//pinMode(VddCtrl, OUTPUT);

	digitalWrite(DataCmd, HIGH);
 80023d6:	2302      	movs	r3, #2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2101      	movs	r1, #1
 80023dc:	0018      	movs	r0, r3
 80023de:	f000 f94f 	bl	8002680 <digitalWrite>
	digitalWrite(VbatCtrl, HIGH);
 80023e2:	2308      	movs	r3, #8
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2101      	movs	r1, #1
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 f949 	bl	8002680 <digitalWrite>
	digitalWrite(VddCtrl, HIGH);
 80023ee:	2310      	movs	r3, #16
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2101      	movs	r1, #1
 80023f4:	0018      	movs	r0, r3
 80023f6:	f000 f943 	bl	8002680 <digitalWrite>

	// pinMode(Reset, OUTPUT);
	digitalWrite(Reset, HIGH);
 80023fa:	2304      	movs	r3, #4
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2101      	movs	r1, #1
 8002400:	0018      	movs	r0, r3
 8002402:	f000 f93d 	bl	8002680 <digitalWrite>


	digitalWrite(ChipSelect, LOW); //spiCon.setSelect(LOW);
 8002406:	2301      	movs	r3, #1
 8002408:	b29b      	uxth	r3, r3
 800240a:	2100      	movs	r1, #0
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f937 	bl	8002680 <digitalWrite>

}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <OledDvrInit>:
**		Initialize the OLED software system
*/

void
OledDvrInit()
	{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
	int		ib;

	/* Init the parameters for the default font
	*/
	dxcoOledFontCur = cbOledChar;
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <OledDvrInit+0x8c>)
 8002420:	2208      	movs	r2, #8
 8002422:	601a      	str	r2, [r3, #0]
	dycoOledFontCur = 8;
 8002424:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <OledDvrInit+0x90>)
 8002426:	2208      	movs	r2, #8
 8002428:	601a      	str	r2, [r3, #0]
	pbOledFontCur = (uint8_t*)rgbOledFont0;
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <OledDvrInit+0x94>)
 800242c:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <OledDvrInit+0x98>)
 800242e:	601a      	str	r2, [r3, #0]
	pbOledFontUser = rgbOledFontUser;
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <OledDvrInit+0x9c>)
 8002432:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <OledDvrInit+0xa0>)
 8002434:	601a      	str	r2, [r3, #0]

	for (ib = 0; ib < cbOledFontUser; ib++) {
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	e007      	b.n	800244c <OledDvrInit+0x34>
		rgbOledFontUser[ib] = 0;
 800243c:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <OledDvrInit+0xa0>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	18d3      	adds	r3, r2, r3
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
	for (ib = 0; ib < cbOledFontUser; ib++) {
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3301      	adds	r3, #1
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2bff      	cmp	r3, #255	; 0xff
 8002450:	ddf4      	ble.n	800243c <OledDvrInit+0x24>
	}

	xchOledMax = ccolOledMax / dxcoOledFontCur;
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <OledDvrInit+0x8c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0019      	movs	r1, r3
 8002458:	2080      	movs	r0, #128	; 0x80
 800245a:	f7fd fee7 	bl	800022c <__divsi3>
 800245e:	0003      	movs	r3, r0
 8002460:	001a      	movs	r2, r3
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <OledDvrInit+0xa4>)
 8002464:	601a      	str	r2, [r3, #0]
	ychOledMax = crowOledMax / dycoOledFontCur;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <OledDvrInit+0x90>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0019      	movs	r1, r3
 800246c:	2020      	movs	r0, #32
 800246e:	f7fd fedd 	bl	800022c <__divsi3>
 8002472:	0003      	movs	r3, r0
 8002474:	001a      	movs	r2, r3
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <OledDvrInit+0xa8>)
 8002478:	601a      	str	r2, [r3, #0]

	/* Set the default character cursor position.
	*/
	OledSetCursor(0, 0);
 800247a:	2100      	movs	r1, #0
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff fead 	bl	80021dc <OledSetCursor>

	/* Set the default foreground draw color and fill pattern
	*/
	clrOledCur = 0x01;
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <OledDvrInit+0xac>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
	pbOledPatCur = (uint8_t*)rgbFillPat;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <OledDvrInit+0xb0>)
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <OledDvrInit+0xb4>)
 800248c:	601a      	str	r2, [r3, #0]
	OledSetDrawMode(modOledSet);
 800248e:	2000      	movs	r0, #0
 8002490:	f000 f942 	bl	8002718 <OledSetDrawMode>

	/* Default the character routines to automaticall
	** update the display.
	*/
	fOledCharUpdate = 1;
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <OledDvrInit+0xb8>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	200001b8 	.word	0x200001b8
 80024a8:	200001bc 	.word	0x200001bc
 80024ac:	200001c0 	.word	0x200001c0
 80024b0:	08007a1c 	.word	0x08007a1c
 80024b4:	200001c4 	.word	0x200001c4
 80024b8:	2000009c 	.word	0x2000009c
 80024bc:	20000094 	.word	0x20000094
 80024c0:	20000098 	.word	0x20000098
 80024c4:	200001ac 	.word	0x200001ac
 80024c8:	200001b0 	.word	0x200001b0
 80024cc:	08007d1c 	.word	0x08007d1c
 80024d0:	200001b4 	.word	0x200001b4

080024d4 <OledDevInit>:
**		Initialize the OLED display controller and turn the display on.
*/

void
OledDevInit()
	{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0

	/* We're going to be sending commands, so clear the Data/Cmd bit
	*/
	digitalWrite(DataCmd, LOW);
 80024d8:	2302      	movs	r3, #2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2100      	movs	r1, #0
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 f8ce 	bl	8002680 <digitalWrite>

	/* Start by turning VDD on and wait a while for the power to come up.
	*/
	digitalWrite(VddCtrl, LOW);
 80024e4:	2310      	movs	r3, #16
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2100      	movs	r1, #0
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f8c8 	bl	8002680 <digitalWrite>
	HAL_Delay(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f002 f821 	bl	8004538 <HAL_Delay>
	//delay(1);

	/* Display off command
	*/
	Spi2PutByte(cmdOledDisplayOff);
 80024f6:	20ae      	movs	r0, #174	; 0xae
 80024f8:	f000 f8ae 	bl	8002658 <Spi2PutByte>

	/* Bring Reset low and then high
	*/
	digitalWrite(Reset, LOW);
 80024fc:	2304      	movs	r3, #4
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2100      	movs	r1, #0
 8002502:	0018      	movs	r0, r3
 8002504:	f000 f8bc 	bl	8002680 <digitalWrite>
	//delay(1);
	digitalWrite(Reset, HIGH);
 8002508:	2304      	movs	r3, #4
 800250a:	b29b      	uxth	r3, r3
 800250c:	2101      	movs	r1, #1
 800250e:	0018      	movs	r0, r3
 8002510:	f000 f8b6 	bl	8002680 <digitalWrite>

	/* Send the Set Charge Pump and Set Pre-Charge Period commands
	*/
	Spi2PutByte(0x8D);		//From Univision data sheet, not in SSD1306 data sheet
 8002514:	208d      	movs	r0, #141	; 0x8d
 8002516:	f000 f89f 	bl	8002658 <Spi2PutByte>
	Spi2PutByte(0x14);
 800251a:	2014      	movs	r0, #20
 800251c:	f000 f89c 	bl	8002658 <Spi2PutByte>

	Spi2PutByte(0xD9);		//From Univision data sheet, not in SSD1306 data sheet
 8002520:	20d9      	movs	r0, #217	; 0xd9
 8002522:	f000 f899 	bl	8002658 <Spi2PutByte>
	Spi2PutByte(0xF1);
 8002526:	20f1      	movs	r0, #241	; 0xf1
 8002528:	f000 f896 	bl	8002658 <Spi2PutByte>

	/* Turn on VCC and wait 100ms
	*/
	digitalWrite(VbatCtrl, LOW);
 800252c:	2308      	movs	r3, #8
 800252e:	b29b      	uxth	r3, r3
 8002530:	2100      	movs	r1, #0
 8002532:	0018      	movs	r0, r3
 8002534:	f000 f8a4 	bl	8002680 <digitalWrite>
	// delay(100);

	/* Send the commands to invert the display.
	*/
	Spi2PutByte(cmdOledSegRemap);		//remap columns
 8002538:	20a1      	movs	r0, #161	; 0xa1
 800253a:	f000 f88d 	bl	8002658 <Spi2PutByte>
	Spi2PutByte(cmdOledComDir);			//remap the rows
 800253e:	20c8      	movs	r0, #200	; 0xc8
 8002540:	f000 f88a 	bl	8002658 <Spi2PutByte>

	/* Send the commands to select sequential COM configuration
	*/
	Spi2PutByte(cmdOledComConfig);		//set COM configuration command
 8002544:	20da      	movs	r0, #218	; 0xda
 8002546:	f000 f887 	bl	8002658 <Spi2PutByte>
	Spi2PutByte(0x20);					//sequential COM, left/right remap enabled
 800254a:	2020      	movs	r0, #32
 800254c:	f000 f884 	bl	8002658 <Spi2PutByte>

	/* Send Display On command
	*/
	Spi2PutByte(cmdOledDisplayOn);
 8002550:	20af      	movs	r0, #175	; 0xaf
 8002552:	f000 f881 	bl	8002658 <Spi2PutByte>

}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <OledClear>:
**		updates the display.
*/

void
OledClear()
	{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0

	OledClearBuffer();
 8002560:	f000 f806 	bl	8002570 <OledClearBuffer>
	OledUpdate();
 8002564:	f000 f820 	bl	80025a8 <OledUpdate>

}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <OledClearBuffer>:
**		Clear the display memory buffer.
*/

void
OledClearBuffer()
	{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
	int			ib;
	uint8_t *		pb;

	pb = rgbOledBmp;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <OledClearBuffer+0x34>)
 8002578:	603b      	str	r3, [r7, #0]

	/* Fill the memory buffer with 0.
	*/
	for (ib = 0; ib < cbOledDispMax; ib++) {
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	e007      	b.n	8002590 <OledClearBuffer+0x20>
		*pb++ = 0x00;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	603a      	str	r2, [r7, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
	for (ib = 0; ib < cbOledDispMax; ib++) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3301      	adds	r3, #1
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	429a      	cmp	r2, r3
 8002598:	dbf2      	blt.n	8002580 <OledClearBuffer+0x10>
	}

}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200001c8 	.word	0x200001c8

080025a8 <OledUpdate>:
**		Update the OLED display with the contents of the memory buffer
*/

void
OledUpdate()
	{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
	int		ipag;
	int		icol;
	uint8_t *	pb;

	pb = rgbOledBmp;
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <OledUpdate+0x6c>)
 80025b0:	603b      	str	r3, [r7, #0]

	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	e024      	b.n	8002602 <OledUpdate+0x5a>

		digitalWrite(DataCmd, LOW);
 80025b8:	2302      	movs	r3, #2
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2100      	movs	r1, #0
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 f85e 	bl	8002680 <digitalWrite>

		/* Set the page address
		*/
		Spi2PutByte(0x22);		//Set page command
 80025c4:	2022      	movs	r0, #34	; 0x22
 80025c6:	f000 f847 	bl	8002658 <Spi2PutByte>
		Spi2PutByte(ipag);		//page number
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 f842 	bl	8002658 <Spi2PutByte>

		/* Start at the left column
		*/
		Spi2PutByte(0x00);		//set low nybble of column
 80025d4:	2000      	movs	r0, #0
 80025d6:	f000 f83f 	bl	8002658 <Spi2PutByte>
		Spi2PutByte(0x10);		//set high nybble of column
 80025da:	2010      	movs	r0, #16
 80025dc:	f000 f83c 	bl	8002658 <Spi2PutByte>

		digitalWrite(DataCmd, HIGH);
 80025e0:	2302      	movs	r3, #2
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2101      	movs	r1, #1
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 f84a 	bl	8002680 <digitalWrite>

		/* Copy this memory page of display data.
		*/
		OledPutBuffer(ccolOledMax, pb);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	0019      	movs	r1, r3
 80025f0:	2080      	movs	r0, #128	; 0x80
 80025f2:	f000 f811 	bl	8002618 <OledPutBuffer>
		pb += ccolOledMax;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	3380      	adds	r3, #128	; 0x80
 80025fa:	603b      	str	r3, [r7, #0]
	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3301      	adds	r3, #1
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b03      	cmp	r3, #3
 8002606:	ddd7      	ble.n	80025b8 <OledUpdate+0x10>

	}

}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	46bd      	mov	sp, r7
 800260e:	b002      	add	sp, #8
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	200001c8 	.word	0x200001c8

08002618 <OledPutBuffer>:
**		Send the bytes specified in rgbTx to the slave and return
**		the bytes read from the slave in rgbRx
*/
void
OledPutBuffer(int cb, uint8_t * rgbTx)
	{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
	int		ib;
	uint8_t	bTmp;

	/* Write/Read the data
	*/
	for (ib = 0; ib < cb; ib++) {
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e00c      	b.n	8002642 <OledPutBuffer+0x2a>

	    HAL_SPI_Transmit(&hspi1, rgbTx, 1, HAL_MAX_DELAY);
 8002628:	2301      	movs	r3, #1
 800262a:	425b      	negs	r3, r3
 800262c:	6839      	ldr	r1, [r7, #0]
 800262e:	4809      	ldr	r0, [pc, #36]	; (8002654 <OledPutBuffer+0x3c>)
 8002630:	2201      	movs	r2, #1
 8002632:	f003 f80b 	bl	800564c <HAL_SPI_Transmit>
	    rgbTx++;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	603b      	str	r3, [r7, #0]
	for (ib = 0; ib < cb; ib++) {
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3301      	adds	r3, #1
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	dbee      	blt.n	8002628 <OledPutBuffer+0x10>
		//bTmp = spiCon.transfer(*rgbTx++);

	}

}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200003d0 	.word	0x200003d0

08002658 <Spi2PutByte>:
**	Description:
**		Write/Read a byte on SPI port 2
*/
uint8_t
Spi2PutByte(uint8_t bVal)
	{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	0002      	movs	r2, r0
 8002660:	1dfb      	adds	r3, r7, #7
 8002662:	701a      	strb	r2, [r3, #0]
	uint8_t	bRx;

    HAL_SPI_Transmit(&hspi1, &bVal, 1, HAL_MAX_DELAY);
 8002664:	2301      	movs	r3, #1
 8002666:	425b      	negs	r3, r3
 8002668:	1df9      	adds	r1, r7, #7
 800266a:	4804      	ldr	r0, [pc, #16]	; (800267c <Spi2PutByte+0x24>)
 800266c:	2201      	movs	r2, #1
 800266e:	f002 ffed 	bl	800564c <HAL_SPI_Transmit>

	// bRx = spiCon.transfer(bVal);
	
	//return bRx;
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200003d0 	.word	0x200003d0

08002680 <digitalWrite>:

void digitalWrite(uint16_t mypin, unsigned char cLevel){
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	0002      	movs	r2, r0
 8002688:	1dbb      	adds	r3, r7, #6
 800268a:	801a      	strh	r2, [r3, #0]
 800268c:	1d7b      	adds	r3, r7, #5
 800268e:	1c0a      	adds	r2, r1, #0
 8002690:	701a      	strb	r2, [r3, #0]
	
	
	HAL_GPIO_WritePin(GPIOA, mypin, cLevel);
 8002692:	1d7b      	adds	r3, r7, #5
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	1dbb      	adds	r3, r7, #6
 8002698:	8819      	ldrh	r1, [r3, #0]
 800269a:	2390      	movs	r3, #144	; 0x90
 800269c:	05db      	lsls	r3, r3, #23
 800269e:	0018      	movs	r0, r3
 80026a0:	f002 f9af 	bl	8004a02 <HAL_GPIO_WritePin>

	
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}

080026ac <OledMoveTo>:
**		Set the current graphics drawing position.
*/

void
OledMoveTo(int xco, int yco)
	{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]

	/* Clamp the specified coordinates to the display surface
	*/
	xco = OledClampXco(xco);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f8ed 	bl	8002898 <OledClampXco>
 80026be:	0003      	movs	r3, r0
 80026c0:	607b      	str	r3, [r7, #4]
	yco = OledClampYco(yco);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f8fa 	bl	80028be <OledClampYco>
 80026ca:	0003      	movs	r3, r0
 80026cc:	603b      	str	r3, [r7, #0]

	/* Save the current position.
	*/
	xcoOledCur = xco;
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <OledMoveTo+0x58>)
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	601a      	str	r2, [r3, #0]
	ycoOledCur = yco;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <OledMoveTo+0x5c>)
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	601a      	str	r2, [r3, #0]

	/* Compute the display access parameters corresponding to
	** the specified position.
	*/
	pbOledCur = &rgbOledBmp[((yco/8) * ccolOledMax) + xco];
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da00      	bge.n	80026e2 <OledMoveTo+0x36>
 80026e0:	3307      	adds	r3, #7
 80026e2:	10db      	asrs	r3, r3, #3
 80026e4:	01da      	lsls	r2, r3, #7
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	18d2      	adds	r2, r2, r3
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <OledMoveTo+0x60>)
 80026ec:	18d2      	adds	r2, r2, r3
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <OledMoveTo+0x64>)
 80026f0:	601a      	str	r2, [r3, #0]
	bnOledCur = yco & 7;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2207      	movs	r2, #7
 80026f6:	401a      	ands	r2, r3
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <OledMoveTo+0x68>)
 80026fa:	601a      	str	r2, [r3, #0]

}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000019c 	.word	0x2000019c
 8002708:	200001a0 	.word	0x200001a0
 800270c:	200001c8 	.word	0x200001c8
 8002710:	200001a4 	.word	0x200001a4
 8002714:	200001a8 	.word	0x200001a8

08002718 <OledSetDrawMode>:
**		Set the specified mode as the current drawing mode.
*/

void
OledSetDrawMode(int mod)
	{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

	modOledCur = mod;
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <OledSetDrawMode+0x6c>)
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]

	switch(mod) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d01b      	beq.n	8002764 <OledSetDrawMode+0x4c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b03      	cmp	r3, #3
 8002730:	dc1c      	bgt.n	800276c <OledSetDrawMode+0x54>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d011      	beq.n	800275c <OledSetDrawMode+0x44>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	dc16      	bgt.n	800276c <OledSetDrawMode+0x54>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <OledSetDrawMode+0x34>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d004      	beq.n	8002754 <OledSetDrawMode+0x3c>
 800274a:	e00f      	b.n	800276c <OledSetDrawMode+0x54>
		case	modOledSet:
			pfnDoRop = OledRopSet;
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <OledSetDrawMode+0x70>)
 800274e:	4a0f      	ldr	r2, [pc, #60]	; (800278c <OledSetDrawMode+0x74>)
 8002750:	601a      	str	r2, [r3, #0]
			break;
 8002752:	e012      	b.n	800277a <OledSetDrawMode+0x62>

		case	modOledOr:
			pfnDoRop = OledRopOr;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <OledSetDrawMode+0x70>)
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <OledSetDrawMode+0x78>)
 8002758:	601a      	str	r2, [r3, #0]
			break;
 800275a:	e00e      	b.n	800277a <OledSetDrawMode+0x62>

		case	modOledAnd:
			pfnDoRop = OledRopAnd;
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <OledSetDrawMode+0x70>)
 800275e:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <OledSetDrawMode+0x7c>)
 8002760:	601a      	str	r2, [r3, #0]
			break;
 8002762:	e00a      	b.n	800277a <OledSetDrawMode+0x62>

		case	modOledXor:
			pfnDoRop = OledRopXor;
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <OledSetDrawMode+0x70>)
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <OledSetDrawMode+0x80>)
 8002768:	601a      	str	r2, [r3, #0]
			break;
 800276a:	e006      	b.n	800277a <OledSetDrawMode+0x62>

		default:
			modOledCur = modOledSet;
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <OledSetDrawMode+0x6c>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
			pfnDoRop = OledRopSet;
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <OledSetDrawMode+0x70>)
 8002774:	4a05      	ldr	r2, [pc, #20]	; (800278c <OledSetDrawMode+0x74>)
 8002776:	601a      	str	r2, [r3, #0]
	}

}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b002      	add	sp, #8
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	200003cc 	.word	0x200003cc
 8002788:	200003c8 	.word	0x200003c8
 800278c:	0800279d 	.word	0x0800279d
 8002790:	080027eb 	.word	0x080027eb
 8002794:	08002825 	.word	0x08002825
 8002798:	0800285f 	.word	0x0800285f

0800279c <OledRopSet>:
**
*/

uint8_t
OledRopSet(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	0004      	movs	r4, r0
 80027a4:	0008      	movs	r0, r1
 80027a6:	0011      	movs	r1, r2
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	1c22      	adds	r2, r4, #0
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	1dbb      	adds	r3, r7, #6
 80027b0:	1c02      	adds	r2, r0, #0
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	1d7b      	adds	r3, r7, #5
 80027b6:	1c0a      	adds	r2, r1, #0
 80027b8:	701a      	strb	r2, [r3, #0]

	return (bDsp & ~mskPix) | (bPix & mskPix);
 80027ba:	1d7b      	adds	r3, r7, #5
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	1dba      	adds	r2, r7, #6
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	b252      	sxtb	r2, r2
 80027ca:	4013      	ands	r3, r2
 80027cc:	b25a      	sxtb	r2, r3
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	1d79      	adds	r1, r7, #5
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	7809      	ldrb	r1, [r1, #0]
 80027d6:	400b      	ands	r3, r1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	b2db      	uxtb	r3, r3

}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b003      	add	sp, #12
 80027e8:	bd90      	pop	{r4, r7, pc}

080027ea <OledRopOr>:
**
*/

uint8_t
OledRopOr(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 80027ea:	b590      	push	{r4, r7, lr}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	0004      	movs	r4, r0
 80027f2:	0008      	movs	r0, r1
 80027f4:	0011      	movs	r1, r2
 80027f6:	1dfb      	adds	r3, r7, #7
 80027f8:	1c22      	adds	r2, r4, #0
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	1c02      	adds	r2, r0, #0
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	1d7b      	adds	r3, r7, #5
 8002804:	1c0a      	adds	r2, r1, #0
 8002806:	701a      	strb	r2, [r3, #0]

	return bDsp | (bPix & mskPix);
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	1d7a      	adds	r2, r7, #5
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	7812      	ldrb	r2, [r2, #0]
 8002810:	4013      	ands	r3, r2
 8002812:	b2da      	uxtb	r2, r3
 8002814:	1dbb      	adds	r3, r7, #6
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	4313      	orrs	r3, r2
 800281a:	b2db      	uxtb	r3, r3

}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b003      	add	sp, #12
 8002822:	bd90      	pop	{r4, r7, pc}

08002824 <OledRopAnd>:
**
*/

uint8_t
OledRopAnd(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	0004      	movs	r4, r0
 800282c:	0008      	movs	r0, r1
 800282e:	0011      	movs	r1, r2
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	1c22      	adds	r2, r4, #0
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	1dbb      	adds	r3, r7, #6
 8002838:	1c02      	adds	r2, r0, #0
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	1d7b      	adds	r3, r7, #5
 800283e:	1c0a      	adds	r2, r1, #0
 8002840:	701a      	strb	r2, [r3, #0]

	return bDsp & (bPix & mskPix);
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	1d7a      	adds	r2, r7, #5
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	4013      	ands	r3, r2
 800284c:	b2db      	uxtb	r3, r3
 800284e:	1dba      	adds	r2, r7, #6
 8002850:	7812      	ldrb	r2, [r2, #0]
 8002852:	4013      	ands	r3, r2
 8002854:	b2db      	uxtb	r3, r3

}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b003      	add	sp, #12
 800285c:	bd90      	pop	{r4, r7, pc}

0800285e <OledRopXor>:
**
*/

uint8_t
OledRopXor(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 800285e:	b590      	push	{r4, r7, lr}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	0004      	movs	r4, r0
 8002866:	0008      	movs	r0, r1
 8002868:	0011      	movs	r1, r2
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	1c22      	adds	r2, r4, #0
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	1dbb      	adds	r3, r7, #6
 8002872:	1c02      	adds	r2, r0, #0
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	1d7b      	adds	r3, r7, #5
 8002878:	1c0a      	adds	r2, r1, #0
 800287a:	701a      	strb	r2, [r3, #0]

	return bDsp ^ (bPix & mskPix);
 800287c:	1dfb      	adds	r3, r7, #7
 800287e:	1d7a      	adds	r2, r7, #5
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	7812      	ldrb	r2, [r2, #0]
 8002884:	4013      	ands	r3, r2
 8002886:	b2da      	uxtb	r2, r3
 8002888:	1dbb      	adds	r3, r7, #6
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4053      	eors	r3, r2
 800288e:	b2db      	uxtb	r3, r3

}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b003      	add	sp, #12
 8002896:	bd90      	pop	{r4, r7, pc}

08002898 <OledClampXco>:
**		This routine forces the x value to be on the display.
*/

int
OledClampXco(int xco)
	{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	if (xco < 0) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	da01      	bge.n	80028aa <OledClampXco+0x12>
		xco = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
	}
	if (xco >= ccolOledMax) {
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b7f      	cmp	r3, #127	; 0x7f
 80028ae:	dd01      	ble.n	80028b4 <OledClampXco+0x1c>
		xco = ccolOledMax-1;
 80028b0:	237f      	movs	r3, #127	; 0x7f
 80028b2:	607b      	str	r3, [r7, #4]
	}

	return xco;
 80028b4:	687b      	ldr	r3, [r7, #4]

}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b002      	add	sp, #8
 80028bc:	bd80      	pop	{r7, pc}

080028be <OledClampYco>:
**		This routine forces the y value to be on the display.
*/

int
OledClampYco(int yco)
	{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	if (yco < 0) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	da01      	bge.n	80028d0 <OledClampYco+0x12>
		yco = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
	}
	if (yco >= crowOledMax) {
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b1f      	cmp	r3, #31
 80028d4:	dd01      	ble.n	80028da <OledClampYco+0x1c>
		yco = crowOledMax-1;
 80028d6:	231f      	movs	r3, #31
 80028d8:	607b      	str	r3, [r7, #4]
	}

	return yco;
 80028da:	687b      	ldr	r3, [r7, #4]

}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	b002      	add	sp, #8
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <apagar>:
#include <stdio.h>
#include <math.h>
#include <string.h>

// Função para apagar o último caractere de uma string
void apagar(char *str){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
    int tam = strlen(str);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7fd fc0a 	bl	8000108 <strlen>
 80028f4:	0003      	movs	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]
    str[tam-1] = '\0';
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	18d3      	adds	r3, r2, r3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b004      	add	sp, #16
 800290a:	bd80      	pop	{r7, pc}

0800290c <corretor>:

// Função que corrige floats em que há 0s entre o ponto e o primeiro dígito diferente de 0
void corretor(char *str, int len, int dig){
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b091      	sub	sp, #68	; 0x44
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]

    char correto[16];
    strcpy(correto, str);
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	2420      	movs	r4, #32
 800291c:	193b      	adds	r3, r7, r4
 800291e:	0011      	movs	r1, r2
 8002920:	0018      	movs	r0, r3
 8002922:	f003 fd9e 	bl	8006462 <strcpy>
    correto[dig+1] = '\0';
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3301      	adds	r3, #1
 800292a:	193a      	adds	r2, r7, r4
 800292c:	2100      	movs	r1, #0
 800292e:	54d1      	strb	r1, [r2, r3]
    char aux[16];
    int numero = len-dig-1;
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	637b      	str	r3, [r7, #52]	; 0x34

    for(int i = 0; i < numero; i++){
 800293a:	2300      	movs	r3, #0
 800293c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293e:	e010      	b.n	8002962 <corretor+0x56>
        aux[i] = str[dig+1+i];
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002946:	18d3      	adds	r3, r2, r3
 8002948:	001a      	movs	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	189b      	adds	r3, r3, r2
 800294e:	7819      	ldrb	r1, [r3, #0]
 8002950:	2310      	movs	r3, #16
 8002952:	18fa      	adds	r2, r7, r3
 8002954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002956:	18d3      	adds	r3, r2, r3
 8002958:	1c0a      	adds	r2, r1, #0
 800295a:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < numero; i++){
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	3301      	adds	r3, #1
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002966:	429a      	cmp	r2, r3
 8002968:	dbea      	blt.n	8002940 <corretor+0x34>
    }
    aux[numero]= '\0';
 800296a:	2110      	movs	r1, #16
 800296c:	187a      	adds	r2, r7, r1
 800296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002970:	18d3      	adds	r3, r2, r3
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]

    int zeros = 5 - strlen(aux);
 8002976:	187b      	adds	r3, r7, r1
 8002978:	0018      	movs	r0, r3
 800297a:	f7fd fbc5 	bl	8000108 <strlen>
 800297e:	0003      	movs	r3, r0
 8002980:	2205      	movs	r2, #5
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
    for(int i = 0; i < zeros; i++)
 8002986:	2300      	movs	r3, #0
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
 800298a:	e00a      	b.n	80029a2 <corretor+0x96>
        correto[dig+1+i] = '0';
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	18d3      	adds	r3, r2, r3
 8002994:	2220      	movs	r2, #32
 8002996:	18ba      	adds	r2, r7, r2
 8002998:	2130      	movs	r1, #48	; 0x30
 800299a:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < zeros; i++)
 800299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299e:	3301      	adds	r3, #1
 80029a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	429a      	cmp	r2, r3
 80029a8:	dbf0      	blt.n	800298c <corretor+0x80>

    correto[dig+1+zeros] = '\0';
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	18d3      	adds	r3, r2, r3
 80029b2:	2020      	movs	r0, #32
 80029b4:	183a      	adds	r2, r7, r0
 80029b6:	2100      	movs	r1, #0
 80029b8:	54d1      	strb	r1, [r2, r3]
    strcat(correto, aux);
 80029ba:	2310      	movs	r3, #16
 80029bc:	18fa      	adds	r2, r7, r3
 80029be:	0004      	movs	r4, r0
 80029c0:	183b      	adds	r3, r7, r0
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f003 fd3f 	bl	8006448 <strcat>
    strcpy(str, correto);
 80029ca:	193a      	adds	r2, r7, r4
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	0011      	movs	r1, r2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f003 fd46 	bl	8006462 <strcpy>
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b011      	add	sp, #68	; 0x44
 80029dc:	bd90      	pop	{r4, r7, pc}

080029de <contDigitos>:

// Função para descobrir a quantidade de dígitos presentes em um número inteiro
int contDigitos(int num){
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
	int digitos = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
	while(num/10 != 0){
 80029ea:	e009      	b.n	8002a00 <contDigitos+0x22>
		num /= 10;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	210a      	movs	r1, #10
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7fd fc1b 	bl	800022c <__divsi3>
 80029f6:	0003      	movs	r3, r0
 80029f8:	607b      	str	r3, [r7, #4]
		digitos++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
	while(num/10 != 0){
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3309      	adds	r3, #9
 8002a04:	2b12      	cmp	r3, #18
 8002a06:	d8f1      	bhi.n	80029ec <contDigitos+0xe>
	}

	return digitos;
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b004      	add	sp, #16
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <negative>:

// Função que formata uma string para números negativos
void negative(char *str, int len){
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b088      	sub	sp, #32
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
    int i = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
    char strcp[16];
    strcp[0] = '-';
 8002a20:	2308      	movs	r3, #8
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	222d      	movs	r2, #45	; 0x2d
 8002a26:	701a      	strb	r2, [r3, #0]

    for(int i = 0; i < len+1; i++){
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	e00b      	b.n	8002a46 <negative+0x34>
        strcp[i+1] = str[i];
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	18d2      	adds	r2, r2, r3
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3301      	adds	r3, #1
 8002a38:	7811      	ldrb	r1, [r2, #0]
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	18ba      	adds	r2, r7, r2
 8002a3e:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < len+1; i++){
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	3301      	adds	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	daef      	bge.n	8002a2e <negative+0x1c>
    }
    strcpy(str, strcp);
 8002a4e:	2308      	movs	r3, #8
 8002a50:	18fa      	adds	r2, r7, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0011      	movs	r1, r2
 8002a56:	0018      	movs	r0, r3
 8002a58:	f003 fd03 	bl	8006462 <strcpy>
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b008      	add	sp, #32
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <reverse>:

// Função que reverte uma string (a faz de trás para frente)
void reverse(char *str, int len)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	int i=0, j=len-1, temp;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
	while (i<j)
 8002a78:	e018      	b.n	8002aac <reverse+0x48>
	{
    	temp = str[i];
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	18d3      	adds	r3, r2, r3
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]
    	str[i] = str[j];
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	18d2      	adds	r2, r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	18cb      	adds	r3, r1, r3
 8002a90:	7812      	ldrb	r2, [r2, #0]
 8002a92:	701a      	strb	r2, [r3, #0]
    	str[j] = temp;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	18d3      	adds	r3, r2, r3
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]
    	i++; j--;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	613b      	str	r3, [r7, #16]
	while (i<j)
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dbe2      	blt.n	8002a7a <reverse+0x16>
	}
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b006      	add	sp, #24
 8002abc:	bd80      	pop	{r7, pc}

08002abe <intToStr>:
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.

// Função que converte inteiro em string
int intToStr(int x, char str[], int d)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
	while (x)
 8002ace:	e016      	b.n	8002afe <intToStr+0x40>
	{
		str[i++] = (x%10) + '0';
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	210a      	movs	r1, #10
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7fd fc8f 	bl	80003f8 <__aeabi_idivmod>
 8002ada:	000b      	movs	r3, r1
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	1c59      	adds	r1, r3, #1
 8002ae2:	6179      	str	r1, [r7, #20]
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	185b      	adds	r3, r3, r1
 8002aea:	3230      	adds	r2, #48	; 0x30
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
    	x = x/10;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	210a      	movs	r1, #10
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7fd fb99 	bl	800022c <__divsi3>
 8002afa:	0003      	movs	r3, r0
 8002afc:	60fb      	str	r3, [r7, #12]
	while (x)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e5      	bne.n	8002ad0 <intToStr+0x12>
	}

	reverse(str, i);
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	0011      	movs	r1, r2
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7ff ffaa 	bl	8002a64 <reverse>
	str[i] = '\0';
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	18d3      	adds	r3, r2, r3
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
	//corretor(str, strlen(str));
	return i;
 8002b1a:	697b      	ldr	r3, [r7, #20]
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b006      	add	sp, #24
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <ftoa>:
double n1;
int dig;

// Função que converte float em string
void ftoa(double n, char *res)
{
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60b8      	str	r0, [r7, #8]
 8002b2c:	60f9      	str	r1, [r7, #12]
 8002b2e:	607a      	str	r2, [r7, #4]
	if(n < 0)
 8002b30:	2200      	movs	r2, #0
 8002b32:	2300      	movs	r3, #0
 8002b34:	68b8      	ldr	r0, [r7, #8]
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	f7fd fc7a 	bl	8000430 <__aeabi_dcmplt>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d00a      	beq.n	8002b56 <ftoa+0x32>
		n1 = n*(-1.0);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	001c      	movs	r4, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	0612      	lsls	r2, r2, #24
 8002b4a:	405a      	eors	r2, r3
 8002b4c:	0015      	movs	r5, r2
 8002b4e:	4b70      	ldr	r3, [pc, #448]	; (8002d10 <ftoa+0x1ec>)
 8002b50:	601c      	str	r4, [r3, #0]
 8002b52:	605d      	str	r5, [r3, #4]
 8002b54:	e004      	b.n	8002b60 <ftoa+0x3c>
	else
		n1 = n;
 8002b56:	496e      	ldr	r1, [pc, #440]	; (8002d10 <ftoa+0x1ec>)
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	600a      	str	r2, [r1, #0]
 8002b5e:	604b      	str	r3, [r1, #4]
	// Extract integer part
	int ipart = (int)n1;
 8002b60:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <ftoa+0x1ec>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	0010      	movs	r0, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	f7ff f9e3 	bl	8001f34 <__aeabi_d2iz>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	61bb      	str	r3, [r7, #24]

	// Extract floating part
	double fpart = n1 - (double)ipart;
 8002b72:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <ftoa+0x1ec>)
 8002b74:	681c      	ldr	r4, [r3, #0]
 8002b76:	685d      	ldr	r5, [r3, #4]
 8002b78:	69b8      	ldr	r0, [r7, #24]
 8002b7a:	f7ff fa11 	bl	8001fa0 <__aeabi_i2d>
 8002b7e:	0002      	movs	r2, r0
 8002b80:	000b      	movs	r3, r1
 8002b82:	0020      	movs	r0, r4
 8002b84:	0029      	movs	r1, r5
 8002b86:	f7fe fe25 	bl	80017d4 <__aeabi_dsub>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	000b      	movs	r3, r1
 8002b8e:	613a      	str	r2, [r7, #16]
 8002b90:	617b      	str	r3, [r7, #20]

	// convert integer part to string
	int i = intToStr(ipart, res,0);
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2200      	movs	r2, #0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff ff90 	bl	8002abe <intToStr>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	61fb      	str	r3, [r7, #28]

	// check for display option after point
	//if (afterpoint != 0)
	//{
	if(ipart != 0){
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d055      	beq.n	8002c54 <ftoa+0x130>
		if(fpart != 0)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2300      	movs	r3, #0
 8002bac:	6938      	ldr	r0, [r7, #16]
 8002bae:	6979      	ldr	r1, [r7, #20]
 8002bb0:	f7fd fc38 	bl	8000424 <__aeabi_dcmpeq>
 8002bb4:	1e03      	subs	r3, r0, #0
 8002bb6:	d104      	bne.n	8002bc2 <ftoa+0x9e>
			res[i] = '.';
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	18d3      	adds	r3, r2, r3
 8002bbe:	222e      	movs	r2, #46	; 0x2e
 8002bc0:	701a      	strb	r2, [r3, #0]

		fpart = fpart * 100000.0;
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <ftoa+0x1f0>)
 8002bc6:	6938      	ldr	r0, [r7, #16]
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	f7fe fb97 	bl	80012fc <__aeabi_dmul>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	000b      	movs	r3, r1
 8002bd2:	613a      	str	r2, [r7, #16]
 8002bd4:	617b      	str	r3, [r7, #20]
		dig = contDigitos(ipart);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff ff00 	bl	80029de <contDigitos>
 8002bde:	0002      	movs	r2, r0
 8002be0:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <ftoa+0x1f4>)
 8002be2:	601a      	str	r2, [r3, #0]

		intToStr((int)fpart, res + i + 1, 2);
 8002be4:	6938      	ldr	r0, [r7, #16]
 8002be6:	6979      	ldr	r1, [r7, #20]
 8002be8:	f7ff f9a4 	bl	8001f34 <__aeabi_d2iz>
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	18d3      	adds	r3, r2, r3
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	f7ff ff61 	bl	8002abe <intToStr>
		if((int)fpart < 10000 && (int)fpart != 0)
 8002bfc:	6938      	ldr	r0, [r7, #16]
 8002bfe:	6979      	ldr	r1, [r7, #20]
 8002c00:	f7ff f998 	bl	8001f34 <__aeabi_d2iz>
 8002c04:	0003      	movs	r3, r0
 8002c06:	4a45      	ldr	r2, [pc, #276]	; (8002d1c <ftoa+0x1f8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	dc11      	bgt.n	8002c30 <ftoa+0x10c>
 8002c0c:	6938      	ldr	r0, [r7, #16]
 8002c0e:	6979      	ldr	r1, [r7, #20]
 8002c10:	f7ff f990 	bl	8001f34 <__aeabi_d2iz>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d00b      	beq.n	8002c30 <ftoa+0x10c>
			corretor(res, strlen(res), dig);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7fd fa74 	bl	8000108 <strlen>
 8002c20:	0003      	movs	r3, r0
 8002c22:	0019      	movs	r1, r3
 8002c24:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <ftoa+0x1f4>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7ff fe6e 	bl	800290c <corretor>

        if(n < 0)
 8002c30:	2200      	movs	r2, #0
 8002c32:	2300      	movs	r3, #0
 8002c34:	68b8      	ldr	r0, [r7, #8]
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	f7fd fbfa 	bl	8000430 <__aeabi_dcmplt>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d100      	bne.n	8002c42 <ftoa+0x11e>
        if(n < 0)
            negative(res, dig+6);
	}
	//}

}
 8002c40:	e062      	b.n	8002d08 <ftoa+0x1e4>
            negative(res, dig+6);
 8002c42:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <ftoa+0x1f4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1d9a      	adds	r2, r3, #6
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff fee0 	bl	8002a12 <negative>
}
 8002c52:	e059      	b.n	8002d08 <ftoa+0x1e4>
		res[0] = '0';
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2230      	movs	r2, #48	; 0x30
 8002c58:	701a      	strb	r2, [r3, #0]
		if(fpart != 0){
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	6938      	ldr	r0, [r7, #16]
 8002c60:	6979      	ldr	r1, [r7, #20]
 8002c62:	f7fd fbdf 	bl	8000424 <__aeabi_dcmpeq>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d106      	bne.n	8002c78 <ftoa+0x154>
			res[1] = '.';
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	222e      	movs	r2, #46	; 0x2e
 8002c70:	701a      	strb	r2, [r3, #0]
			i++;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
		fpart = fpart * 100000.0 ;
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <ftoa+0x1f0>)
 8002c7c:	6938      	ldr	r0, [r7, #16]
 8002c7e:	6979      	ldr	r1, [r7, #20]
 8002c80:	f7fe fb3c 	bl	80012fc <__aeabi_dmul>
 8002c84:	0002      	movs	r2, r0
 8002c86:	000b      	movs	r3, r1
 8002c88:	613a      	str	r2, [r7, #16]
 8002c8a:	617b      	str	r3, [r7, #20]
		dig = contDigitos(ipart);
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f7ff fea5 	bl	80029de <contDigitos>
 8002c94:	0002      	movs	r2, r0
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <ftoa+0x1f4>)
 8002c98:	601a      	str	r2, [r3, #0]
		intToStr((int)fpart, res + i + 1, 2);
 8002c9a:	6938      	ldr	r0, [r7, #16]
 8002c9c:	6979      	ldr	r1, [r7, #20]
 8002c9e:	f7ff f949 	bl	8001f34 <__aeabi_d2iz>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	18d3      	adds	r3, r2, r3
 8002caa:	2202      	movs	r2, #2
 8002cac:	0019      	movs	r1, r3
 8002cae:	f7ff ff06 	bl	8002abe <intToStr>
		if((int)fpart < 10000 && (int)fpart != 0)
 8002cb2:	6938      	ldr	r0, [r7, #16]
 8002cb4:	6979      	ldr	r1, [r7, #20]
 8002cb6:	f7ff f93d 	bl	8001f34 <__aeabi_d2iz>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <ftoa+0x1f8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	dc11      	bgt.n	8002ce6 <ftoa+0x1c2>
 8002cc2:	6938      	ldr	r0, [r7, #16]
 8002cc4:	6979      	ldr	r1, [r7, #20]
 8002cc6:	f7ff f935 	bl	8001f34 <__aeabi_d2iz>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d00b      	beq.n	8002ce6 <ftoa+0x1c2>
			corretor(res, strlen(res), dig);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7fd fa19 	bl	8000108 <strlen>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	0019      	movs	r1, r3
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <ftoa+0x1f4>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7ff fe13 	bl	800290c <corretor>
        if(n < 0)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2300      	movs	r3, #0
 8002cea:	68b8      	ldr	r0, [r7, #8]
 8002cec:	68f9      	ldr	r1, [r7, #12]
 8002cee:	f7fd fb9f 	bl	8000430 <__aeabi_dcmplt>
 8002cf2:	1e03      	subs	r3, r0, #0
 8002cf4:	d100      	bne.n	8002cf8 <ftoa+0x1d4>
}
 8002cf6:	e007      	b.n	8002d08 <ftoa+0x1e4>
            negative(res, dig+6);
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <ftoa+0x1f4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1d9a      	adds	r2, r3, #6
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0011      	movs	r1, r2
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7ff fe85 	bl	8002a12 <negative>
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b008      	add	sp, #32
 8002d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d10:	200004b8 	.word	0x200004b8
 8002d14:	40f86a00 	.word	0x40f86a00
 8002d18:	200004c0 	.word	0x200004c0
 8002d1c:	0000270f 	.word	0x0000270f

08002d20 <soma>:
 * -Fatorial-
 * -Logaritmo-
 * -Exponencial-
 * */

double soma(double a, double b){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60b8      	str	r0, [r7, #8]
 8002d28:	60f9      	str	r1, [r7, #12]
 8002d2a:	603a      	str	r2, [r7, #0]
 8002d2c:	607b      	str	r3, [r7, #4]
	double res = a + b;
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68b8      	ldr	r0, [r7, #8]
 8002d34:	68f9      	ldr	r1, [r7, #12]
 8002d36:	f7fd fba3 	bl	8000480 <__aeabi_dadd>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	000b      	movs	r3, r1
 8002d3e:	613a      	str	r2, [r7, #16]
 8002d40:	617b      	str	r3, [r7, #20]
	return res;
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	697b      	ldr	r3, [r7, #20]
}
 8002d46:	0010      	movs	r0, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b006      	add	sp, #24
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <sub>:

double sub(double a, double b){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60b8      	str	r0, [r7, #8]
 8002d58:	60f9      	str	r1, [r7, #12]
 8002d5a:	603a      	str	r2, [r7, #0]
 8002d5c:	607b      	str	r3, [r7, #4]
	double res = a - b;
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68b8      	ldr	r0, [r7, #8]
 8002d64:	68f9      	ldr	r1, [r7, #12]
 8002d66:	f7fe fd35 	bl	80017d4 <__aeabi_dsub>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	000b      	movs	r3, r1
 8002d6e:	613a      	str	r2, [r7, #16]
 8002d70:	617b      	str	r3, [r7, #20]
	return res;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	697b      	ldr	r3, [r7, #20]
}
 8002d76:	0010      	movs	r0, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <mult>:

double mult(double a, double b){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60b8      	str	r0, [r7, #8]
 8002d88:	60f9      	str	r1, [r7, #12]
 8002d8a:	603a      	str	r2, [r7, #0]
 8002d8c:	607b      	str	r3, [r7, #4]
	double res = a * b;
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68b8      	ldr	r0, [r7, #8]
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	f7fe fab1 	bl	80012fc <__aeabi_dmul>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	000b      	movs	r3, r1
 8002d9e:	613a      	str	r2, [r7, #16]
 8002da0:	617b      	str	r3, [r7, #20]
	return res;
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	697b      	ldr	r3, [r7, #20]
}
 8002da6:	0010      	movs	r0, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b006      	add	sp, #24
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <divi>:

double divi(double a, double b){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60b8      	str	r0, [r7, #8]
 8002db8:	60f9      	str	r1, [r7, #12]
 8002dba:	603a      	str	r2, [r7, #0]
 8002dbc:	607b      	str	r3, [r7, #4]
	float res = a / b;
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68b8      	ldr	r0, [r7, #8]
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	f7fd fe97 	bl	8000af8 <__aeabi_ddiv>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	000b      	movs	r3, r1
 8002dce:	0010      	movs	r0, r2
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	f7ff f95d 	bl	8002090 <__aeabi_d2f>
 8002dd6:	1c03      	adds	r3, r0, #0
 8002dd8:	617b      	str	r3, [r7, #20]
	return res;
 8002dda:	6978      	ldr	r0, [r7, #20]
 8002ddc:	f7ff f910 	bl	8002000 <__aeabi_f2d>
 8002de0:	0002      	movs	r2, r0
 8002de2:	000b      	movs	r3, r1
}
 8002de4:	0010      	movs	r0, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b006      	add	sp, #24
 8002dec:	bd80      	pop	{r7, pc}

08002dee <pot>:

double pot(double a, double b){
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60b8      	str	r0, [r7, #8]
 8002df6:	60f9      	str	r1, [r7, #12]
 8002df8:	603a      	str	r2, [r7, #0]
 8002dfa:	607b      	str	r3, [r7, #4]
	double res = pow(a,b);
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68b8      	ldr	r0, [r7, #8]
 8002e02:	68f9      	ldr	r1, [r7, #12]
 8002e04:	f003 fba4 	bl	8006550 <pow>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	000b      	movs	r3, r1
 8002e0c:	613a      	str	r2, [r7, #16]
 8002e0e:	617b      	str	r3, [r7, #20]
	return res;
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
}
 8002e14:	0010      	movs	r0, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b006      	add	sp, #24
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <raiz>:

double raiz(double a, double b){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60b8      	str	r0, [r7, #8]
 8002e28:	60f9      	str	r1, [r7, #12]
 8002e2a:	603a      	str	r2, [r7, #0]
 8002e2c:	607b      	str	r3, [r7, #4]
	float res = pow(a,1/b);
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2000      	movs	r0, #0
 8002e34:	490d      	ldr	r1, [pc, #52]	; (8002e6c <raiz+0x4c>)
 8002e36:	f7fd fe5f 	bl	8000af8 <__aeabi_ddiv>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	000b      	movs	r3, r1
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	f003 fb85 	bl	8006550 <pow>
 8002e46:	0002      	movs	r2, r0
 8002e48:	000b      	movs	r3, r1
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	f7ff f91f 	bl	8002090 <__aeabi_d2f>
 8002e52:	1c03      	adds	r3, r0, #0
 8002e54:	617b      	str	r3, [r7, #20]
	return res;
 8002e56:	6978      	ldr	r0, [r7, #20]
 8002e58:	f7ff f8d2 	bl	8002000 <__aeabi_f2d>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	000b      	movs	r3, r1
}
 8002e60:	0010      	movs	r0, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b006      	add	sp, #24
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	3ff00000 	.word	0x3ff00000

08002e70 <fat>:

int fat(int a){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	if(a == 0)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <fat+0x12>
		return 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e007      	b.n	8002e92 <fat+0x22>
	else{
		return a*fat(a-1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff fff2 	bl	8002e70 <fat>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4353      	muls	r3, r2
	}
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <logarit>:

double logarit(double a){
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6038      	str	r0, [r7, #0]
 8002ea2:	6079      	str	r1, [r7, #4]
	float res = log(a);
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	f003 fb1a 	bl	80064e4 <log>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	000b      	movs	r3, r1
 8002eb4:	0010      	movs	r0, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	f7ff f8ea 	bl	8002090 <__aeabi_d2f>
 8002ebc:	1c03      	adds	r3, r0, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
	return res;
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff f89d 	bl	8002000 <__aeabi_f2d>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	000b      	movs	r3, r1
}
 8002eca:	0010      	movs	r0, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b004      	add	sp, #16
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <expon>:

double expon(double a){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6038      	str	r0, [r7, #0]
 8002edc:	6079      	str	r1, [r7, #4]
	float res = exp(a);
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	f003 fac5 	bl	8006474 <exp>
 8002eea:	0002      	movs	r2, r0
 8002eec:	000b      	movs	r3, r1
 8002eee:	0010      	movs	r0, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	f7ff f8cd 	bl	8002090 <__aeabi_d2f>
 8002ef6:	1c03      	adds	r3, r0, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
	return res;
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff f880 	bl	8002000 <__aeabi_f2d>
 8002f00:	0002      	movs	r2, r0
 8002f02:	000b      	movs	r3, r1
}
 8002f04:	0010      	movs	r0, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <conc>:
/*
 * FIM Operações da calculadora
 * */

// Função responsável por concatenar os valores inteiros digitados no teclado matricial
int conc(int vet[], int k){
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	double res = 0;
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613a      	str	r2, [r7, #16]
 8002f20:	617b      	str	r3, [r7, #20]
	int i = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
	while(k!=0){
 8002f26:	e02a      	b.n	8002f7e <conc+0x6e>
		res += vet[i]*pow(10,k-1);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	18d3      	adds	r3, r2, r3
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7ff f834 	bl	8001fa0 <__aeabi_i2d>
 8002f38:	0004      	movs	r4, r0
 8002f3a:	000d      	movs	r5, r1
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff f82d 	bl	8001fa0 <__aeabi_i2d>
 8002f46:	0002      	movs	r2, r0
 8002f48:	000b      	movs	r3, r1
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	4912      	ldr	r1, [pc, #72]	; (8002f98 <conc+0x88>)
 8002f4e:	f003 faff 	bl	8006550 <pow>
 8002f52:	0002      	movs	r2, r0
 8002f54:	000b      	movs	r3, r1
 8002f56:	0020      	movs	r0, r4
 8002f58:	0029      	movs	r1, r5
 8002f5a:	f7fe f9cf 	bl	80012fc <__aeabi_dmul>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	000b      	movs	r3, r1
 8002f62:	6938      	ldr	r0, [r7, #16]
 8002f64:	6979      	ldr	r1, [r7, #20]
 8002f66:	f7fd fa8b 	bl	8000480 <__aeabi_dadd>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	000b      	movs	r3, r1
 8002f6e:	613a      	str	r2, [r7, #16]
 8002f70:	617b      	str	r3, [r7, #20]
		k--;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	603b      	str	r3, [r7, #0]
		i++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
	while(k!=0){
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1d1      	bne.n	8002f28 <conc+0x18>
	}
	return res;
 8002f84:	6938      	ldr	r0, [r7, #16]
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	f7fe ffd4 	bl	8001f34 <__aeabi_d2iz>
 8002f8c:	0003      	movs	r3, r0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b006      	add	sp, #24
 8002f94:	bdb0      	pop	{r4, r5, r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	40240000 	.word	0x40240000

08002f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9e:	b0b5      	sub	sp, #212	; 0xd4
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	  char pressionado = 'a';	// Char que armazena o caractere digitado no teclado matricial
 8002fa2:	239b      	movs	r3, #155	; 0x9b
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2261      	movs	r2, #97	; 0x61
 8002fa8:	701a      	strb	r2, [r3, #0]
	  char pressOp;	// Char que armazena o caractere de operação
	  int vet[16];	// Vetor de inteiros que armazena os valores das teclas digitadas no teclado matricial
	  int k = 0;	// Variável de controle na conversão de vetor de inteiro para vetor de char
 8002faa:	2300      	movs	r3, #0
 8002fac:	22c8      	movs	r2, #200	; 0xc8
 8002fae:	18ba      	adds	r2, r7, r2
 8002fb0:	6013      	str	r3, [r2, #0]
	  char txt[16];	// String (vetor de char) que aparece no Oled
	  char linha[4] = "\r\n";
 8002fb2:	2330      	movs	r3, #48	; 0x30
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	4ae3      	ldr	r2, [pc, #908]	; (8003344 <main+0x3a8>)
 8002fb8:	601a      	str	r2, [r3, #0]
	  char *txt2 = &txt;	// Ponteiro que aponta para o endereço da string que aparece no oled
 8002fba:	2334      	movs	r3, #52	; 0x34
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	2294      	movs	r2, #148	; 0x94
 8002fc0:	18ba      	adds	r2, r7, r2
 8002fc2:	6013      	str	r3, [r2, #0]
	  char operUart[30]; // String para o histórico (aparece na UART)
	  char valUart[16];	// String para auxiliar operUart, gravando o valor2
	  double valor = 0;	// Primeiro valor digitado (antes da escolha da operação)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	21c0      	movs	r1, #192	; 0xc0
 8002fca:	1879      	adds	r1, r7, r1
 8002fcc:	600a      	str	r2, [r1, #0]
 8002fce:	604b      	str	r3, [r1, #4]
	  double valor2 = 0;	// Segundo valor digitado (depois da escolha da operação)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2188      	movs	r1, #136	; 0x88
 8002fd6:	1879      	adds	r1, r7, r1
 8002fd8:	600a      	str	r2, [r1, #0]
 8002fda:	604b      	str	r3, [r1, #4]
	  int operacao;	// Variável para definir a operação no switch case
	  double op;	// variável que armazena o resultado da operação entre os valores 1 e 2
	  int animacao=0;	// Variável relacionada a aniamações de iniciar, reiniciar e desligar
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2284      	movs	r2, #132	; 0x84
 8002fe0:	18ba      	adds	r2, r7, r2
 8002fe2:	6013      	str	r3, [r2, #0]
	  int cont1 = 0; // Tirar o 0 padrão de inicialização
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	22ac      	movs	r2, #172	; 0xac
 8002fe8:	18ba      	adds	r2, r7, r2
 8002fea:	6013      	str	r3, [r2, #0]
	  int cont; // Separa as etapas: colocar número ou colocar operação
	  int format=0; //Impedir que se coloque um segundo valor após as operações ! log e
 8002fec:	2300      	movs	r3, #0
 8002fee:	22a4      	movs	r2, #164	; 0xa4
 8002ff0:	18ba      	adds	r2, r7, r2
 8002ff2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ff4:	f001 fa3c 	bl	8004470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ff8:	f000 ffbe 	bl	8003f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ffc:	f001 f884 	bl	8004108 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003000:	f001 f812 	bl	8004028 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003004:	f001 f850 	bl	80040a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  OledInit(); // Inicializa o oLed
 8003008:	f7ff f9d6 	bl	80023b8 <OledInit>
  OledClear(); //- Apaga todos os dados  do oLed
 800300c:	f7ff faa6 	bl	800255c <OledClear>
  OledSetCursor(0,0); //Coloca o cursor na posição desejada da tela. Cada caractere ocupa uma coluna.
 8003010:	2100      	movs	r1, #0
 8003012:	2000      	movs	r0, #0
 8003014:	f7ff f8e2 	bl	80021dc <OledSetCursor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
  	OledPutChar('0');
 8003018:	2030      	movs	r0, #48	; 0x30
 800301a:	f7ff f919 	bl	8002250 <OledPutChar>
    cont=0;
 800301e:	2300      	movs	r3, #0
 8003020:	22a8      	movs	r2, #168	; 0xa8
 8003022:	18ba      	adds	r2, r7, r2
 8003024:	6013      	str	r3, [r2, #0]
	  while(cont < 100){
 8003026:	f000 ff99 	bl	8003f5c <main+0xfc0>
		  inicio:
 800302a:	46c0      	nop			; (mov r8, r8)

		  // Quando cont for par, o usuário entra com os dígitos do número desejado.
		  if(cont%2==0){
 800302c:	23a8      	movs	r3, #168	; 0xa8
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2201      	movs	r2, #1
 8003034:	4013      	ands	r3, r2
 8003036:	d001      	beq.n	800303c <main+0xa0>
 8003038:	f000 fdd3 	bl	8003be2 <main+0xc46>
			  for (int i = 0; i < 4; i++) {
 800303c:	2300      	movs	r3, #0
 800303e:	22a0      	movs	r2, #160	; 0xa0
 8003040:	18ba      	adds	r2, r7, r2
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	f000 fdc5 	bl	8003bd2 <main+0xc36>

				  	  	  	  // Linhas do teclado matricial - Inicialmente, todas resetadas
			  		          HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8003048:	4bbf      	ldr	r3, [pc, #764]	; (8003348 <main+0x3ac>)
 800304a:	2200      	movs	r2, #0
 800304c:	2101      	movs	r1, #1
 800304e:	0018      	movs	r0, r3
 8003050:	f001 fcd7 	bl	8004a02 <HAL_GPIO_WritePin>
			  		          HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8003054:	4bbc      	ldr	r3, [pc, #752]	; (8003348 <main+0x3ac>)
 8003056:	2200      	movs	r2, #0
 8003058:	2102      	movs	r1, #2
 800305a:	0018      	movs	r0, r3
 800305c:	f001 fcd1 	bl	8004a02 <HAL_GPIO_WritePin>
			  		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	00d9      	lsls	r1, r3, #3
 8003064:	2390      	movs	r3, #144	; 0x90
 8003066:	05db      	lsls	r3, r3, #23
 8003068:	2200      	movs	r2, #0
 800306a:	0018      	movs	r0, r3
 800306c:	f001 fcc9 	bl	8004a02 <HAL_GPIO_WritePin>
			  		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003070:	2390      	movs	r3, #144	; 0x90
 8003072:	05db      	lsls	r3, r3, #23
 8003074:	2200      	movs	r2, #0
 8003076:	2108      	movs	r1, #8
 8003078:	0018      	movs	r0, r3
 800307a:	f001 fcc2 	bl	8004a02 <HAL_GPIO_WritePin>

			  		          // Aqui, fica setando em 1 cada uma das 4 linhas, enquanto as outras 3 permanecem resetadas
			  		          // Lembrar que o while acontece extremamente rápido!
			  		          if (i == 0) {
 800307e:	23a0      	movs	r3, #160	; 0xa0
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <main+0xfa>
			  		            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8003088:	4baf      	ldr	r3, [pc, #700]	; (8003348 <main+0x3ac>)
 800308a:	2201      	movs	r2, #1
 800308c:	2101      	movs	r1, #1
 800308e:	0018      	movs	r0, r3
 8003090:	f001 fcb7 	bl	8004a02 <HAL_GPIO_WritePin>
 8003094:	e025      	b.n	80030e2 <main+0x146>
			  		          } else if (i == 1) {
 8003096:	23a0      	movs	r3, #160	; 0xa0
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d106      	bne.n	80030ae <main+0x112>
			  		            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 80030a0:	4ba9      	ldr	r3, [pc, #676]	; (8003348 <main+0x3ac>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	2102      	movs	r1, #2
 80030a6:	0018      	movs	r0, r3
 80030a8:	f001 fcab 	bl	8004a02 <HAL_GPIO_WritePin>
 80030ac:	e019      	b.n	80030e2 <main+0x146>
			  		          } else if (i == 2) {
 80030ae:	23a0      	movs	r3, #160	; 0xa0
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d108      	bne.n	80030ca <main+0x12e>
			  		            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	00d9      	lsls	r1, r3, #3
 80030bc:	2390      	movs	r3, #144	; 0x90
 80030be:	05db      	lsls	r3, r3, #23
 80030c0:	2201      	movs	r2, #1
 80030c2:	0018      	movs	r0, r3
 80030c4:	f001 fc9d 	bl	8004a02 <HAL_GPIO_WritePin>
 80030c8:	e00b      	b.n	80030e2 <main+0x146>
			  		          } else if (i == 3) {
 80030ca:	23a0      	movs	r3, #160	; 0xa0
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d106      	bne.n	80030e2 <main+0x146>
			  		            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80030d4:	2390      	movs	r3, #144	; 0x90
 80030d6:	05db      	lsls	r3, r3, #23
 80030d8:	2201      	movs	r2, #1
 80030da:	2108      	movs	r1, #8
 80030dc:	0018      	movs	r0, r3
 80030de:	f001 fc90 	bl	8004a02 <HAL_GPIO_WritePin>
			  		          /*
			  		           * Essa parte do código reconhece quando uma tecla é pressionada,
			  		           * pois o curto fará com que o pino da porta da coluna seja setado
			  		           * em 1. Lembrar que o pull-down faz esse pino ser 0 quando não pressionado.
			  		           * Os comandos que ocorrem quando uma tecla é pressionada também estão aqui*/
			  		          if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 80030e2:	2390      	movs	r3, #144	; 0x90
 80030e4:	05db      	lsls	r3, r3, #23
 80030e6:	2110      	movs	r1, #16
 80030e8:	0018      	movs	r0, r3
 80030ea:	f001 fc6d 	bl	80049c8 <HAL_GPIO_ReadPin>
 80030ee:	0003      	movs	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d000      	beq.n	80030f6 <main+0x15a>
 80030f4:	e32e      	b.n	8003754 <main+0x7b8>

			  		            if (i == 0) {
 80030f6:	23a0      	movs	r3, #160	; 0xa0
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d139      	bne.n	8003174 <main+0x1d8>
			  		              if(cont1 == 0 && cont != 2){
 8003100:	24ac      	movs	r4, #172	; 0xac
 8003102:	193b      	adds	r3, r7, r4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <main+0x18e>
 800310a:	23a8      	movs	r3, #168	; 0xa8
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d00a      	beq.n	800312a <main+0x18e>
			  		            	  OledClear();
 8003114:	f7ff fa22 	bl	800255c <OledClear>
			  		            	  OledSetCursor(0,0);
 8003118:	2100      	movs	r1, #0
 800311a:	2000      	movs	r0, #0
 800311c:	f7ff f85e 	bl	80021dc <OledSetCursor>
			  		            	  cont1++;
 8003120:	193b      	adds	r3, r7, r4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3301      	adds	r3, #1
 8003126:	193a      	adds	r2, r7, r4
 8003128:	6013      	str	r3, [r2, #0]
			  		              }
			  		              pressionado = '1';
 800312a:	249b      	movs	r4, #155	; 0x9b
 800312c:	193b      	adds	r3, r7, r4
 800312e:	2231      	movs	r2, #49	; 0x31
 8003130:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 8003132:	23af      	movs	r3, #175	; 0xaf
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	0018      	movs	r0, r3
 8003138:	f001 f9fe 	bl	8004538 <HAL_Delay>
			  		              if(format != 1){
 800313c:	23a4      	movs	r3, #164	; 0xa4
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <main+0x1ae>
 8003146:	f000 fd3e 	bl	8003bc6 <main+0xc2a>
			  		            	  OledPutChar(pressionado);
 800314a:	193b      	adds	r3, r7, r4
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	0018      	movs	r0, r3
 8003150:	f7ff f87e 	bl	8002250 <OledPutChar>
			  		            	  vet[k]=1;
 8003154:	2344      	movs	r3, #68	; 0x44
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	20c8      	movs	r0, #200	; 0xc8
 800315a:	183a      	adds	r2, r7, r0
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	2101      	movs	r1, #1
 8003162:	50d1      	str	r1, [r2, r3]
			  		            	  k++;
 8003164:	0002      	movs	r2, r0
 8003166:	18bb      	adds	r3, r7, r2
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	18ba      	adds	r2, r7, r2
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	f000 fd29 	bl	8003bc6 <main+0xc2a>
			  		              }
			  		            } else if (i == 1) {
 8003174:	23a0      	movs	r3, #160	; 0xa0
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d139      	bne.n	80031f2 <main+0x256>
				  		          if(cont1 == 0 && cont != 2){
 800317e:	24ac      	movs	r4, #172	; 0xac
 8003180:	193b      	adds	r3, r7, r4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10f      	bne.n	80031a8 <main+0x20c>
 8003188:	23a8      	movs	r3, #168	; 0xa8
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d00a      	beq.n	80031a8 <main+0x20c>
				  		        	  OledClear();
 8003192:	f7ff f9e3 	bl	800255c <OledClear>
				  		           	  OledSetCursor(0,0);
 8003196:	2100      	movs	r1, #0
 8003198:	2000      	movs	r0, #0
 800319a:	f7ff f81f 	bl	80021dc <OledSetCursor>
				  		           	  cont1++;
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3301      	adds	r3, #1
 80031a4:	193a      	adds	r2, r7, r4
 80031a6:	6013      	str	r3, [r2, #0]
				  		          }
			  		              pressionado = '4';
 80031a8:	249b      	movs	r4, #155	; 0x9b
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	2234      	movs	r2, #52	; 0x34
 80031ae:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 80031b0:	23af      	movs	r3, #175	; 0xaf
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	0018      	movs	r0, r3
 80031b6:	f001 f9bf 	bl	8004538 <HAL_Delay>
			  		              if(format != 1){
 80031ba:	23a4      	movs	r3, #164	; 0xa4
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <main+0x22c>
 80031c4:	f000 fcff 	bl	8003bc6 <main+0xc2a>
			  		            	  OledPutChar(pressionado);
 80031c8:	193b      	adds	r3, r7, r4
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7ff f83f 	bl	8002250 <OledPutChar>
			  		            	  vet[k]=4;
 80031d2:	2344      	movs	r3, #68	; 0x44
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	20c8      	movs	r0, #200	; 0xc8
 80031d8:	183a      	adds	r2, r7, r0
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	2104      	movs	r1, #4
 80031e0:	50d1      	str	r1, [r2, r3]
			  		            	  k++;
 80031e2:	0002      	movs	r2, r0
 80031e4:	18bb      	adds	r3, r7, r2
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	18ba      	adds	r2, r7, r2
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	f000 fcea 	bl	8003bc6 <main+0xc2a>
			  		              }
			  		            } else if (i == 2) {
 80031f2:	23a0      	movs	r3, #160	; 0xa0
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d139      	bne.n	8003270 <main+0x2d4>
				  		          if(cont1 == 0 && cont != 2){
 80031fc:	24ac      	movs	r4, #172	; 0xac
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <main+0x28a>
 8003206:	23a8      	movs	r3, #168	; 0xa8
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d00a      	beq.n	8003226 <main+0x28a>
				  		              OledClear();
 8003210:	f7ff f9a4 	bl	800255c <OledClear>
				  		              OledSetCursor(0,0);
 8003214:	2100      	movs	r1, #0
 8003216:	2000      	movs	r0, #0
 8003218:	f7fe ffe0 	bl	80021dc <OledSetCursor>
				  		              cont1++;
 800321c:	193b      	adds	r3, r7, r4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	193a      	adds	r2, r7, r4
 8003224:	6013      	str	r3, [r2, #0]
				  		          }
			  		              pressionado = '7';
 8003226:	249b      	movs	r4, #155	; 0x9b
 8003228:	193b      	adds	r3, r7, r4
 800322a:	2237      	movs	r2, #55	; 0x37
 800322c:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 800322e:	23af      	movs	r3, #175	; 0xaf
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	0018      	movs	r0, r3
 8003234:	f001 f980 	bl	8004538 <HAL_Delay>
			  		              if(format != 1){
 8003238:	23a4      	movs	r3, #164	; 0xa4
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <main+0x2aa>
 8003242:	f000 fcc0 	bl	8003bc6 <main+0xc2a>
			  		            	OledPutChar(pressionado);
 8003246:	193b      	adds	r3, r7, r4
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff f800 	bl	8002250 <OledPutChar>
			  		              	  vet[k]=7;
 8003250:	2344      	movs	r3, #68	; 0x44
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	20c8      	movs	r0, #200	; 0xc8
 8003256:	183a      	adds	r2, r7, r0
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	0092      	lsls	r2, r2, #2
 800325c:	2107      	movs	r1, #7
 800325e:	50d1      	str	r1, [r2, r3]
			  		              	  k++;
 8003260:	0002      	movs	r2, r0
 8003262:	18bb      	adds	r3, r7, r2
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	18ba      	adds	r2, r7, r2
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	f000 fcab 	bl	8003bc6 <main+0xc2a>
			  		              }
			  		            } else if (i == 3) { //* para igualdade ( = )
 8003270:	23a0      	movs	r3, #160	; 0xa0
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d001      	beq.n	800327e <main+0x2e2>
 800327a:	f000 fca4 	bl	8003bc6 <main+0xc2a>
			  		              HAL_Delay(350);
 800327e:	23af      	movs	r3, #175	; 0xaf
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	0018      	movs	r0, r3
 8003284:	f001 f958 	bl	8004538 <HAL_Delay>
			  		              if(cont == 2){
 8003288:	23a8      	movs	r3, #168	; 0xa8
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d000      	beq.n	8003294 <main+0x2f8>
 8003292:	e20c      	b.n	80036ae <main+0x712>
									  OledClear();
 8003294:	f7ff f962 	bl	800255c <OledClear>
									  OledSetCursor(0,0);
 8003298:	2100      	movs	r1, #0
 800329a:	2000      	movs	r0, #0
 800329c:	f7fe ff9e 	bl	80021dc <OledSetCursor>
									  format = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	22a4      	movs	r2, #164	; 0xa4
 80032a4:	18ba      	adds	r2, r7, r2
 80032a6:	6013      	str	r3, [r2, #0]
									  valor2 = conc(vet, k);
 80032a8:	24c8      	movs	r4, #200	; 0xc8
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	2344      	movs	r3, #68	; 0x44
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	0011      	movs	r1, r2
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff fe2b 	bl	8002f10 <conc>
 80032ba:	0003      	movs	r3, r0
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fe fe6f 	bl	8001fa0 <__aeabi_i2d>
 80032c2:	0002      	movs	r2, r0
 80032c4:	000b      	movs	r3, r1
 80032c6:	2188      	movs	r1, #136	; 0x88
 80032c8:	1878      	adds	r0, r7, r1
 80032ca:	6002      	str	r2, [r0, #0]
 80032cc:	6043      	str	r3, [r0, #4]
									  intToStr(valor2, valUart, k);
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	f7fe fe2e 	bl	8001f34 <__aeabi_d2iz>
 80032d8:	193b      	adds	r3, r7, r4
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	003b      	movs	r3, r7
 80032de:	0019      	movs	r1, r3
 80032e0:	f7ff fbed 	bl	8002abe <intToStr>
									  switch(operacao){
 80032e4:	22bc      	movs	r2, #188	; 0xbc
 80032e6:	18bb      	adds	r3, r7, r2
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	d900      	bls.n	80032f0 <main+0x354>
 80032ee:	e163      	b.n	80035b8 <main+0x61c>
 80032f0:	18bb      	adds	r3, r7, r2
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	009a      	lsls	r2, r3, #2
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <main+0x3b0>)
 80032f8:	18d3      	adds	r3, r2, r3
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	469f      	mov	pc, r3
										  case 1:
											  op = soma(valor, valor2);
 80032fe:	2388      	movs	r3, #136	; 0x88
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	21c0      	movs	r1, #192	; 0xc0
 8003308:	1879      	adds	r1, r7, r1
 800330a:	6808      	ldr	r0, [r1, #0]
 800330c:	6849      	ldr	r1, [r1, #4]
 800330e:	f7ff fd07 	bl	8002d20 <soma>
 8003312:	0002      	movs	r2, r0
 8003314:	000b      	movs	r3, r1
 8003316:	21b0      	movs	r1, #176	; 0xb0
 8003318:	1879      	adds	r1, r7, r1
 800331a:	600a      	str	r2, [r1, #0]
 800331c:	604b      	str	r3, [r1, #4]
											  break;
 800331e:	e14b      	b.n	80035b8 <main+0x61c>
										  case 2:
											  op = sub(valor, valor2);
 8003320:	2388      	movs	r3, #136	; 0x88
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	21c0      	movs	r1, #192	; 0xc0
 800332a:	1879      	adds	r1, r7, r1
 800332c:	6808      	ldr	r0, [r1, #0]
 800332e:	6849      	ldr	r1, [r1, #4]
 8003330:	f7ff fd0e 	bl	8002d50 <sub>
 8003334:	0002      	movs	r2, r0
 8003336:	000b      	movs	r3, r1
 8003338:	21b0      	movs	r1, #176	; 0xb0
 800333a:	1879      	adds	r1, r7, r1
 800333c:	600a      	str	r2, [r1, #0]
 800333e:	604b      	str	r3, [r1, #4]
											  break;
 8003340:	e13a      	b.n	80035b8 <main+0x61c>
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	00000a0d 	.word	0x00000a0d
 8003348:	48001400 	.word	0x48001400
 800334c:	08007d5c 	.word	0x08007d5c
										  case 3:
											  op = mult(valor, valor2);
 8003350:	2388      	movs	r3, #136	; 0x88
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	21c0      	movs	r1, #192	; 0xc0
 800335a:	1879      	adds	r1, r7, r1
 800335c:	6808      	ldr	r0, [r1, #0]
 800335e:	6849      	ldr	r1, [r1, #4]
 8003360:	f7ff fd0e 	bl	8002d80 <mult>
 8003364:	0002      	movs	r2, r0
 8003366:	000b      	movs	r3, r1
 8003368:	21b0      	movs	r1, #176	; 0xb0
 800336a:	1879      	adds	r1, r7, r1
 800336c:	600a      	str	r2, [r1, #0]
 800336e:	604b      	str	r3, [r1, #4]
											  break;
 8003370:	e122      	b.n	80035b8 <main+0x61c>
										  case 4:
											  if(valor2 == 0){
 8003372:	2200      	movs	r2, #0
 8003374:	2300      	movs	r3, #0
 8003376:	2188      	movs	r1, #136	; 0x88
 8003378:	1879      	adds	r1, r7, r1
 800337a:	6808      	ldr	r0, [r1, #0]
 800337c:	6849      	ldr	r1, [r1, #4]
 800337e:	f7fd f851 	bl	8000424 <__aeabi_dcmpeq>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d019      	beq.n	80033ba <main+0x41e>
												  OledPutString("Error");
 8003386:	4bd3      	ldr	r3, [pc, #844]	; (80036d4 <main+0x738>)
 8003388:	0018      	movs	r0, r3
 800338a:	f7fe ff7b 	bl	8002284 <OledPutString>
												  HAL_Delay(3000);
 800338e:	4bd2      	ldr	r3, [pc, #840]	; (80036d8 <main+0x73c>)
 8003390:	0018      	movs	r0, r3
 8003392:	f001 f8d1 	bl	8004538 <HAL_Delay>
												  OledClear();
 8003396:	f7ff f8e1 	bl	800255c <OledClear>
												  OledSetCursor(0,0);
 800339a:	2100      	movs	r1, #0
 800339c:	2000      	movs	r0, #0
 800339e:	f7fe ff1d 	bl	80021dc <OledSetCursor>
												  cont1 = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	22ac      	movs	r2, #172	; 0xac
 80033a6:	18ba      	adds	r2, r7, r2
 80033a8:	6013      	str	r3, [r2, #0]
												  OledPutChar('0');
 80033aa:	2030      	movs	r0, #48	; 0x30
 80033ac:	f7fe ff50 	bl	8002250 <OledPutChar>
												  cont = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	22a8      	movs	r2, #168	; 0xa8
 80033b4:	18ba      	adds	r2, r7, r2
 80033b6:	6013      	str	r3, [r2, #0]
												  goto inicio;
 80033b8:	e638      	b.n	800302c <main+0x90>
											  }

											  op = divi(valor, valor2);
 80033ba:	2388      	movs	r3, #136	; 0x88
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	21c0      	movs	r1, #192	; 0xc0
 80033c4:	1879      	adds	r1, r7, r1
 80033c6:	6808      	ldr	r0, [r1, #0]
 80033c8:	6849      	ldr	r1, [r1, #4]
 80033ca:	f7ff fcf1 	bl	8002db0 <divi>
 80033ce:	0002      	movs	r2, r0
 80033d0:	000b      	movs	r3, r1
 80033d2:	21b0      	movs	r1, #176	; 0xb0
 80033d4:	1879      	adds	r1, r7, r1
 80033d6:	600a      	str	r2, [r1, #0]
 80033d8:	604b      	str	r3, [r1, #4]
											  break;
 80033da:	e0ed      	b.n	80035b8 <main+0x61c>
										  case 5:
											  op = pot(valor, valor2);
 80033dc:	2388      	movs	r3, #136	; 0x88
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	21c0      	movs	r1, #192	; 0xc0
 80033e6:	1879      	adds	r1, r7, r1
 80033e8:	6808      	ldr	r0, [r1, #0]
 80033ea:	6849      	ldr	r1, [r1, #4]
 80033ec:	f7ff fcff 	bl	8002dee <pot>
 80033f0:	0002      	movs	r2, r0
 80033f2:	000b      	movs	r3, r1
 80033f4:	21b0      	movs	r1, #176	; 0xb0
 80033f6:	1879      	adds	r1, r7, r1
 80033f8:	600a      	str	r2, [r1, #0]
 80033fa:	604b      	str	r3, [r1, #4]
											  break;
 80033fc:	e0dc      	b.n	80035b8 <main+0x61c>
										  case 6:
											  if(valor < 0){
 80033fe:	2200      	movs	r2, #0
 8003400:	2300      	movs	r3, #0
 8003402:	21c0      	movs	r1, #192	; 0xc0
 8003404:	1879      	adds	r1, r7, r1
 8003406:	6808      	ldr	r0, [r1, #0]
 8003408:	6849      	ldr	r1, [r1, #4]
 800340a:	f7fd f811 	bl	8000430 <__aeabi_dcmplt>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d019      	beq.n	8003446 <main+0x4aa>
												  OledPutString("Error");
 8003412:	4bb0      	ldr	r3, [pc, #704]	; (80036d4 <main+0x738>)
 8003414:	0018      	movs	r0, r3
 8003416:	f7fe ff35 	bl	8002284 <OledPutString>
												  HAL_Delay(3000);
 800341a:	4baf      	ldr	r3, [pc, #700]	; (80036d8 <main+0x73c>)
 800341c:	0018      	movs	r0, r3
 800341e:	f001 f88b 	bl	8004538 <HAL_Delay>
												  OledClear();
 8003422:	f7ff f89b 	bl	800255c <OledClear>
												  OledSetCursor(0,0);
 8003426:	2100      	movs	r1, #0
 8003428:	2000      	movs	r0, #0
 800342a:	f7fe fed7 	bl	80021dc <OledSetCursor>
												  cont1 = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	22ac      	movs	r2, #172	; 0xac
 8003432:	18ba      	adds	r2, r7, r2
 8003434:	6013      	str	r3, [r2, #0]
												  OledPutChar('0');
 8003436:	2030      	movs	r0, #48	; 0x30
 8003438:	f7fe ff0a 	bl	8002250 <OledPutChar>
												  cont = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	22a8      	movs	r2, #168	; 0xa8
 8003440:	18ba      	adds	r2, r7, r2
 8003442:	6013      	str	r3, [r2, #0]
												  goto inicio;
 8003444:	e5f2      	b.n	800302c <main+0x90>
											  }

											  op = raiz(valor, valor2);
 8003446:	2388      	movs	r3, #136	; 0x88
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	21c0      	movs	r1, #192	; 0xc0
 8003450:	1879      	adds	r1, r7, r1
 8003452:	6808      	ldr	r0, [r1, #0]
 8003454:	6849      	ldr	r1, [r1, #4]
 8003456:	f7ff fce3 	bl	8002e20 <raiz>
 800345a:	0002      	movs	r2, r0
 800345c:	000b      	movs	r3, r1
 800345e:	21b0      	movs	r1, #176	; 0xb0
 8003460:	1879      	adds	r1, r7, r1
 8003462:	600a      	str	r2, [r1, #0]
 8003464:	604b      	str	r3, [r1, #4]
											  break;
 8003466:	e0a7      	b.n	80035b8 <main+0x61c>
										  case 7:
											  if(valor < 0){
 8003468:	2200      	movs	r2, #0
 800346a:	2300      	movs	r3, #0
 800346c:	21c0      	movs	r1, #192	; 0xc0
 800346e:	1879      	adds	r1, r7, r1
 8003470:	6808      	ldr	r0, [r1, #0]
 8003472:	6849      	ldr	r1, [r1, #4]
 8003474:	f7fc ffdc 	bl	8000430 <__aeabi_dcmplt>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d019      	beq.n	80034b0 <main+0x514>
												  OledPutString("Error");
 800347c:	4b95      	ldr	r3, [pc, #596]	; (80036d4 <main+0x738>)
 800347e:	0018      	movs	r0, r3
 8003480:	f7fe ff00 	bl	8002284 <OledPutString>
												  HAL_Delay(3000);
 8003484:	4b94      	ldr	r3, [pc, #592]	; (80036d8 <main+0x73c>)
 8003486:	0018      	movs	r0, r3
 8003488:	f001 f856 	bl	8004538 <HAL_Delay>
												  OledClear();
 800348c:	f7ff f866 	bl	800255c <OledClear>
												  OledSetCursor(0,0);
 8003490:	2100      	movs	r1, #0
 8003492:	2000      	movs	r0, #0
 8003494:	f7fe fea2 	bl	80021dc <OledSetCursor>
												  cont1 = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	22ac      	movs	r2, #172	; 0xac
 800349c:	18ba      	adds	r2, r7, r2
 800349e:	6013      	str	r3, [r2, #0]
												  OledPutChar('0');
 80034a0:	2030      	movs	r0, #48	; 0x30
 80034a2:	f7fe fed5 	bl	8002250 <OledPutChar>
												  cont = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	22a8      	movs	r2, #168	; 0xa8
 80034aa:	18ba      	adds	r2, r7, r2
 80034ac:	6013      	str	r3, [r2, #0]
												  goto inicio;
 80034ae:	e5bd      	b.n	800302c <main+0x90>
											  }
											  if(valor != (int)valor){
 80034b0:	24c0      	movs	r4, #192	; 0xc0
 80034b2:	193b      	adds	r3, r7, r4
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	f7fe fd3c 	bl	8001f34 <__aeabi_d2iz>
 80034bc:	0003      	movs	r3, r0
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fe fd6e 	bl	8001fa0 <__aeabi_i2d>
 80034c4:	0002      	movs	r2, r0
 80034c6:	000b      	movs	r3, r1
 80034c8:	1939      	adds	r1, r7, r4
 80034ca:	6808      	ldr	r0, [r1, #0]
 80034cc:	6849      	ldr	r1, [r1, #4]
 80034ce:	f7fc ffa9 	bl	8000424 <__aeabi_dcmpeq>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d119      	bne.n	800350a <main+0x56e>
												  OledPutString("Indefinido");
 80034d6:	4b81      	ldr	r3, [pc, #516]	; (80036dc <main+0x740>)
 80034d8:	0018      	movs	r0, r3
 80034da:	f7fe fed3 	bl	8002284 <OledPutString>
												  HAL_Delay(3000);
 80034de:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <main+0x73c>)
 80034e0:	0018      	movs	r0, r3
 80034e2:	f001 f829 	bl	8004538 <HAL_Delay>
												  OledClear();
 80034e6:	f7ff f839 	bl	800255c <OledClear>
												  OledSetCursor(0,0);
 80034ea:	2100      	movs	r1, #0
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fe fe75 	bl	80021dc <OledSetCursor>
												  cont1 = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	22ac      	movs	r2, #172	; 0xac
 80034f6:	18ba      	adds	r2, r7, r2
 80034f8:	6013      	str	r3, [r2, #0]
												  OledPutChar('0');
 80034fa:	2030      	movs	r0, #48	; 0x30
 80034fc:	f7fe fea8 	bl	8002250 <OledPutChar>
												  cont = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	22a8      	movs	r2, #168	; 0xa8
 8003504:	18ba      	adds	r2, r7, r2
 8003506:	6013      	str	r3, [r2, #0]
												  goto inicio;
 8003508:	e590      	b.n	800302c <main+0x90>
											  }
											  op = fat(valor);
 800350a:	23c0      	movs	r3, #192	; 0xc0
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	f7fe fd0f 	bl	8001f34 <__aeabi_d2iz>
 8003516:	0003      	movs	r3, r0
 8003518:	0018      	movs	r0, r3
 800351a:	f7ff fca9 	bl	8002e70 <fat>
 800351e:	0003      	movs	r3, r0
 8003520:	0018      	movs	r0, r3
 8003522:	f7fe fd3d 	bl	8001fa0 <__aeabi_i2d>
 8003526:	0002      	movs	r2, r0
 8003528:	000b      	movs	r3, r1
 800352a:	21b0      	movs	r1, #176	; 0xb0
 800352c:	1879      	adds	r1, r7, r1
 800352e:	600a      	str	r2, [r1, #0]
 8003530:	604b      	str	r3, [r1, #4]
											  break;
 8003532:	e041      	b.n	80035b8 <main+0x61c>
										  case 8:
											  if(valor <= 0){
 8003534:	2200      	movs	r2, #0
 8003536:	2300      	movs	r3, #0
 8003538:	21c0      	movs	r1, #192	; 0xc0
 800353a:	1879      	adds	r1, r7, r1
 800353c:	6808      	ldr	r0, [r1, #0]
 800353e:	6849      	ldr	r1, [r1, #4]
 8003540:	f7fc ff80 	bl	8000444 <__aeabi_dcmple>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d019      	beq.n	800357c <main+0x5e0>
												  OledPutString("Error");
 8003548:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <main+0x738>)
 800354a:	0018      	movs	r0, r3
 800354c:	f7fe fe9a 	bl	8002284 <OledPutString>
												  HAL_Delay(3000);
 8003550:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <main+0x73c>)
 8003552:	0018      	movs	r0, r3
 8003554:	f000 fff0 	bl	8004538 <HAL_Delay>
												  OledClear();
 8003558:	f7ff f800 	bl	800255c <OledClear>
												  OledSetCursor(0,0);
 800355c:	2100      	movs	r1, #0
 800355e:	2000      	movs	r0, #0
 8003560:	f7fe fe3c 	bl	80021dc <OledSetCursor>
												  cont1 = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	22ac      	movs	r2, #172	; 0xac
 8003568:	18ba      	adds	r2, r7, r2
 800356a:	6013      	str	r3, [r2, #0]
												  OledPutChar('0');
 800356c:	2030      	movs	r0, #48	; 0x30
 800356e:	f7fe fe6f 	bl	8002250 <OledPutChar>
												  cont = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	22a8      	movs	r2, #168	; 0xa8
 8003576:	18ba      	adds	r2, r7, r2
 8003578:	6013      	str	r3, [r2, #0]
												  goto inicio;
 800357a:	e557      	b.n	800302c <main+0x90>
											  }
											  op = logarit(valor);
 800357c:	23c0      	movs	r3, #192	; 0xc0
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	0010      	movs	r0, r2
 8003586:	0019      	movs	r1, r3
 8003588:	f7ff fc87 	bl	8002e9a <logarit>
 800358c:	0002      	movs	r2, r0
 800358e:	000b      	movs	r3, r1
 8003590:	21b0      	movs	r1, #176	; 0xb0
 8003592:	1879      	adds	r1, r7, r1
 8003594:	600a      	str	r2, [r1, #0]
 8003596:	604b      	str	r3, [r1, #4]
											  break;
 8003598:	e00e      	b.n	80035b8 <main+0x61c>
										  case 9:
											  op = expon(valor);
 800359a:	23c0      	movs	r3, #192	; 0xc0
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0010      	movs	r0, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	f7ff fc95 	bl	8002ed4 <expon>
 80035aa:	0002      	movs	r2, r0
 80035ac:	000b      	movs	r3, r1
 80035ae:	21b0      	movs	r1, #176	; 0xb0
 80035b0:	1879      	adds	r1, r7, r1
 80035b2:	600a      	str	r2, [r1, #0]
 80035b4:	604b      	str	r3, [r1, #4]
											  break;
 80035b6:	46c0      	nop			; (mov r8, r8)
									  }
									  ftoa(op, txt2);
 80035b8:	2394      	movs	r3, #148	; 0x94
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	26b0      	movs	r6, #176	; 0xb0
 80035c0:	19ba      	adds	r2, r7, r6
 80035c2:	6810      	ldr	r0, [r2, #0]
 80035c4:	6851      	ldr	r1, [r2, #4]
 80035c6:	001a      	movs	r2, r3
 80035c8:	f7ff faac 	bl	8002b24 <ftoa>
									  OledPutString(txt);
 80035cc:	2334      	movs	r3, #52	; 0x34
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7fe fe57 	bl	8002284 <OledPutString>
									  cont = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	22a8      	movs	r2, #168	; 0xa8
 80035da:	18ba      	adds	r2, r7, r2
 80035dc:	6013      	str	r3, [r2, #0]
									  // INICIO - Formatação para o histórico
									  k = strlen(operUart); // reaproveitamento da variável k
 80035de:	2410      	movs	r4, #16
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fc fd90 	bl	8000108 <strlen>
 80035e8:	0003      	movs	r3, r0
 80035ea:	25c8      	movs	r5, #200	; 0xc8
 80035ec:	197a      	adds	r2, r7, r5
 80035ee:	6013      	str	r3, [r2, #0]
									  operUart[k] = pressOp;
 80035f0:	0021      	movs	r1, r4
 80035f2:	187a      	adds	r2, r7, r1
 80035f4:	1978      	adds	r0, r7, r5
 80035f6:	6803      	ldr	r3, [r0, #0]
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	22cf      	movs	r2, #207	; 0xcf
 80035fc:	18ba      	adds	r2, r7, r2
 80035fe:	7812      	ldrb	r2, [r2, #0]
 8003600:	701a      	strb	r2, [r3, #0]
									  operUart[k+1] = '\0';
 8003602:	197a      	adds	r2, r7, r5
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	000c      	movs	r4, r1
 800360a:	193a      	adds	r2, r7, r4
 800360c:	2100      	movs	r1, #0
 800360e:	54d1      	strb	r1, [r2, r3]
									  strcat(operUart, valUart);
 8003610:	003a      	movs	r2, r7
 8003612:	193b      	adds	r3, r7, r4
 8003614:	0011      	movs	r1, r2
 8003616:	0018      	movs	r0, r3
 8003618:	f002 ff16 	bl	8006448 <strcat>
									  k = strlen(operUart); // reaproveitamento da variável k
 800361c:	193b      	adds	r3, r7, r4
 800361e:	0018      	movs	r0, r3
 8003620:	f7fc fd72 	bl	8000108 <strlen>
 8003624:	0003      	movs	r3, r0
 8003626:	0028      	movs	r0, r5
 8003628:	183a      	adds	r2, r7, r0
 800362a:	6013      	str	r3, [r2, #0]
									  operUart[k] = '=';
 800362c:	0021      	movs	r1, r4
 800362e:	187a      	adds	r2, r7, r1
 8003630:	183c      	adds	r4, r7, r0
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	223d      	movs	r2, #61	; 0x3d
 8003638:	701a      	strb	r2, [r3, #0]
									  operUart[k+1] = '\0';
 800363a:	183a      	adds	r2, r7, r0
 800363c:	6813      	ldr	r3, [r2, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	000d      	movs	r5, r1
 8003642:	187a      	adds	r2, r7, r1
 8003644:	2100      	movs	r1, #0
 8003646:	54d1      	strb	r1, [r2, r3]
									  k = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	183a      	adds	r2, r7, r0
 800364c:	6013      	str	r3, [r2, #0]
									  strcat(operUart, txt);
 800364e:	2334      	movs	r3, #52	; 0x34
 8003650:	18fa      	adds	r2, r7, r3
 8003652:	197b      	adds	r3, r7, r5
 8003654:	0011      	movs	r1, r2
 8003656:	0018      	movs	r0, r3
 8003658:	f002 fef6 	bl	8006448 <strcat>
									  HAL_UART_Transmit(&huart1, strcat(operUart, linha), strlen(strcat(operUart, linha)), 100);
 800365c:	2330      	movs	r3, #48	; 0x30
 800365e:	18fa      	adds	r2, r7, r3
 8003660:	197b      	adds	r3, r7, r5
 8003662:	0011      	movs	r1, r2
 8003664:	0018      	movs	r0, r3
 8003666:	f002 feef 	bl	8006448 <strcat>
 800366a:	0004      	movs	r4, r0
 800366c:	2330      	movs	r3, #48	; 0x30
 800366e:	18fa      	adds	r2, r7, r3
 8003670:	197b      	adds	r3, r7, r5
 8003672:	0011      	movs	r1, r2
 8003674:	0018      	movs	r0, r3
 8003676:	f002 fee7 	bl	8006448 <strcat>
 800367a:	0003      	movs	r3, r0
 800367c:	0018      	movs	r0, r3
 800367e:	f7fc fd43 	bl	8000108 <strlen>
 8003682:	0003      	movs	r3, r0
 8003684:	b29a      	uxth	r2, r3
 8003686:	4816      	ldr	r0, [pc, #88]	; (80036e0 <main+0x744>)
 8003688:	2364      	movs	r3, #100	; 0x64
 800368a:	0021      	movs	r1, r4
 800368c:	f002 fb00 	bl	8005c90 <HAL_UART_Transmit>
									  valor = op;
 8003690:	19bb      	adds	r3, r7, r6
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	21c0      	movs	r1, #192	; 0xc0
 8003698:	1878      	adds	r0, r7, r1
 800369a:	6002      	str	r2, [r0, #0]
 800369c:	6043      	str	r3, [r0, #4]
									  ftoa(valor, operUart);
 800369e:	197b      	adds	r3, r7, r5
 80036a0:	187a      	adds	r2, r7, r1
 80036a2:	6810      	ldr	r0, [r2, #0]
 80036a4:	6851      	ldr	r1, [r2, #4]
 80036a6:	001a      	movs	r2, r3
 80036a8:	f7ff fa3c 	bl	8002b24 <ftoa>
									  // FIM - Formatação para o histórico
									  goto inicio;
 80036ac:	e4be      	b.n	800302c <main+0x90>
			  		              } else{
			  		            	  // Código para apagar o último caractere
			  		            	  OledClear();
 80036ae:	f7fe ff55 	bl	800255c <OledClear>
			  		            	  OledSetCursor(0,0);
 80036b2:	2100      	movs	r1, #0
 80036b4:	2000      	movs	r0, #0
 80036b6:	f7fe fd91 	bl	80021dc <OledSetCursor>
			  		            	  if(k==0){
 80036ba:	23c8      	movs	r3, #200	; 0xc8
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10f      	bne.n	80036e4 <main+0x748>
			  		            		  OledPutChar('0');
 80036c4:	2030      	movs	r0, #48	; 0x30
 80036c6:	f7fe fdc3 	bl	8002250 <OledPutChar>
			  		            		  cont1 = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	22ac      	movs	r2, #172	; 0xac
 80036ce:	18ba      	adds	r2, r7, r2
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e278      	b.n	8003bc6 <main+0xc2a>
 80036d4:	08007968 	.word	0x08007968
 80036d8:	00000bb8 	.word	0x00000bb8
 80036dc:	08007970 	.word	0x08007970
 80036e0:	20000434 	.word	0x20000434
			  		            	  }
			  		            	  else{
				  		            	  valor = conc(vet, k);
 80036e4:	24c8      	movs	r4, #200	; 0xc8
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	2344      	movs	r3, #68	; 0x44
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	0011      	movs	r1, r2
 80036f0:	0018      	movs	r0, r3
 80036f2:	f7ff fc0d 	bl	8002f10 <conc>
 80036f6:	0003      	movs	r3, r0
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7fe fc51 	bl	8001fa0 <__aeabi_i2d>
 80036fe:	0002      	movs	r2, r0
 8003700:	000b      	movs	r3, r1
 8003702:	21c0      	movs	r1, #192	; 0xc0
 8003704:	1879      	adds	r1, r7, r1
 8003706:	600a      	str	r2, [r1, #0]
 8003708:	604b      	str	r3, [r1, #4]
				  		            	  k--;
 800370a:	193b      	adds	r3, r7, r4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3b01      	subs	r3, #1
 8003710:	193a      	adds	r2, r7, r4
 8003712:	6013      	str	r3, [r2, #0]
				  		            	  if(k==0){
 8003714:	193b      	adds	r3, r7, r4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <main+0x78e>
				  		            		  OledPutChar('0');
 800371c:	2030      	movs	r0, #48	; 0x30
 800371e:	f7fe fd97 	bl	8002250 <OledPutChar>
				  		            		  cont1 = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	22ac      	movs	r2, #172	; 0xac
 8003726:	18ba      	adds	r2, r7, r2
 8003728:	6013      	str	r3, [r2, #0]
				  		            	  }
				  		            	  ftoa(valor, txt2);
 800372a:	2494      	movs	r4, #148	; 0x94
 800372c:	193b      	adds	r3, r7, r4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	22c0      	movs	r2, #192	; 0xc0
 8003732:	18ba      	adds	r2, r7, r2
 8003734:	6810      	ldr	r0, [r2, #0]
 8003736:	6851      	ldr	r1, [r2, #4]
 8003738:	001a      	movs	r2, r3
 800373a:	f7ff f9f3 	bl	8002b24 <ftoa>
				  		            	  apagar(txt2);
 800373e:	193b      	adds	r3, r7, r4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0018      	movs	r0, r3
 8003744:	f7ff f8ce 	bl	80028e4 <apagar>
				  		            	  OledPutString(txt2);
 8003748:	193b      	adds	r3, r7, r4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0018      	movs	r0, r3
 800374e:	f7fe fd99 	bl	8002284 <OledPutString>
 8003752:	e238      	b.n	8003bc6 <main+0xc2a>
			  		            	  }
			  		              }
			  		            }
			  		          }else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1) {
 8003754:	4bda      	ldr	r3, [pc, #872]	; (8003ac0 <main+0xb24>)
 8003756:	2102      	movs	r1, #2
 8003758:	0018      	movs	r0, r3
 800375a:	f001 f935 	bl	80049c8 <HAL_GPIO_ReadPin>
 800375e:	0003      	movs	r3, r0
 8003760:	2b01      	cmp	r3, #1
 8003762:	d000      	beq.n	8003766 <main+0x7ca>
 8003764:	e0eb      	b.n	800393e <main+0x9a2>
			  		            if (i == 0) {
 8003766:	23a0      	movs	r3, #160	; 0xa0
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d137      	bne.n	80037e0 <main+0x844>
					  		      if(cont1 == 0 && cont != 2){
 8003770:	24ac      	movs	r4, #172	; 0xac
 8003772:	193b      	adds	r3, r7, r4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <main+0x7fe>
 800377a:	23a8      	movs	r3, #168	; 0xa8
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d00a      	beq.n	800379a <main+0x7fe>
					  		          OledClear();
 8003784:	f7fe feea 	bl	800255c <OledClear>
					  	              OledSetCursor(0,0);
 8003788:	2100      	movs	r1, #0
 800378a:	2000      	movs	r0, #0
 800378c:	f7fe fd26 	bl	80021dc <OledSetCursor>
					  	              cont1++;
 8003790:	193b      	adds	r3, r7, r4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	193a      	adds	r2, r7, r4
 8003798:	6013      	str	r3, [r2, #0]
					  	          }
			  		              pressionado = '2';
 800379a:	249b      	movs	r4, #155	; 0x9b
 800379c:	193b      	adds	r3, r7, r4
 800379e:	2232      	movs	r2, #50	; 0x32
 80037a0:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 80037a2:	23af      	movs	r3, #175	; 0xaf
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 fec6 	bl	8004538 <HAL_Delay>
			  		              if(format != 1){
 80037ac:	23a4      	movs	r3, #164	; 0xa4
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d100      	bne.n	80037b8 <main+0x81c>
 80037b6:	e206      	b.n	8003bc6 <main+0xc2a>
			  		            	  OledPutChar(pressionado);
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	0018      	movs	r0, r3
 80037be:	f7fe fd47 	bl	8002250 <OledPutChar>
			  		              	  vet[k]=2;
 80037c2:	2344      	movs	r3, #68	; 0x44
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	20c8      	movs	r0, #200	; 0xc8
 80037c8:	183a      	adds	r2, r7, r0
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	0092      	lsls	r2, r2, #2
 80037ce:	2102      	movs	r1, #2
 80037d0:	50d1      	str	r1, [r2, r3]
			  		              	  k++;
 80037d2:	0002      	movs	r2, r0
 80037d4:	18bb      	adds	r3, r7, r2
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	18ba      	adds	r2, r7, r2
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e1f2      	b.n	8003bc6 <main+0xc2a>
			  		              }
			  		            } else if (i == 1) {
 80037e0:	23a0      	movs	r3, #160	; 0xa0
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d137      	bne.n	800385a <main+0x8be>
					  		      if(cont1 == 0 && cont != 2){
 80037ea:	24ac      	movs	r4, #172	; 0xac
 80037ec:	193b      	adds	r3, r7, r4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10f      	bne.n	8003814 <main+0x878>
 80037f4:	23a8      	movs	r3, #168	; 0xa8
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d00a      	beq.n	8003814 <main+0x878>
					  		          OledClear();
 80037fe:	f7fe fead 	bl	800255c <OledClear>
					  	              OledSetCursor(0,0);
 8003802:	2100      	movs	r1, #0
 8003804:	2000      	movs	r0, #0
 8003806:	f7fe fce9 	bl	80021dc <OledSetCursor>
					  	              cont1++;
 800380a:	193b      	adds	r3, r7, r4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	193a      	adds	r2, r7, r4
 8003812:	6013      	str	r3, [r2, #0]
					              }
			  		              pressionado = '5';
 8003814:	249b      	movs	r4, #155	; 0x9b
 8003816:	193b      	adds	r3, r7, r4
 8003818:	2235      	movs	r2, #53	; 0x35
 800381a:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 800381c:	23af      	movs	r3, #175	; 0xaf
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	0018      	movs	r0, r3
 8003822:	f000 fe89 	bl	8004538 <HAL_Delay>
			  		              if(format != 1){
 8003826:	23a4      	movs	r3, #164	; 0xa4
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d100      	bne.n	8003832 <main+0x896>
 8003830:	e1c9      	b.n	8003bc6 <main+0xc2a>
			  		            	  OledPutChar(pressionado);
 8003832:	193b      	adds	r3, r7, r4
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	0018      	movs	r0, r3
 8003838:	f7fe fd0a 	bl	8002250 <OledPutChar>
			  		              	  vet[k]=5;
 800383c:	2344      	movs	r3, #68	; 0x44
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	20c8      	movs	r0, #200	; 0xc8
 8003842:	183a      	adds	r2, r7, r0
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	2105      	movs	r1, #5
 800384a:	50d1      	str	r1, [r2, r3]
			  		              	  k++;
 800384c:	0002      	movs	r2, r0
 800384e:	18bb      	adds	r3, r7, r2
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	18ba      	adds	r2, r7, r2
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e1b5      	b.n	8003bc6 <main+0xc2a>
			  		              }
			  		            } else if (i == 2) {
 800385a:	23a0      	movs	r3, #160	; 0xa0
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d137      	bne.n	80038d4 <main+0x938>
					  		      if(cont1 == 0 && cont != 2){
 8003864:	24ac      	movs	r4, #172	; 0xac
 8003866:	193b      	adds	r3, r7, r4
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10f      	bne.n	800388e <main+0x8f2>
 800386e:	23a8      	movs	r3, #168	; 0xa8
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d00a      	beq.n	800388e <main+0x8f2>
					  		          OledClear();
 8003878:	f7fe fe70 	bl	800255c <OledClear>
					  	              OledSetCursor(0,0);
 800387c:	2100      	movs	r1, #0
 800387e:	2000      	movs	r0, #0
 8003880:	f7fe fcac 	bl	80021dc <OledSetCursor>
					  	              cont1++;
 8003884:	193b      	adds	r3, r7, r4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	193a      	adds	r2, r7, r4
 800388c:	6013      	str	r3, [r2, #0]
					  	          }
			  		              pressionado = '8';
 800388e:	249b      	movs	r4, #155	; 0x9b
 8003890:	193b      	adds	r3, r7, r4
 8003892:	2238      	movs	r2, #56	; 0x38
 8003894:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 8003896:	23af      	movs	r3, #175	; 0xaf
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	0018      	movs	r0, r3
 800389c:	f000 fe4c 	bl	8004538 <HAL_Delay>
			  		              if(format != 1){
 80038a0:	23a4      	movs	r3, #164	; 0xa4
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d100      	bne.n	80038ac <main+0x910>
 80038aa:	e18c      	b.n	8003bc6 <main+0xc2a>
			  		            	  OledPutChar(pressionado);
 80038ac:	193b      	adds	r3, r7, r4
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7fe fccd 	bl	8002250 <OledPutChar>
			  		              	  vet[k]=8;
 80038b6:	2344      	movs	r3, #68	; 0x44
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	20c8      	movs	r0, #200	; 0xc8
 80038bc:	183a      	adds	r2, r7, r0
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	0092      	lsls	r2, r2, #2
 80038c2:	2108      	movs	r1, #8
 80038c4:	50d1      	str	r1, [r2, r3]
			  		              	  k++;
 80038c6:	0002      	movs	r2, r0
 80038c8:	18bb      	adds	r3, r7, r2
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	18ba      	adds	r2, r7, r2
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e178      	b.n	8003bc6 <main+0xc2a>
			  		              }
			  		            } else if (i == 3) {
 80038d4:	23a0      	movs	r3, #160	; 0xa0
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d000      	beq.n	80038e0 <main+0x944>
 80038de:	e172      	b.n	8003bc6 <main+0xc2a>
			  		              pressionado = '0';
 80038e0:	239b      	movs	r3, #155	; 0x9b
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	2230      	movs	r2, #48	; 0x30
 80038e6:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 80038e8:	23af      	movs	r3, #175	; 0xaf
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 fe23 	bl	8004538 <HAL_Delay>
			  		              if(k != 0 || cont == 2){
 80038f2:	23c8      	movs	r3, #200	; 0xc8
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <main+0x96c>
 80038fc:	23a8      	movs	r3, #168	; 0xa8
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d000      	beq.n	8003908 <main+0x96c>
 8003906:	e15e      	b.n	8003bc6 <main+0xc2a>
									  if(format != 1){
 8003908:	23a4      	movs	r3, #164	; 0xa4
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d100      	bne.n	8003914 <main+0x978>
 8003912:	e158      	b.n	8003bc6 <main+0xc2a>
										  OledPutChar(pressionado);
 8003914:	239b      	movs	r3, #155	; 0x9b
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	0018      	movs	r0, r3
 800391c:	f7fe fc98 	bl	8002250 <OledPutChar>
									  	  vet[k]=0;
 8003920:	2344      	movs	r3, #68	; 0x44
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	20c8      	movs	r0, #200	; 0xc8
 8003926:	183a      	adds	r2, r7, r0
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	0092      	lsls	r2, r2, #2
 800392c:	2100      	movs	r1, #0
 800392e:	50d1      	str	r1, [r2, r3]
									  	  k++;
 8003930:	0002      	movs	r2, r0
 8003932:	18bb      	adds	r3, r7, r2
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	18ba      	adds	r2, r7, r2
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	e143      	b.n	8003bc6 <main+0xc2a>
									  }
			  		              }
			  		            }

			  		          }else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 800393e:	2390      	movs	r3, #144	; 0x90
 8003940:	05db      	lsls	r3, r3, #23
 8003942:	2140      	movs	r1, #64	; 0x40
 8003944:	0018      	movs	r0, r3
 8003946:	f001 f83f 	bl	80049c8 <HAL_GPIO_ReadPin>
 800394a:	0003      	movs	r3, r0
 800394c:	2b01      	cmp	r3, #1
 800394e:	d000      	beq.n	8003952 <main+0x9b6>
 8003950:	e139      	b.n	8003bc6 <main+0xc2a>
			  		            if (i == 0) {
 8003952:	23a0      	movs	r3, #160	; 0xa0
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d137      	bne.n	80039cc <main+0xa30>
					  		      if(cont1 == 0 && cont != 2){
 800395c:	24ac      	movs	r4, #172	; 0xac
 800395e:	193b      	adds	r3, r7, r4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <main+0x9ea>
 8003966:	23a8      	movs	r3, #168	; 0xa8
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d00a      	beq.n	8003986 <main+0x9ea>
					  		          OledClear();
 8003970:	f7fe fdf4 	bl	800255c <OledClear>
					  	              OledSetCursor(0,0);
 8003974:	2100      	movs	r1, #0
 8003976:	2000      	movs	r0, #0
 8003978:	f7fe fc30 	bl	80021dc <OledSetCursor>
					  	              cont1++;
 800397c:	193b      	adds	r3, r7, r4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	193a      	adds	r2, r7, r4
 8003984:	6013      	str	r3, [r2, #0]
					              }
			  		              pressionado = '3';
 8003986:	249b      	movs	r4, #155	; 0x9b
 8003988:	193b      	adds	r3, r7, r4
 800398a:	2233      	movs	r2, #51	; 0x33
 800398c:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 800398e:	23af      	movs	r3, #175	; 0xaf
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	0018      	movs	r0, r3
 8003994:	f000 fdd0 	bl	8004538 <HAL_Delay>
			  		              if(format != 1){
 8003998:	23a4      	movs	r3, #164	; 0xa4
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d100      	bne.n	80039a4 <main+0xa08>
 80039a2:	e110      	b.n	8003bc6 <main+0xc2a>
			  		            	  OledPutChar(pressionado);
 80039a4:	193b      	adds	r3, r7, r4
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f7fe fc51 	bl	8002250 <OledPutChar>
			  		              	  vet[k]=3;
 80039ae:	2344      	movs	r3, #68	; 0x44
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	20c8      	movs	r0, #200	; 0xc8
 80039b4:	183a      	adds	r2, r7, r0
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	0092      	lsls	r2, r2, #2
 80039ba:	2103      	movs	r1, #3
 80039bc:	50d1      	str	r1, [r2, r3]
			  		              	  k++;
 80039be:	0002      	movs	r2, r0
 80039c0:	18bb      	adds	r3, r7, r2
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	18ba      	adds	r2, r7, r2
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e0fc      	b.n	8003bc6 <main+0xc2a>
			  		              }
			  		            } else if (i == 1) {
 80039cc:	23a0      	movs	r3, #160	; 0xa0
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d137      	bne.n	8003a46 <main+0xaaa>
					  		      if(cont1 == 0 && cont != 2){
 80039d6:	24ac      	movs	r4, #172	; 0xac
 80039d8:	193b      	adds	r3, r7, r4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10f      	bne.n	8003a00 <main+0xa64>
 80039e0:	23a8      	movs	r3, #168	; 0xa8
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d00a      	beq.n	8003a00 <main+0xa64>
					  		          OledClear();
 80039ea:	f7fe fdb7 	bl	800255c <OledClear>
					  	              OledSetCursor(0,0);
 80039ee:	2100      	movs	r1, #0
 80039f0:	2000      	movs	r0, #0
 80039f2:	f7fe fbf3 	bl	80021dc <OledSetCursor>
					  	              cont1++;
 80039f6:	193b      	adds	r3, r7, r4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	193a      	adds	r2, r7, r4
 80039fe:	6013      	str	r3, [r2, #0]
					              }
			  		              pressionado = '6';
 8003a00:	249b      	movs	r4, #155	; 0x9b
 8003a02:	193b      	adds	r3, r7, r4
 8003a04:	2236      	movs	r2, #54	; 0x36
 8003a06:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 8003a08:	23af      	movs	r3, #175	; 0xaf
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 fd93 	bl	8004538 <HAL_Delay>
			  		              if(format != 1){
 8003a12:	23a4      	movs	r3, #164	; 0xa4
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d100      	bne.n	8003a1e <main+0xa82>
 8003a1c:	e0d3      	b.n	8003bc6 <main+0xc2a>
			  		            	  OledPutChar(pressionado);
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f7fe fc14 	bl	8002250 <OledPutChar>
			  		              	  vet[k]=6;
 8003a28:	2344      	movs	r3, #68	; 0x44
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	20c8      	movs	r0, #200	; 0xc8
 8003a2e:	183a      	adds	r2, r7, r0
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	0092      	lsls	r2, r2, #2
 8003a34:	2106      	movs	r1, #6
 8003a36:	50d1      	str	r1, [r2, r3]
			  		              	  k++;
 8003a38:	0002      	movs	r2, r0
 8003a3a:	18bb      	adds	r3, r7, r2
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	18ba      	adds	r2, r7, r2
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e0bf      	b.n	8003bc6 <main+0xc2a>
			  		              }
			  		            } else if (i == 2) {
 8003a46:	23a0      	movs	r3, #160	; 0xa0
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d139      	bne.n	8003ac4 <main+0xb28>
					  		      if(cont1 == 0 && cont != 2){
 8003a50:	24ac      	movs	r4, #172	; 0xac
 8003a52:	193b      	adds	r3, r7, r4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <main+0xade>
 8003a5a:	23a8      	movs	r3, #168	; 0xa8
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d00a      	beq.n	8003a7a <main+0xade>
					  		          OledClear();
 8003a64:	f7fe fd7a 	bl	800255c <OledClear>
					  	              OledSetCursor(0,0);
 8003a68:	2100      	movs	r1, #0
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7fe fbb6 	bl	80021dc <OledSetCursor>
					  	              cont1++;
 8003a70:	193b      	adds	r3, r7, r4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	193a      	adds	r2, r7, r4
 8003a78:	6013      	str	r3, [r2, #0]
					  	          }
			  		              pressionado = '9';
 8003a7a:	249b      	movs	r4, #155	; 0x9b
 8003a7c:	193b      	adds	r3, r7, r4
 8003a7e:	2239      	movs	r2, #57	; 0x39
 8003a80:	701a      	strb	r2, [r3, #0]
			  		              HAL_Delay(350);
 8003a82:	23af      	movs	r3, #175	; 0xaf
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 fd56 	bl	8004538 <HAL_Delay>
			  		              if(format != 1){
 8003a8c:	23a4      	movs	r3, #164	; 0xa4
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d100      	bne.n	8003a98 <main+0xafc>
 8003a96:	e096      	b.n	8003bc6 <main+0xc2a>
			  		            	  OledPutChar(pressionado);
 8003a98:	193b      	adds	r3, r7, r4
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7fe fbd7 	bl	8002250 <OledPutChar>
			  		              	  vet[k]=9;
 8003aa2:	2344      	movs	r3, #68	; 0x44
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	20c8      	movs	r0, #200	; 0xc8
 8003aa8:	183a      	adds	r2, r7, r0
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	0092      	lsls	r2, r2, #2
 8003aae:	2109      	movs	r1, #9
 8003ab0:	50d1      	str	r1, [r2, r3]
			  		              	  k++;
 8003ab2:	0002      	movs	r2, r0
 8003ab4:	18bb      	adds	r3, r7, r2
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	18ba      	adds	r2, r7, r2
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e082      	b.n	8003bc6 <main+0xc2a>
 8003ac0:	48000400 	.word	0x48000400
			  		              }
			  		            } else if (i == 3) {	// #
 8003ac4:	23a0      	movs	r3, #160	; 0xa0
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d000      	beq.n	8003ad0 <main+0xb34>
 8003ace:	e07a      	b.n	8003bc6 <main+0xc2a>
			  		              HAL_Delay(350);
 8003ad0:	23af      	movs	r3, #175	; 0xaf
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 fd2f 	bl	8004538 <HAL_Delay>
			  		              // Escolher operador
			  		              if(cont == 0){
 8003ada:	24a8      	movs	r4, #168	; 0xa8
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d127      	bne.n	8003b34 <main+0xb98>
				  		              valor = conc(vet, k);
 8003ae4:	25c8      	movs	r5, #200	; 0xc8
 8003ae6:	197b      	adds	r3, r7, r5
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2344      	movs	r3, #68	; 0x44
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	0011      	movs	r1, r2
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7ff fa0d 	bl	8002f10 <conc>
 8003af6:	0003      	movs	r3, r0
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7fe fa51 	bl	8001fa0 <__aeabi_i2d>
 8003afe:	0002      	movs	r2, r0
 8003b00:	000b      	movs	r3, r1
 8003b02:	21c0      	movs	r1, #192	; 0xc0
 8003b04:	1878      	adds	r0, r7, r1
 8003b06:	6002      	str	r2, [r0, #0]
 8003b08:	6043      	str	r3, [r0, #4]
					  		          intToStr(valor, operUart, k);
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	f7fe fa10 	bl	8001f34 <__aeabi_d2iz>
 8003b14:	197b      	adds	r3, r7, r5
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	2310      	movs	r3, #16
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	f7fe ffce 	bl	8002abe <intToStr>
				  		              k = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	197a      	adds	r2, r7, r5
 8003b26:	6013      	str	r3, [r2, #0]
				  		              cont++;
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	193a      	adds	r2, r7, r4
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e048      	b.n	8003bc6 <main+0xc2a>
			  		              }
			  		              // Apagar último caractere
			  		              else{
			  		            	  OledClear();
 8003b34:	f7fe fd12 	bl	800255c <OledClear>
			  		            	  OledSetCursor(0,0);
 8003b38:	2100      	movs	r1, #0
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7fe fb4e 	bl	80021dc <OledSetCursor>
			  		            	  ftoa(valor, txt2);
 8003b40:	2494      	movs	r4, #148	; 0x94
 8003b42:	193b      	adds	r3, r7, r4
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	22c0      	movs	r2, #192	; 0xc0
 8003b48:	18ba      	adds	r2, r7, r2
 8003b4a:	6810      	ldr	r0, [r2, #0]
 8003b4c:	6851      	ldr	r1, [r2, #4]
 8003b4e:	001a      	movs	r2, r3
 8003b50:	f7fe ffe8 	bl	8002b24 <ftoa>
			  		            	  OledPutString(txt);
 8003b54:	2334      	movs	r3, #52	; 0x34
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7fe fb93 	bl	8002284 <OledPutString>
			  		            	  OledPutChar(pressOp);
 8003b5e:	23cf      	movs	r3, #207	; 0xcf
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7fe fb73 	bl	8002250 <OledPutChar>
			  		            	  if(k!=0){
 8003b6a:	25c8      	movs	r5, #200	; 0xc8
 8003b6c:	197b      	adds	r3, r7, r5
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d028      	beq.n	8003bc6 <main+0xc2a>
										  valor2 = conc(vet, k);
 8003b74:	197b      	adds	r3, r7, r5
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2344      	movs	r3, #68	; 0x44
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	0011      	movs	r1, r2
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff f9c6 	bl	8002f10 <conc>
 8003b84:	0003      	movs	r3, r0
 8003b86:	0018      	movs	r0, r3
 8003b88:	f7fe fa0a 	bl	8001fa0 <__aeabi_i2d>
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	000b      	movs	r3, r1
 8003b90:	2188      	movs	r1, #136	; 0x88
 8003b92:	1878      	adds	r0, r7, r1
 8003b94:	6002      	str	r2, [r0, #0]
 8003b96:	6043      	str	r3, [r0, #4]
										  k--;
 8003b98:	197b      	adds	r3, r7, r5
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	197a      	adds	r2, r7, r5
 8003ba0:	6013      	str	r3, [r2, #0]
										  ftoa(valor2, txt2);
 8003ba2:	193b      	adds	r3, r7, r4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	187a      	adds	r2, r7, r1
 8003ba8:	6810      	ldr	r0, [r2, #0]
 8003baa:	6851      	ldr	r1, [r2, #4]
 8003bac:	001a      	movs	r2, r3
 8003bae:	f7fe ffb9 	bl	8002b24 <ftoa>
										  apagar(txt2);
 8003bb2:	193b      	adds	r3, r7, r4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7fe fe94 	bl	80028e4 <apagar>
										  OledPutString(txt2);
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7fe fb5f 	bl	8002284 <OledPutString>
			  for (int i = 0; i < 4; i++) {
 8003bc6:	22a0      	movs	r2, #160	; 0xa0
 8003bc8:	18bb      	adds	r3, r7, r2
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	18ba      	adds	r2, r7, r2
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	23a0      	movs	r3, #160	; 0xa0
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	dc01      	bgt.n	8003be0 <main+0xc44>
 8003bdc:	f7ff fa34 	bl	8003048 <main+0xac>
 8003be0:	e1bc      	b.n	8003f5c <main+0xfc0>
			  		          }

			  		        }
		  }
		  // ABA OPERAÇÕES - Quando cont for ímpar, significa que o usuário escolhe a operação.
		  else if(cont%2!=0){
 8003be2:	23a8      	movs	r3, #168	; 0xa8
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	4013      	ands	r3, r2
 8003bec:	d100      	bne.n	8003bf0 <main+0xc54>
 8003bee:	e1b5      	b.n	8003f5c <main+0xfc0>
			  for (int i = 0; i < 4; i++) {
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	229c      	movs	r2, #156	; 0x9c
 8003bf4:	18ba      	adds	r2, r7, r2
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e1aa      	b.n	8003f50 <main+0xfb4>

			  			  		          HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8003bfa:	4bdd      	ldr	r3, [pc, #884]	; (8003f70 <main+0xfd4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2101      	movs	r1, #1
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 fefe 	bl	8004a02 <HAL_GPIO_WritePin>
			  			  		          HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8003c06:	4bda      	ldr	r3, [pc, #872]	; (8003f70 <main+0xfd4>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f000 fef8 	bl	8004a02 <HAL_GPIO_WritePin>
			  			  		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	00d9      	lsls	r1, r3, #3
 8003c16:	2390      	movs	r3, #144	; 0x90
 8003c18:	05db      	lsls	r3, r3, #23
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f000 fef0 	bl	8004a02 <HAL_GPIO_WritePin>
			  			  		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003c22:	2390      	movs	r3, #144	; 0x90
 8003c24:	05db      	lsls	r3, r3, #23
 8003c26:	2200      	movs	r2, #0
 8003c28:	2108      	movs	r1, #8
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f000 fee9 	bl	8004a02 <HAL_GPIO_WritePin>

			  			  		          if (i == 0) {
 8003c30:	239c      	movs	r3, #156	; 0x9c
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <main+0xcac>
			  			  		            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8003c3a:	4bcd      	ldr	r3, [pc, #820]	; (8003f70 <main+0xfd4>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	2101      	movs	r1, #1
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 fede 	bl	8004a02 <HAL_GPIO_WritePin>
 8003c46:	e025      	b.n	8003c94 <main+0xcf8>
			  			  		          } else if (i == 1) {
 8003c48:	239c      	movs	r3, #156	; 0x9c
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d106      	bne.n	8003c60 <main+0xcc4>
			  			  		            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8003c52:	4bc7      	ldr	r3, [pc, #796]	; (8003f70 <main+0xfd4>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	2102      	movs	r1, #2
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 fed2 	bl	8004a02 <HAL_GPIO_WritePin>
 8003c5e:	e019      	b.n	8003c94 <main+0xcf8>
			  			  		          } else if (i == 2) {
 8003c60:	239c      	movs	r3, #156	; 0x9c
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d108      	bne.n	8003c7c <main+0xce0>
			  			  		            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	00d9      	lsls	r1, r3, #3
 8003c6e:	2390      	movs	r3, #144	; 0x90
 8003c70:	05db      	lsls	r3, r3, #23
 8003c72:	2201      	movs	r2, #1
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 fec4 	bl	8004a02 <HAL_GPIO_WritePin>
 8003c7a:	e00b      	b.n	8003c94 <main+0xcf8>
			  			  		          } else if (i == 3) {
 8003c7c:	239c      	movs	r3, #156	; 0x9c
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d106      	bne.n	8003c94 <main+0xcf8>
			  			  		            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003c86:	2390      	movs	r3, #144	; 0x90
 8003c88:	05db      	lsls	r3, r3, #23
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	2108      	movs	r1, #8
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 feb7 	bl	8004a02 <HAL_GPIO_WritePin>
			  			  		          }

			  			  		          if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 8003c94:	2390      	movs	r3, #144	; 0x90
 8003c96:	05db      	lsls	r3, r3, #23
 8003c98:	2110      	movs	r1, #16
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f000 fe94 	bl	80049c8 <HAL_GPIO_ReadPin>
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d15e      	bne.n	8003d64 <main+0xdc8>

			  			  		            if (i == 0) {
 8003ca6:	239c      	movs	r3, #156	; 0x9c
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d118      	bne.n	8003ce2 <main+0xd46>
			  			  		              pressOp = '+';
 8003cb0:	24cf      	movs	r4, #207	; 0xcf
 8003cb2:	193b      	adds	r3, r7, r4
 8003cb4:	222b      	movs	r2, #43	; 0x2b
 8003cb6:	701a      	strb	r2, [r3, #0]
			  			  		              HAL_Delay(350);
 8003cb8:	23af      	movs	r3, #175	; 0xaf
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f000 fc3b 	bl	8004538 <HAL_Delay>
			  			  		              OledPutChar(pressOp);
 8003cc2:	193b      	adds	r3, r7, r4
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7fe fac2 	bl	8002250 <OledPutChar>
			  			  		              operacao = 1;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	22bc      	movs	r2, #188	; 0xbc
 8003cd0:	18ba      	adds	r2, r7, r2
 8003cd2:	6013      	str	r3, [r2, #0]
			  			  		              cont++;
 8003cd4:	22a8      	movs	r2, #168	; 0xa8
 8003cd6:	18bb      	adds	r3, r7, r2
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	18ba      	adds	r2, r7, r2
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e130      	b.n	8003f44 <main+0xfa8>
			  			  		            } else if (i == 1) {
 8003ce2:	239c      	movs	r3, #156	; 0x9c
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d118      	bne.n	8003d1e <main+0xd82>
			  			  		              pressOp = '/';
 8003cec:	24cf      	movs	r4, #207	; 0xcf
 8003cee:	193b      	adds	r3, r7, r4
 8003cf0:	222f      	movs	r2, #47	; 0x2f
 8003cf2:	701a      	strb	r2, [r3, #0]
			  			  		              HAL_Delay(350);
 8003cf4:	23af      	movs	r3, #175	; 0xaf
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f000 fc1d 	bl	8004538 <HAL_Delay>
			  			  		              OledPutChar(pressOp);
 8003cfe:	193b      	adds	r3, r7, r4
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7fe faa4 	bl	8002250 <OledPutChar>
			  			  		              operacao = 4;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	22bc      	movs	r2, #188	; 0xbc
 8003d0c:	18ba      	adds	r2, r7, r2
 8003d0e:	6013      	str	r3, [r2, #0]
			  			  		              cont++;
 8003d10:	22a8      	movs	r2, #168	; 0xa8
 8003d12:	18bb      	adds	r3, r7, r2
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	18ba      	adds	r2, r7, r2
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	e112      	b.n	8003f44 <main+0xfa8>
			  			  		            } else if (i == 2) {
 8003d1e:	239c      	movs	r3, #156	; 0x9c
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d000      	beq.n	8003d2a <main+0xd8e>
 8003d28:	e10c      	b.n	8003f44 <main+0xfa8>
			  			  		              pressOp = '!';
 8003d2a:	24cf      	movs	r4, #207	; 0xcf
 8003d2c:	193b      	adds	r3, r7, r4
 8003d2e:	2221      	movs	r2, #33	; 0x21
 8003d30:	701a      	strb	r2, [r3, #0]
			  			  		              format = 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	22a4      	movs	r2, #164	; 0xa4
 8003d36:	18ba      	adds	r2, r7, r2
 8003d38:	6013      	str	r3, [r2, #0]
			  			  		              HAL_Delay(350);
 8003d3a:	23af      	movs	r3, #175	; 0xaf
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 fbfa 	bl	8004538 <HAL_Delay>
			  			  		              OledPutChar(pressOp);
 8003d44:	193b      	adds	r3, r7, r4
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7fe fa81 	bl	8002250 <OledPutChar>
			  			  		              operacao = 7;
 8003d4e:	2307      	movs	r3, #7
 8003d50:	22bc      	movs	r2, #188	; 0xbc
 8003d52:	18ba      	adds	r2, r7, r2
 8003d54:	6013      	str	r3, [r2, #0]
			  			  		              cont++;
 8003d56:	22a8      	movs	r2, #168	; 0xa8
 8003d58:	18bb      	adds	r3, r7, r2
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	18ba      	adds	r2, r7, r2
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e0ef      	b.n	8003f44 <main+0xfa8>
			  			  		            } else if (i == 3) {	// *
			  			  		            	//Não faz nada
			  			  		            }
			  			  		          }else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1) {
 8003d64:	4b83      	ldr	r3, [pc, #524]	; (8003f74 <main+0xfd8>)
 8003d66:	2102      	movs	r1, #2
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 fe2d 	bl	80049c8 <HAL_GPIO_ReadPin>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d000      	beq.n	8003d76 <main+0xdda>
 8003d74:	e080      	b.n	8003e78 <main+0xedc>
			  			  		            if (i == 0) {
 8003d76:	239c      	movs	r3, #156	; 0x9c
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d118      	bne.n	8003db2 <main+0xe16>
			  			  		              pressOp = '-';
 8003d80:	24cf      	movs	r4, #207	; 0xcf
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	222d      	movs	r2, #45	; 0x2d
 8003d86:	701a      	strb	r2, [r3, #0]
			  			  		              HAL_Delay(350);
 8003d88:	23af      	movs	r3, #175	; 0xaf
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f000 fbd3 	bl	8004538 <HAL_Delay>
			  			  		              OledPutChar(pressOp);
 8003d92:	193b      	adds	r3, r7, r4
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	0018      	movs	r0, r3
 8003d98:	f7fe fa5a 	bl	8002250 <OledPutChar>
			  			  		              operacao = 2;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	22bc      	movs	r2, #188	; 0xbc
 8003da0:	18ba      	adds	r2, r7, r2
 8003da2:	6013      	str	r3, [r2, #0]
			  			  		              cont++;
 8003da4:	22a8      	movs	r2, #168	; 0xa8
 8003da6:	18bb      	adds	r3, r7, r2
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	18ba      	adds	r2, r7, r2
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	e0c8      	b.n	8003f44 <main+0xfa8>
			  			  		            } else if (i == 1) {
 8003db2:	239c      	movs	r3, #156	; 0x9c
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d118      	bne.n	8003dee <main+0xe52>
			  			  		              pressOp = '^';
 8003dbc:	24cf      	movs	r4, #207	; 0xcf
 8003dbe:	193b      	adds	r3, r7, r4
 8003dc0:	225e      	movs	r2, #94	; 0x5e
 8003dc2:	701a      	strb	r2, [r3, #0]
			  			  		              HAL_Delay(350);
 8003dc4:	23af      	movs	r3, #175	; 0xaf
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f000 fbb5 	bl	8004538 <HAL_Delay>
			  			  		              OledPutChar(pressOp);
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fe fa3c 	bl	8002250 <OledPutChar>
			  			  		              operacao = 5;
 8003dd8:	2305      	movs	r3, #5
 8003dda:	22bc      	movs	r2, #188	; 0xbc
 8003ddc:	18ba      	adds	r2, r7, r2
 8003dde:	6013      	str	r3, [r2, #0]
			  			  		              cont++;
 8003de0:	22a8      	movs	r2, #168	; 0xa8
 8003de2:	18bb      	adds	r3, r7, r2
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	18ba      	adds	r2, r7, r2
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e0aa      	b.n	8003f44 <main+0xfa8>
			  			  		            } else if (i == 2) {
 8003dee:	239c      	movs	r3, #156	; 0x9c
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d11c      	bne.n	8003e32 <main+0xe96>
			  			  		              pressOp = 'L';
 8003df8:	24cf      	movs	r4, #207	; 0xcf
 8003dfa:	193b      	adds	r3, r7, r4
 8003dfc:	224c      	movs	r2, #76	; 0x4c
 8003dfe:	701a      	strb	r2, [r3, #0]
			  			  		              format = 1;
 8003e00:	2301      	movs	r3, #1
 8003e02:	22a4      	movs	r2, #164	; 0xa4
 8003e04:	18ba      	adds	r2, r7, r2
 8003e06:	6013      	str	r3, [r2, #0]
			  			  		              //OledPutString("ln");
			  			  		              HAL_Delay(350);
 8003e08:	23af      	movs	r3, #175	; 0xaf
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 fb93 	bl	8004538 <HAL_Delay>
			  			  		              OledPutChar(pressOp);
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7fe fa1a 	bl	8002250 <OledPutChar>
			  			  		              operacao = 8;
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	22bc      	movs	r2, #188	; 0xbc
 8003e20:	18ba      	adds	r2, r7, r2
 8003e22:	6013      	str	r3, [r2, #0]
			  			  		              cont++;
 8003e24:	22a8      	movs	r2, #168	; 0xa8
 8003e26:	18bb      	adds	r3, r7, r2
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	18ba      	adds	r2, r7, r2
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	e088      	b.n	8003f44 <main+0xfa8>
			  			  		            } else if (i == 3) {
 8003e32:	239c      	movs	r3, #156	; 0x9c
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d000      	beq.n	8003e3e <main+0xea2>
 8003e3c:	e082      	b.n	8003f44 <main+0xfa8>
			  			  		              //0 de reiniciar
			  			  		              HAL_Delay(350);
 8003e3e:	23af      	movs	r3, #175	; 0xaf
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 fb78 	bl	8004538 <HAL_Delay>
			  			  		              OledClear();
 8003e48:	f7fe fb88 	bl	800255c <OledClear>
			  			  		              OledSetCursor(0,0);
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f7fe f9c4 	bl	80021dc <OledSetCursor>
			  			  		              OledPutChar('0');
 8003e54:	2030      	movs	r0, #48	; 0x30
 8003e56:	f7fe f9fb 	bl	8002250 <OledPutChar>
			  			  		              cont1 = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	22ac      	movs	r2, #172	; 0xac
 8003e5e:	18ba      	adds	r2, r7, r2
 8003e60:	6013      	str	r3, [r2, #0]
			  			  		              cont++;
 8003e62:	22a8      	movs	r2, #168	; 0xa8
 8003e64:	18bb      	adds	r3, r7, r2
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	18b9      	adds	r1, r7, r2
 8003e6c:	600b      	str	r3, [r1, #0]
			  			  		              cont = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	18ba      	adds	r2, r7, r2
 8003e72:	6013      	str	r3, [r2, #0]
			  			  		              goto inicio;
 8003e74:	f7ff f8da 	bl	800302c <main+0x90>
			  			  		            }

			  			  		          }else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 8003e78:	2390      	movs	r3, #144	; 0x90
 8003e7a:	05db      	lsls	r3, r3, #23
 8003e7c:	2140      	movs	r1, #64	; 0x40
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f000 fda2 	bl	80049c8 <HAL_GPIO_ReadPin>
 8003e84:	0003      	movs	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d15c      	bne.n	8003f44 <main+0xfa8>
			  			  		            if (i == 0) {
 8003e8a:	239c      	movs	r3, #156	; 0x9c
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d118      	bne.n	8003ec6 <main+0xf2a>
			  			  		              pressOp = '*';
 8003e94:	24cf      	movs	r4, #207	; 0xcf
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	222a      	movs	r2, #42	; 0x2a
 8003e9a:	701a      	strb	r2, [r3, #0]
			  			  		              HAL_Delay(350);
 8003e9c:	23af      	movs	r3, #175	; 0xaf
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 fb49 	bl	8004538 <HAL_Delay>
			  			  		              operacao = 3;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	22bc      	movs	r2, #188	; 0xbc
 8003eaa:	18ba      	adds	r2, r7, r2
 8003eac:	6013      	str	r3, [r2, #0]
			  			  		              OledPutChar(pressOp);
 8003eae:	193b      	adds	r3, r7, r4
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fe f9cc 	bl	8002250 <OledPutChar>
			  			  		              cont++;
 8003eb8:	22a8      	movs	r2, #168	; 0xa8
 8003eba:	18bb      	adds	r3, r7, r2
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	18ba      	adds	r2, r7, r2
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	e03e      	b.n	8003f44 <main+0xfa8>
			  			  		            } else if (i == 1) {
 8003ec6:	239c      	movs	r3, #156	; 0x9c
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d118      	bne.n	8003f02 <main+0xf66>
			  			  		              pressOp = 'v';
 8003ed0:	24cf      	movs	r4, #207	; 0xcf
 8003ed2:	193b      	adds	r3, r7, r4
 8003ed4:	2276      	movs	r2, #118	; 0x76
 8003ed6:	701a      	strb	r2, [r3, #0]
			  			  		              HAL_Delay(350);
 8003ed8:	23af      	movs	r3, #175	; 0xaf
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	0018      	movs	r0, r3
 8003ede:	f000 fb2b 	bl	8004538 <HAL_Delay>
			  			  		              operacao = 6;
 8003ee2:	2306      	movs	r3, #6
 8003ee4:	22bc      	movs	r2, #188	; 0xbc
 8003ee6:	18ba      	adds	r2, r7, r2
 8003ee8:	6013      	str	r3, [r2, #0]
			  			  		              OledPutChar(pressOp);
 8003eea:	193b      	adds	r3, r7, r4
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7fe f9ae 	bl	8002250 <OledPutChar>
			  			  		              cont++;
 8003ef4:	22a8      	movs	r2, #168	; 0xa8
 8003ef6:	18bb      	adds	r3, r7, r2
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	18ba      	adds	r2, r7, r2
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e020      	b.n	8003f44 <main+0xfa8>
			  			  		            } else if (i == 2) {
 8003f02:	239c      	movs	r3, #156	; 0x9c
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d11b      	bne.n	8003f44 <main+0xfa8>
			  			  		              pressOp = 'e';
 8003f0c:	24cf      	movs	r4, #207	; 0xcf
 8003f0e:	193b      	adds	r3, r7, r4
 8003f10:	2265      	movs	r2, #101	; 0x65
 8003f12:	701a      	strb	r2, [r3, #0]
			  			  		              format = 1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	22a4      	movs	r2, #164	; 0xa4
 8003f18:	18ba      	adds	r2, r7, r2
 8003f1a:	6013      	str	r3, [r2, #0]
			  			  		              HAL_Delay(350);
 8003f1c:	23af      	movs	r3, #175	; 0xaf
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 fb09 	bl	8004538 <HAL_Delay>
			  			  		              operacao = 9;
 8003f26:	2309      	movs	r3, #9
 8003f28:	22bc      	movs	r2, #188	; 0xbc
 8003f2a:	18ba      	adds	r2, r7, r2
 8003f2c:	6013      	str	r3, [r2, #0]
			  			  		              OledPutChar(pressOp);
 8003f2e:	193b      	adds	r3, r7, r4
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7fe f98c 	bl	8002250 <OledPutChar>
			  			  		              cont++;
 8003f38:	22a8      	movs	r2, #168	; 0xa8
 8003f3a:	18bb      	adds	r3, r7, r2
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	18ba      	adds	r2, r7, r2
 8003f42:	6013      	str	r3, [r2, #0]
			  for (int i = 0; i < 4; i++) {
 8003f44:	229c      	movs	r2, #156	; 0x9c
 8003f46:	18bb      	adds	r3, r7, r2
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	18ba      	adds	r2, r7, r2
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	239c      	movs	r3, #156	; 0x9c
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	dc00      	bgt.n	8003f5c <main+0xfc0>
 8003f5a:	e64e      	b.n	8003bfa <main+0xc5e>
	  while(cont < 100){
 8003f5c:	23a8      	movs	r3, #168	; 0xa8
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b63      	cmp	r3, #99	; 0x63
 8003f64:	dc01      	bgt.n	8003f6a <main+0xfce>
 8003f66:	f7ff f860 	bl	800302a <main+0x8e>
  {
 8003f6a:	f7ff f855 	bl	8003018 <main+0x7c>
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	48001400 	.word	0x48001400
 8003f74:	48000400 	.word	0x48000400

08003f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b097      	sub	sp, #92	; 0x5c
 8003f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f7e:	2428      	movs	r4, #40	; 0x28
 8003f80:	193b      	adds	r3, r7, r4
 8003f82:	0018      	movs	r0, r3
 8003f84:	2330      	movs	r3, #48	; 0x30
 8003f86:	001a      	movs	r2, r3
 8003f88:	2100      	movs	r1, #0
 8003f8a:	f002 fa55 	bl	8006438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f8e:	2318      	movs	r3, #24
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	0018      	movs	r0, r3
 8003f94:	2310      	movs	r3, #16
 8003f96:	001a      	movs	r2, r3
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f002 fa4d 	bl	8006438 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	2314      	movs	r3, #20
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f002 fa46 	bl	8006438 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fac:	0021      	movs	r1, r4
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f000 fd37 	bl	8004a3c <HAL_RCC_OscConfig>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d001      	beq.n	8003fd6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003fd2:	f000 f92b 	bl	800422c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fd6:	2118      	movs	r1, #24
 8003fd8:	187b      	adds	r3, r7, r1
 8003fda:	2207      	movs	r2, #7
 8003fdc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fe4:	187b      	adds	r3, r7, r1
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	2200      	movs	r2, #0
 8003fee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f001 f83f 	bl	8005078 <HAL_RCC_ClockConfig>
 8003ffa:	1e03      	subs	r3, r0, #0
 8003ffc:	d001      	beq.n	8004002 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003ffe:	f000 f915 	bl	800422c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	0018      	movs	r0, r3
 8004012:	f001 f985 	bl	8005320 <HAL_RCCEx_PeriphCLKConfig>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d001      	beq.n	800401e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800401a:	f000 f907 	bl	800422c <Error_Handler>
  }
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b017      	add	sp, #92	; 0x5c
 8004024:	bd90      	pop	{r4, r7, pc}
	...

08004028 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800402c:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <MX_SPI1_Init+0x78>)
 800402e:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <MX_SPI1_Init+0x7c>)
 8004030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004032:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <MX_SPI1_Init+0x78>)
 8004034:	2282      	movs	r2, #130	; 0x82
 8004036:	0052      	lsls	r2, r2, #1
 8004038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800403a:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <MX_SPI1_Init+0x78>)
 800403c:	2280      	movs	r2, #128	; 0x80
 800403e:	0212      	lsls	r2, r2, #8
 8004040:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004042:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <MX_SPI1_Init+0x78>)
 8004044:	22e0      	movs	r2, #224	; 0xe0
 8004046:	00d2      	lsls	r2, r2, #3
 8004048:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <MX_SPI1_Init+0x78>)
 800404c:	2202      	movs	r2, #2
 800404e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004050:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <MX_SPI1_Init+0x78>)
 8004052:	2201      	movs	r2, #1
 8004054:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004056:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <MX_SPI1_Init+0x78>)
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	0092      	lsls	r2, r2, #2
 800405c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <MX_SPI1_Init+0x78>)
 8004060:	2200      	movs	r2, #0
 8004062:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <MX_SPI1_Init+0x78>)
 8004066:	2200      	movs	r2, #0
 8004068:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <MX_SPI1_Init+0x78>)
 800406c:	2200      	movs	r2, #0
 800406e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <MX_SPI1_Init+0x78>)
 8004072:	2200      	movs	r2, #0
 8004074:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <MX_SPI1_Init+0x78>)
 8004078:	2207      	movs	r2, #7
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800407c:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <MX_SPI1_Init+0x78>)
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <MX_SPI1_Init+0x78>)
 8004084:	2200      	movs	r2, #0
 8004086:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <MX_SPI1_Init+0x78>)
 800408a:	0018      	movs	r0, r3
 800408c:	f001 fa26 	bl	80054dc <HAL_SPI_Init>
 8004090:	1e03      	subs	r3, r0, #0
 8004092:	d001      	beq.n	8004098 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8004094:	f000 f8ca 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004098:	46c0      	nop			; (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	200003d0 	.word	0x200003d0
 80040a4:	40013000 	.word	0x40013000

080040a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <MX_USART1_UART_Init+0x5c>)
 80040b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040b4:	2296      	movs	r2, #150	; 0x96
 80040b6:	0192      	lsls	r2, r2, #6
 80040b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040bc:	2200      	movs	r2, #0
 80040be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040ce:	220c      	movs	r2, #12
 80040d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040d2:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040da:	2200      	movs	r2, #0
 80040dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <MX_USART1_UART_Init+0x58>)
 80040ec:	0018      	movs	r0, r3
 80040ee:	f001 fd7b 	bl	8005be8 <HAL_HalfDuplex_Init>
 80040f2:	1e03      	subs	r3, r0, #0
 80040f4:	d001      	beq.n	80040fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80040f6:	f000 f899 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000434 	.word	0x20000434
 8004104:	40013800 	.word	0x40013800

08004108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410e:	240c      	movs	r4, #12
 8004110:	193b      	adds	r3, r7, r4
 8004112:	0018      	movs	r0, r3
 8004114:	2314      	movs	r3, #20
 8004116:	001a      	movs	r2, r3
 8004118:	2100      	movs	r1, #0
 800411a:	f002 f98d 	bl	8006438 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800411e:	4b3f      	ldr	r3, [pc, #252]	; (800421c <MX_GPIO_Init+0x114>)
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	4b3e      	ldr	r3, [pc, #248]	; (800421c <MX_GPIO_Init+0x114>)
 8004124:	2180      	movs	r1, #128	; 0x80
 8004126:	03c9      	lsls	r1, r1, #15
 8004128:	430a      	orrs	r2, r1
 800412a:	615a      	str	r2, [r3, #20]
 800412c:	4b3b      	ldr	r3, [pc, #236]	; (800421c <MX_GPIO_Init+0x114>)
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	03db      	lsls	r3, r3, #15
 8004134:	4013      	ands	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800413a:	4b38      	ldr	r3, [pc, #224]	; (800421c <MX_GPIO_Init+0x114>)
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	4b37      	ldr	r3, [pc, #220]	; (800421c <MX_GPIO_Init+0x114>)
 8004140:	2180      	movs	r1, #128	; 0x80
 8004142:	0289      	lsls	r1, r1, #10
 8004144:	430a      	orrs	r2, r1
 8004146:	615a      	str	r2, [r3, #20]
 8004148:	4b34      	ldr	r3, [pc, #208]	; (800421c <MX_GPIO_Init+0x114>)
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	029b      	lsls	r3, r3, #10
 8004150:	4013      	ands	r3, r2
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004156:	4b31      	ldr	r3, [pc, #196]	; (800421c <MX_GPIO_Init+0x114>)
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	4b30      	ldr	r3, [pc, #192]	; (800421c <MX_GPIO_Init+0x114>)
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	02c9      	lsls	r1, r1, #11
 8004160:	430a      	orrs	r2, r1
 8004162:	615a      	str	r2, [r3, #20]
 8004164:	4b2d      	ldr	r3, [pc, #180]	; (800421c <MX_GPIO_Init+0x114>)
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	02db      	lsls	r3, r3, #11
 800416c:	4013      	ands	r3, r2
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8004172:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <MX_GPIO_Init+0x118>)
 8004174:	2200      	movs	r2, #0
 8004176:	2103      	movs	r1, #3
 8004178:	0018      	movs	r0, r3
 800417a:	f000 fc42 	bl	8004a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800417e:	4929      	ldr	r1, [pc, #164]	; (8004224 <MX_GPIO_Init+0x11c>)
 8004180:	2390      	movs	r3, #144	; 0x90
 8004182:	05db      	lsls	r3, r3, #23
 8004184:	2200      	movs	r2, #0
 8004186:	0018      	movs	r0, r3
 8004188:	f000 fc3b 	bl	8004a02 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800418c:	193b      	adds	r3, r7, r4
 800418e:	2203      	movs	r2, #3
 8004190:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004192:	193b      	adds	r3, r7, r4
 8004194:	2201      	movs	r2, #1
 8004196:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	193b      	adds	r3, r7, r4
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419e:	193b      	adds	r3, r7, r4
 80041a0:	2200      	movs	r2, #0
 80041a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041a4:	193b      	adds	r3, r7, r4
 80041a6:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <MX_GPIO_Init+0x118>)
 80041a8:	0019      	movs	r1, r3
 80041aa:	0010      	movs	r0, r2
 80041ac:	f000 fa9c 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80041b0:	193b      	adds	r3, r7, r4
 80041b2:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <MX_GPIO_Init+0x11c>)
 80041b4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041b6:	193b      	adds	r3, r7, r4
 80041b8:	2201      	movs	r2, #1
 80041ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	193b      	adds	r3, r7, r4
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c2:	193b      	adds	r3, r7, r4
 80041c4:	2200      	movs	r2, #0
 80041c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c8:	193a      	adds	r2, r7, r4
 80041ca:	2390      	movs	r3, #144	; 0x90
 80041cc:	05db      	lsls	r3, r3, #23
 80041ce:	0011      	movs	r1, r2
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 fa89 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80041d6:	193b      	adds	r3, r7, r4
 80041d8:	2250      	movs	r2, #80	; 0x50
 80041da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	2200      	movs	r2, #0
 80041e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	2202      	movs	r2, #2
 80041e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e8:	193a      	adds	r2, r7, r4
 80041ea:	2390      	movs	r3, #144	; 0x90
 80041ec:	05db      	lsls	r3, r3, #23
 80041ee:	0011      	movs	r1, r2
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 fa79 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041f6:	193b      	adds	r3, r7, r4
 80041f8:	2202      	movs	r2, #2
 80041fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041fc:	193b      	adds	r3, r7, r4
 80041fe:	2200      	movs	r2, #0
 8004200:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004202:	193b      	adds	r3, r7, r4
 8004204:	2202      	movs	r2, #2
 8004206:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004208:	193b      	adds	r3, r7, r4
 800420a:	4a07      	ldr	r2, [pc, #28]	; (8004228 <MX_GPIO_Init+0x120>)
 800420c:	0019      	movs	r1, r3
 800420e:	0010      	movs	r0, r2
 8004210:	f000 fa6a 	bl	80046e8 <HAL_GPIO_Init>

}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b009      	add	sp, #36	; 0x24
 800421a:	bd90      	pop	{r4, r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	48001400 	.word	0x48001400
 8004224:	0000040f 	.word	0x0000040f
 8004228:	48000400 	.word	0x48000400

0800422c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004230:	b672      	cpsid	i
}
 8004232:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004234:	e7fe      	b.n	8004234 <Error_Handler+0x8>
	...

08004238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800423e:	4b0f      	ldr	r3, [pc, #60]	; (800427c <HAL_MspInit+0x44>)
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <HAL_MspInit+0x44>)
 8004244:	2101      	movs	r1, #1
 8004246:	430a      	orrs	r2, r1
 8004248:	619a      	str	r2, [r3, #24]
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <HAL_MspInit+0x44>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2201      	movs	r2, #1
 8004250:	4013      	ands	r3, r2
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_MspInit+0x44>)
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <HAL_MspInit+0x44>)
 800425c:	2180      	movs	r1, #128	; 0x80
 800425e:	0549      	lsls	r1, r1, #21
 8004260:	430a      	orrs	r2, r1
 8004262:	61da      	str	r2, [r3, #28]
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_MspInit+0x44>)
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	055b      	lsls	r3, r3, #21
 800426c:	4013      	ands	r3, r2
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b002      	add	sp, #8
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	40021000 	.word	0x40021000

08004280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b08b      	sub	sp, #44	; 0x2c
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004288:	2414      	movs	r4, #20
 800428a:	193b      	adds	r3, r7, r4
 800428c:	0018      	movs	r0, r3
 800428e:	2314      	movs	r3, #20
 8004290:	001a      	movs	r2, r3
 8004292:	2100      	movs	r1, #0
 8004294:	f002 f8d0 	bl	8006438 <memset>
  if(hspi->Instance==SPI1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <HAL_SPI_MspInit+0x90>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d132      	bne.n	8004308 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042a2:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <HAL_SPI_MspInit+0x94>)
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <HAL_SPI_MspInit+0x94>)
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	0149      	lsls	r1, r1, #5
 80042ac:	430a      	orrs	r2, r1
 80042ae:	619a      	str	r2, [r3, #24]
 80042b0:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_SPI_MspInit+0x94>)
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	015b      	lsls	r3, r3, #5
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <HAL_SPI_MspInit+0x94>)
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_SPI_MspInit+0x94>)
 80042c4:	2180      	movs	r1, #128	; 0x80
 80042c6:	0289      	lsls	r1, r1, #10
 80042c8:	430a      	orrs	r2, r1
 80042ca:	615a      	str	r2, [r3, #20]
 80042cc:	4b11      	ldr	r3, [pc, #68]	; (8004314 <HAL_SPI_MspInit+0x94>)
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	4013      	ands	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80042da:	0021      	movs	r1, r4
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	22a0      	movs	r2, #160	; 0xa0
 80042e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	187b      	adds	r3, r7, r1
 80042e4:	2202      	movs	r2, #2
 80042e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ee:	187b      	adds	r3, r7, r1
 80042f0:	2203      	movs	r2, #3
 80042f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	2200      	movs	r2, #0
 80042f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fa:	187a      	adds	r2, r7, r1
 80042fc:	2390      	movs	r3, #144	; 0x90
 80042fe:	05db      	lsls	r3, r3, #23
 8004300:	0011      	movs	r1, r2
 8004302:	0018      	movs	r0, r3
 8004304:	f000 f9f0 	bl	80046e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b00b      	add	sp, #44	; 0x2c
 800430e:	bd90      	pop	{r4, r7, pc}
 8004310:	40013000 	.word	0x40013000
 8004314:	40021000 	.word	0x40021000

08004318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b08b      	sub	sp, #44	; 0x2c
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004320:	2414      	movs	r4, #20
 8004322:	193b      	adds	r3, r7, r4
 8004324:	0018      	movs	r0, r3
 8004326:	2314      	movs	r3, #20
 8004328:	001a      	movs	r2, r3
 800432a:	2100      	movs	r1, #0
 800432c:	f002 f884 	bl	8006438 <memset>
  if(huart->Instance==USART1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <HAL_UART_MspInit+0x94>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d133      	bne.n	80043a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <HAL_UART_MspInit+0x98>)
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <HAL_UART_MspInit+0x98>)
 8004340:	2180      	movs	r1, #128	; 0x80
 8004342:	01c9      	lsls	r1, r1, #7
 8004344:	430a      	orrs	r2, r1
 8004346:	619a      	str	r2, [r3, #24]
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <HAL_UART_MspInit+0x98>)
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	01db      	lsls	r3, r3, #7
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004356:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <HAL_UART_MspInit+0x98>)
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <HAL_UART_MspInit+0x98>)
 800435c:	2180      	movs	r1, #128	; 0x80
 800435e:	0289      	lsls	r1, r1, #10
 8004360:	430a      	orrs	r2, r1
 8004362:	615a      	str	r2, [r3, #20]
 8004364:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_UART_MspInit+0x98>)
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	029b      	lsls	r3, r3, #10
 800436c:	4013      	ands	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004372:	193b      	adds	r3, r7, r4
 8004374:	2280      	movs	r2, #128	; 0x80
 8004376:	0092      	lsls	r2, r2, #2
 8004378:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800437a:	0021      	movs	r1, r4
 800437c:	187b      	adds	r3, r7, r1
 800437e:	2212      	movs	r2, #18
 8004380:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004382:	187b      	adds	r3, r7, r1
 8004384:	2201      	movs	r2, #1
 8004386:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004388:	187b      	adds	r3, r7, r1
 800438a:	2203      	movs	r2, #3
 800438c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800438e:	187b      	adds	r3, r7, r1
 8004390:	2201      	movs	r2, #1
 8004392:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004394:	187a      	adds	r2, r7, r1
 8004396:	2390      	movs	r3, #144	; 0x90
 8004398:	05db      	lsls	r3, r3, #23
 800439a:	0011      	movs	r1, r2
 800439c:	0018      	movs	r0, r3
 800439e:	f000 f9a3 	bl	80046e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b00b      	add	sp, #44	; 0x2c
 80043a8:	bd90      	pop	{r4, r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40021000 	.word	0x40021000

080043b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043b8:	e7fe      	b.n	80043b8 <NMI_Handler+0x4>

080043ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043be:	e7fe      	b.n	80043be <HardFault_Handler+0x4>

080043c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043d8:	f000 f892 	bl	8004500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043ec:	4813      	ldr	r0, [pc, #76]	; (800443c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043ee:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80043f0:	4813      	ldr	r0, [pc, #76]	; (8004440 <LoopForever+0x6>)
    LDR R1, [R0]
 80043f2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80043f4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <LoopForever+0xa>)
    CMP R1, R2
 80043f8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80043fa:	d105      	bne.n	8004408 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80043fc:	4812      	ldr	r0, [pc, #72]	; (8004448 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80043fe:	4913      	ldr	r1, [pc, #76]	; (800444c <LoopForever+0x12>)
    STR R1, [R0]
 8004400:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8004402:	4813      	ldr	r0, [pc, #76]	; (8004450 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004404:	4913      	ldr	r1, [pc, #76]	; (8004454 <LoopForever+0x1a>)
    STR R1, [R0]
 8004406:	6001      	str	r1, [r0, #0]

08004408 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004408:	4813      	ldr	r0, [pc, #76]	; (8004458 <LoopForever+0x1e>)
  ldr r1, =_edata
 800440a:	4914      	ldr	r1, [pc, #80]	; (800445c <LoopForever+0x22>)
  ldr r2, =_sidata
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <LoopForever+0x26>)
  movs r3, #0
 800440e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004410:	e002      	b.n	8004418 <LoopCopyDataInit>

08004412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004416:	3304      	adds	r3, #4

08004418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800441a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800441c:	d3f9      	bcc.n	8004412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800441e:	4a11      	ldr	r2, [pc, #68]	; (8004464 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8004420:	4c11      	ldr	r4, [pc, #68]	; (8004468 <LoopForever+0x2e>)
  movs r3, #0
 8004422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004424:	e001      	b.n	800442a <LoopFillZerobss>

08004426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004428:	3204      	adds	r2, #4

0800442a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800442a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800442c:	d3fb      	bcc.n	8004426 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800442e:	f7ff ffd8 	bl	80043e2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004432:	f001 ffdd 	bl	80063f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004436:	f7fe fdb1 	bl	8002f9c <main>

0800443a <LoopForever>:

LoopForever:
    b LoopForever
 800443a:	e7fe      	b.n	800443a <LoopForever>
  ldr   r0, =_estack
 800443c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8004440:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004444:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8004448:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800444c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004450:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004454:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8004458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800445c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004460:	08007e08 	.word	0x08007e08
  ldr r2, =_sbss
 8004464:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004468:	200004c8 	.word	0x200004c8

0800446c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800446c:	e7fe      	b.n	800446c <ADC1_IRQHandler>
	...

08004470 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004474:	4b07      	ldr	r3, [pc, #28]	; (8004494 <HAL_Init+0x24>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_Init+0x24>)
 800447a:	2110      	movs	r1, #16
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004480:	2003      	movs	r0, #3
 8004482:	f000 f809 	bl	8004498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004486:	f7ff fed7 	bl	8004238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	40022000 	.word	0x40022000

08004498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044a0:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <HAL_InitTick+0x5c>)
 80044a2:	681c      	ldr	r4, [r3, #0]
 80044a4:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_InitTick+0x60>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	0019      	movs	r1, r3
 80044aa:	23fa      	movs	r3, #250	; 0xfa
 80044ac:	0098      	lsls	r0, r3, #2
 80044ae:	f7fb fe33 	bl	8000118 <__udivsi3>
 80044b2:	0003      	movs	r3, r0
 80044b4:	0019      	movs	r1, r3
 80044b6:	0020      	movs	r0, r4
 80044b8:	f7fb fe2e 	bl	8000118 <__udivsi3>
 80044bc:	0003      	movs	r3, r0
 80044be:	0018      	movs	r0, r3
 80044c0:	f000 f905 	bl	80046ce <HAL_SYSTICK_Config>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d001      	beq.n	80044cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e00f      	b.n	80044ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d80b      	bhi.n	80044ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	2301      	movs	r3, #1
 80044d6:	425b      	negs	r3, r3
 80044d8:	2200      	movs	r2, #0
 80044da:	0018      	movs	r0, r3
 80044dc:	f000 f8e2 	bl	80046a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_InitTick+0x64>)
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e000      	b.n	80044ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b003      	add	sp, #12
 80044f2:	bd90      	pop	{r4, r7, pc}
 80044f4:	20000000 	.word	0x20000000
 80044f8:	20000008 	.word	0x20000008
 80044fc:	20000004 	.word	0x20000004

08004500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_IncTick+0x1c>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	001a      	movs	r2, r3
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_IncTick+0x20>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	18d2      	adds	r2, r2, r3
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <HAL_IncTick+0x20>)
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	20000008 	.word	0x20000008
 8004520:	200004c4 	.word	0x200004c4

08004524 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  return uwTick;
 8004528:	4b02      	ldr	r3, [pc, #8]	; (8004534 <HAL_GetTick+0x10>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	200004c4 	.word	0x200004c4

08004538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004540:	f7ff fff0 	bl	8004524 <HAL_GetTick>
 8004544:	0003      	movs	r3, r0
 8004546:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3301      	adds	r3, #1
 8004550:	d005      	beq.n	800455e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <HAL_Delay+0x44>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	001a      	movs	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	189b      	adds	r3, r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	f7ff ffe0 	bl	8004524 <HAL_GetTick>
 8004564:	0002      	movs	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d8f7      	bhi.n	8004560 <HAL_Delay+0x28>
  {
  }
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	46bd      	mov	sp, r7
 8004576:	b004      	add	sp, #16
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	20000008 	.word	0x20000008

08004580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	0002      	movs	r2, r0
 8004588:	6039      	str	r1, [r7, #0]
 800458a:	1dfb      	adds	r3, r7, #7
 800458c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b7f      	cmp	r3, #127	; 0x7f
 8004594:	d828      	bhi.n	80045e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004596:	4a2f      	ldr	r2, [pc, #188]	; (8004654 <__NVIC_SetPriority+0xd4>)
 8004598:	1dfb      	adds	r3, r7, #7
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b25b      	sxtb	r3, r3
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	33c0      	adds	r3, #192	; 0xc0
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	589b      	ldr	r3, [r3, r2]
 80045a6:	1dfa      	adds	r2, r7, #7
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	0011      	movs	r1, r2
 80045ac:	2203      	movs	r2, #3
 80045ae:	400a      	ands	r2, r1
 80045b0:	00d2      	lsls	r2, r2, #3
 80045b2:	21ff      	movs	r1, #255	; 0xff
 80045b4:	4091      	lsls	r1, r2
 80045b6:	000a      	movs	r2, r1
 80045b8:	43d2      	mvns	r2, r2
 80045ba:	401a      	ands	r2, r3
 80045bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	019b      	lsls	r3, r3, #6
 80045c2:	22ff      	movs	r2, #255	; 0xff
 80045c4:	401a      	ands	r2, r3
 80045c6:	1dfb      	adds	r3, r7, #7
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	0018      	movs	r0, r3
 80045cc:	2303      	movs	r3, #3
 80045ce:	4003      	ands	r3, r0
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045d4:	481f      	ldr	r0, [pc, #124]	; (8004654 <__NVIC_SetPriority+0xd4>)
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	b25b      	sxtb	r3, r3
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	430a      	orrs	r2, r1
 80045e0:	33c0      	adds	r3, #192	; 0xc0
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80045e6:	e031      	b.n	800464c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045e8:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <__NVIC_SetPriority+0xd8>)
 80045ea:	1dfb      	adds	r3, r7, #7
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	0019      	movs	r1, r3
 80045f0:	230f      	movs	r3, #15
 80045f2:	400b      	ands	r3, r1
 80045f4:	3b08      	subs	r3, #8
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	3306      	adds	r3, #6
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	3304      	adds	r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	1dfa      	adds	r2, r7, #7
 8004604:	7812      	ldrb	r2, [r2, #0]
 8004606:	0011      	movs	r1, r2
 8004608:	2203      	movs	r2, #3
 800460a:	400a      	ands	r2, r1
 800460c:	00d2      	lsls	r2, r2, #3
 800460e:	21ff      	movs	r1, #255	; 0xff
 8004610:	4091      	lsls	r1, r2
 8004612:	000a      	movs	r2, r1
 8004614:	43d2      	mvns	r2, r2
 8004616:	401a      	ands	r2, r3
 8004618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	22ff      	movs	r2, #255	; 0xff
 8004620:	401a      	ands	r2, r3
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	0018      	movs	r0, r3
 8004628:	2303      	movs	r3, #3
 800462a:	4003      	ands	r3, r0
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004630:	4809      	ldr	r0, [pc, #36]	; (8004658 <__NVIC_SetPriority+0xd8>)
 8004632:	1dfb      	adds	r3, r7, #7
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	001c      	movs	r4, r3
 8004638:	230f      	movs	r3, #15
 800463a:	4023      	ands	r3, r4
 800463c:	3b08      	subs	r3, #8
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	430a      	orrs	r2, r1
 8004642:	3306      	adds	r3, #6
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	18c3      	adds	r3, r0, r3
 8004648:	3304      	adds	r3, #4
 800464a:	601a      	str	r2, [r3, #0]
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b003      	add	sp, #12
 8004652:	bd90      	pop	{r4, r7, pc}
 8004654:	e000e100 	.word	0xe000e100
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	1e5a      	subs	r2, r3, #1
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	045b      	lsls	r3, r3, #17
 800466c:	429a      	cmp	r2, r3
 800466e:	d301      	bcc.n	8004674 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004670:	2301      	movs	r3, #1
 8004672:	e010      	b.n	8004696 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <SysTick_Config+0x44>)
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	3a01      	subs	r2, #1
 800467a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800467c:	2301      	movs	r3, #1
 800467e:	425b      	negs	r3, r3
 8004680:	2103      	movs	r1, #3
 8004682:	0018      	movs	r0, r3
 8004684:	f7ff ff7c 	bl	8004580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <SysTick_Config+0x44>)
 800468a:	2200      	movs	r2, #0
 800468c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800468e:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <SysTick_Config+0x44>)
 8004690:	2207      	movs	r2, #7
 8004692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004694:	2300      	movs	r3, #0
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	e000e010 	.word	0xe000e010

080046a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
 80046ae:	210f      	movs	r1, #15
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	1c02      	adds	r2, r0, #0
 80046b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	187b      	adds	r3, r7, r1
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	b25b      	sxtb	r3, r3
 80046be:	0011      	movs	r1, r2
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7ff ff5d 	bl	8004580 <__NVIC_SetPriority>
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	0018      	movs	r0, r3
 80046da:	f7ff ffbf 	bl	800465c <SysTick_Config>
 80046de:	0003      	movs	r3, r0
}
 80046e0:	0018      	movs	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f6:	e14f      	b.n	8004998 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2101      	movs	r1, #1
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4091      	lsls	r1, r2
 8004702:	000a      	movs	r2, r1
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d100      	bne.n	8004710 <HAL_GPIO_Init+0x28>
 800470e:	e140      	b.n	8004992 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2203      	movs	r2, #3
 8004716:	4013      	ands	r3, r2
 8004718:	2b01      	cmp	r3, #1
 800471a:	d005      	beq.n	8004728 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004724:	2b02      	cmp	r3, #2
 8004726:	d130      	bne.n	800478a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2203      	movs	r2, #3
 8004734:	409a      	lsls	r2, r3
 8004736:	0013      	movs	r3, r2
 8004738:	43da      	mvns	r2, r3
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4013      	ands	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	409a      	lsls	r2, r3
 800474a:	0013      	movs	r3, r2
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800475e:	2201      	movs	r2, #1
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	409a      	lsls	r2, r3
 8004764:	0013      	movs	r3, r2
 8004766:	43da      	mvns	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	2201      	movs	r2, #1
 8004776:	401a      	ands	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	409a      	lsls	r2, r3
 800477c:	0013      	movs	r3, r2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2203      	movs	r2, #3
 8004790:	4013      	ands	r3, r2
 8004792:	2b03      	cmp	r3, #3
 8004794:	d017      	beq.n	80047c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	2203      	movs	r2, #3
 80047a2:	409a      	lsls	r2, r3
 80047a4:	0013      	movs	r3, r2
 80047a6:	43da      	mvns	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	0013      	movs	r3, r2
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2203      	movs	r2, #3
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d123      	bne.n	800481a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	08da      	lsrs	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3208      	adds	r2, #8
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	58d3      	ldr	r3, [r2, r3]
 80047de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2207      	movs	r2, #7
 80047e4:	4013      	ands	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	220f      	movs	r2, #15
 80047ea:	409a      	lsls	r2, r3
 80047ec:	0013      	movs	r3, r2
 80047ee:	43da      	mvns	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2107      	movs	r1, #7
 80047fe:	400b      	ands	r3, r1
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	409a      	lsls	r2, r3
 8004804:	0013      	movs	r3, r2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	08da      	lsrs	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3208      	adds	r2, #8
 8004814:	0092      	lsls	r2, r2, #2
 8004816:	6939      	ldr	r1, [r7, #16]
 8004818:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	2203      	movs	r2, #3
 8004826:	409a      	lsls	r2, r3
 8004828:	0013      	movs	r3, r2
 800482a:	43da      	mvns	r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2203      	movs	r2, #3
 8004838:	401a      	ands	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	409a      	lsls	r2, r3
 8004840:	0013      	movs	r3, r2
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	23c0      	movs	r3, #192	; 0xc0
 8004854:	029b      	lsls	r3, r3, #10
 8004856:	4013      	ands	r3, r2
 8004858:	d100      	bne.n	800485c <HAL_GPIO_Init+0x174>
 800485a:	e09a      	b.n	8004992 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485c:	4b54      	ldr	r3, [pc, #336]	; (80049b0 <HAL_GPIO_Init+0x2c8>)
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_GPIO_Init+0x2c8>)
 8004862:	2101      	movs	r1, #1
 8004864:	430a      	orrs	r2, r1
 8004866:	619a      	str	r2, [r3, #24]
 8004868:	4b51      	ldr	r3, [pc, #324]	; (80049b0 <HAL_GPIO_Init+0x2c8>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2201      	movs	r2, #1
 800486e:	4013      	ands	r3, r2
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004874:	4a4f      	ldr	r2, [pc, #316]	; (80049b4 <HAL_GPIO_Init+0x2cc>)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	3302      	adds	r3, #2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	589b      	ldr	r3, [r3, r2]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2203      	movs	r2, #3
 8004886:	4013      	ands	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	220f      	movs	r2, #15
 800488c:	409a      	lsls	r2, r3
 800488e:	0013      	movs	r3, r2
 8004890:	43da      	mvns	r2, r3
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	2390      	movs	r3, #144	; 0x90
 800489c:	05db      	lsls	r3, r3, #23
 800489e:	429a      	cmp	r2, r3
 80048a0:	d013      	beq.n	80048ca <HAL_GPIO_Init+0x1e2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a44      	ldr	r2, [pc, #272]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00d      	beq.n	80048c6 <HAL_GPIO_Init+0x1de>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a43      	ldr	r2, [pc, #268]	; (80049bc <HAL_GPIO_Init+0x2d4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <HAL_GPIO_Init+0x1da>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a42      	ldr	r2, [pc, #264]	; (80049c0 <HAL_GPIO_Init+0x2d8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <HAL_GPIO_Init+0x1d6>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e006      	b.n	80048cc <HAL_GPIO_Init+0x1e4>
 80048be:	2305      	movs	r3, #5
 80048c0:	e004      	b.n	80048cc <HAL_GPIO_Init+0x1e4>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e002      	b.n	80048cc <HAL_GPIO_Init+0x1e4>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_GPIO_Init+0x1e4>
 80048ca:	2300      	movs	r3, #0
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	2103      	movs	r1, #3
 80048d0:	400a      	ands	r2, r1
 80048d2:	0092      	lsls	r2, r2, #2
 80048d4:	4093      	lsls	r3, r2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048dc:	4935      	ldr	r1, [pc, #212]	; (80049b4 <HAL_GPIO_Init+0x2cc>)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	3302      	adds	r3, #2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ea:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <HAL_GPIO_Init+0x2dc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	43da      	mvns	r2, r3
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	025b      	lsls	r3, r3, #9
 8004902:	4013      	ands	r3, r2
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800490e:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <HAL_GPIO_Init+0x2dc>)
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004914:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <HAL_GPIO_Init+0x2dc>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	43da      	mvns	r2, r3
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4013      	ands	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	029b      	lsls	r3, r3, #10
 800492c:	4013      	ands	r3, r2
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004938:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <HAL_GPIO_Init+0x2dc>)
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <HAL_GPIO_Init+0x2dc>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	43da      	mvns	r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4013      	ands	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	035b      	lsls	r3, r3, #13
 8004956:	4013      	ands	r3, r2
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004962:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <HAL_GPIO_Init+0x2dc>)
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <HAL_GPIO_Init+0x2dc>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	43da      	mvns	r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4013      	ands	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	039b      	lsls	r3, r3, #14
 8004980:	4013      	ands	r3, r2
 8004982:	d003      	beq.n	800498c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800498c:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <HAL_GPIO_Init+0x2dc>)
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	3301      	adds	r3, #1
 8004996:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	40da      	lsrs	r2, r3
 80049a0:	1e13      	subs	r3, r2, #0
 80049a2:	d000      	beq.n	80049a6 <HAL_GPIO_Init+0x2be>
 80049a4:	e6a8      	b.n	80046f8 <HAL_GPIO_Init+0x10>
  } 
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b006      	add	sp, #24
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40010000 	.word	0x40010000
 80049b8:	48000400 	.word	0x48000400
 80049bc:	48000800 	.word	0x48000800
 80049c0:	48000c00 	.word	0x48000c00
 80049c4:	40010400 	.word	0x40010400

080049c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	000a      	movs	r2, r1
 80049d2:	1cbb      	adds	r3, r7, #2
 80049d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	1cba      	adds	r2, r7, #2
 80049dc:	8812      	ldrh	r2, [r2, #0]
 80049de:	4013      	ands	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80049e2:	230f      	movs	r3, #15
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e003      	b.n	80049f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ec:	230f      	movs	r3, #15
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80049f4:	230f      	movs	r3, #15
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	781b      	ldrb	r3, [r3, #0]
  }
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b004      	add	sp, #16
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	0008      	movs	r0, r1
 8004a0c:	0011      	movs	r1, r2
 8004a0e:	1cbb      	adds	r3, r7, #2
 8004a10:	1c02      	adds	r2, r0, #0
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	1c7b      	adds	r3, r7, #1
 8004a16:	1c0a      	adds	r2, r1, #0
 8004a18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a1a:	1c7b      	adds	r3, r7, #1
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d004      	beq.n	8004a2c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a22:	1cbb      	adds	r3, r7, #2
 8004a24:	881a      	ldrh	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a2a:	e003      	b.n	8004a34 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a2c:	1cbb      	adds	r3, r7, #2
 8004a2e:	881a      	ldrh	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e305      	b.n	800505a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	4013      	ands	r3, r2
 8004a56:	d100      	bne.n	8004a5a <HAL_RCC_OscConfig+0x1e>
 8004a58:	e08d      	b.n	8004b76 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a5a:	4bc5      	ldr	r3, [pc, #788]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	220c      	movs	r2, #12
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d00e      	beq.n	8004a84 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a66:	4bc2      	ldr	r3, [pc, #776]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	220c      	movs	r2, #12
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d116      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x64>
 8004a72:	4bbf      	ldr	r3, [pc, #764]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	23c0      	movs	r3, #192	; 0xc0
 8004a78:	025b      	lsls	r3, r3, #9
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	025b      	lsls	r3, r3, #9
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	4bba      	ldr	r3, [pc, #744]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	029b      	lsls	r3, r3, #10
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <HAL_RCC_OscConfig+0x56>
 8004a90:	e070      	b.n	8004b74 <HAL_RCC_OscConfig+0x138>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d000      	beq.n	8004a9c <HAL_RCC_OscConfig+0x60>
 8004a9a:	e06b      	b.n	8004b74 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e2dc      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x7c>
 8004aa8:	4bb1      	ldr	r3, [pc, #708]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4bb0      	ldr	r3, [pc, #704]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	0249      	lsls	r1, r1, #9
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e02f      	b.n	8004b18 <HAL_RCC_OscConfig+0xdc>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10c      	bne.n	8004ada <HAL_RCC_OscConfig+0x9e>
 8004ac0:	4bab      	ldr	r3, [pc, #684]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4baa      	ldr	r3, [pc, #680]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ac6:	49ab      	ldr	r1, [pc, #684]	; (8004d74 <HAL_RCC_OscConfig+0x338>)
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	4ba8      	ldr	r3, [pc, #672]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4ba7      	ldr	r3, [pc, #668]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ad2:	49a9      	ldr	r1, [pc, #676]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004ad4:	400a      	ands	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e01e      	b.n	8004b18 <HAL_RCC_OscConfig+0xdc>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d10e      	bne.n	8004b00 <HAL_RCC_OscConfig+0xc4>
 8004ae2:	4ba3      	ldr	r3, [pc, #652]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4ba2      	ldr	r3, [pc, #648]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	02c9      	lsls	r1, r1, #11
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	4b9f      	ldr	r3, [pc, #636]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b9e      	ldr	r3, [pc, #632]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	0249      	lsls	r1, r1, #9
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xdc>
 8004b00:	4b9b      	ldr	r3, [pc, #620]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b9a      	ldr	r3, [pc, #616]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b06:	499b      	ldr	r1, [pc, #620]	; (8004d74 <HAL_RCC_OscConfig+0x338>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	4b98      	ldr	r3, [pc, #608]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b97      	ldr	r3, [pc, #604]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b12:	4999      	ldr	r1, [pc, #612]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d014      	beq.n	8004b4a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7ff fd00 	bl	8004524 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b2a:	f7ff fcfb 	bl	8004524 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	; 0x64
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e28e      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3c:	4b8c      	ldr	r3, [pc, #560]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	029b      	lsls	r3, r3, #10
 8004b44:	4013      	ands	r3, r2
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0xee>
 8004b48:	e015      	b.n	8004b76 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4a:	f7ff fceb 	bl	8004524 <HAL_GetTick>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b54:	f7ff fce6 	bl	8004524 <HAL_GetTick>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	; 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e279      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b66:	4b82      	ldr	r3, [pc, #520]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x118>
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d100      	bne.n	8004b82 <HAL_RCC_OscConfig+0x146>
 8004b80:	e06c      	b.n	8004c5c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b82:	4b7b      	ldr	r3, [pc, #492]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	220c      	movs	r2, #12
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b8c:	4b78      	ldr	r3, [pc, #480]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	220c      	movs	r2, #12
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d11f      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x19c>
 8004b98:	4b75      	ldr	r3, [pc, #468]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	23c0      	movs	r3, #192	; 0xc0
 8004b9e:	025b      	lsls	r3, r3, #9
 8004ba0:	401a      	ands	r2, r3
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d116      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004baa:	4b71      	ldr	r3, [pc, #452]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x184>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e24c      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc0:	4b6b      	ldr	r3, [pc, #428]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	22f8      	movs	r2, #248	; 0xf8
 8004bc6:	4393      	bics	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00da      	lsls	r2, r3, #3
 8004bd0:	4b67      	ldr	r3, [pc, #412]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	e041      	b.n	8004c5c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d024      	beq.n	8004c2a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be0:	4b63      	ldr	r3, [pc, #396]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b62      	ldr	r3, [pc, #392]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004be6:	2101      	movs	r1, #1
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7ff fc9a 	bl	8004524 <HAL_GetTick>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf6:	f7ff fc95 	bl	8004524 <HAL_GetTick>
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e228      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c08:	4b59      	ldr	r3, [pc, #356]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d0f1      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c12:	4b57      	ldr	r3, [pc, #348]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	22f8      	movs	r2, #248	; 0xf8
 8004c18:	4393      	bics	r3, r2
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	00da      	lsls	r2, r3, #3
 8004c22:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e018      	b.n	8004c5c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c2a:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004c30:	2101      	movs	r1, #1
 8004c32:	438a      	bics	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7ff fc75 	bl	8004524 <HAL_GetTick>
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c40:	f7ff fc70 	bl	8004524 <HAL_GetTick>
 8004c44:	0002      	movs	r2, r0
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e203      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c52:	4b47      	ldr	r3, [pc, #284]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2202      	movs	r2, #2
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d1f1      	bne.n	8004c40 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2208      	movs	r2, #8
 8004c62:	4013      	ands	r3, r2
 8004c64:	d036      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d019      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c6e:	4b40      	ldr	r3, [pc, #256]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c72:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004c74:	2101      	movs	r1, #1
 8004c76:	430a      	orrs	r2, r1
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7a:	f7ff fc53 	bl	8004524 <HAL_GetTick>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c84:	f7ff fc4e 	bl	8004524 <HAL_GetTick>
 8004c88:	0002      	movs	r2, r0
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e1e1      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c96:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d0f1      	beq.n	8004c84 <HAL_RCC_OscConfig+0x248>
 8004ca0:	e018      	b.n	8004cd4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca2:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca6:	4b32      	ldr	r3, [pc, #200]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ca8:	2101      	movs	r1, #1
 8004caa:	438a      	bics	r2, r1
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cae:	f7ff fc39 	bl	8004524 <HAL_GetTick>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb8:	f7ff fc34 	bl	8004524 <HAL_GetTick>
 8004cbc:	0002      	movs	r2, r0
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e1c7      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cca:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2202      	movs	r2, #2
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d1f1      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d100      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x2a4>
 8004cde:	e0b5      	b.n	8004e4c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce0:	201f      	movs	r0, #31
 8004ce2:	183b      	adds	r3, r7, r0
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce8:	4b21      	ldr	r3, [pc, #132]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004cea:	69da      	ldr	r2, [r3, #28]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	055b      	lsls	r3, r3, #21
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d110      	bne.n	8004d16 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf4:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	0549      	lsls	r1, r1, #21
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	61da      	str	r2, [r3, #28]
 8004d02:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	055b      	lsls	r3, r3, #21
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d10:	183b      	adds	r3, r7, r0
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_OscConfig+0x340>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d11a      	bne.n	8004d58 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <HAL_RCC_OscConfig+0x340>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <HAL_RCC_OscConfig+0x340>)
 8004d28:	2180      	movs	r1, #128	; 0x80
 8004d2a:	0049      	lsls	r1, r1, #1
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d30:	f7ff fbf8 	bl	8004524 <HAL_GetTick>
 8004d34:	0003      	movs	r3, r0
 8004d36:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3a:	f7ff fbf3 	bl	8004524 <HAL_GetTick>
 8004d3e:	0002      	movs	r2, r0
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	; 0x64
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e186      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_OscConfig+0x340>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4013      	ands	r3, r2
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10f      	bne.n	8004d80 <HAL_RCC_OscConfig+0x344>
 8004d60:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004d62:	6a1a      	ldr	r2, [r3, #32]
 8004d64:	4b02      	ldr	r3, [pc, #8]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004d66:	2101      	movs	r1, #1
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	621a      	str	r2, [r3, #32]
 8004d6c:	e036      	b.n	8004ddc <HAL_RCC_OscConfig+0x3a0>
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	40021000 	.word	0x40021000
 8004d74:	fffeffff 	.word	0xfffeffff
 8004d78:	fffbffff 	.word	0xfffbffff
 8004d7c:	40007000 	.word	0x40007000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10c      	bne.n	8004da2 <HAL_RCC_OscConfig+0x366>
 8004d88:	4bb6      	ldr	r3, [pc, #728]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	4bb5      	ldr	r3, [pc, #724]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004d8e:	2101      	movs	r1, #1
 8004d90:	438a      	bics	r2, r1
 8004d92:	621a      	str	r2, [r3, #32]
 8004d94:	4bb3      	ldr	r3, [pc, #716]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	4bb2      	ldr	r3, [pc, #712]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004d9a:	2104      	movs	r1, #4
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	621a      	str	r2, [r3, #32]
 8004da0:	e01c      	b.n	8004ddc <HAL_RCC_OscConfig+0x3a0>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x388>
 8004daa:	4bae      	ldr	r3, [pc, #696]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004dac:	6a1a      	ldr	r2, [r3, #32]
 8004dae:	4bad      	ldr	r3, [pc, #692]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004db0:	2104      	movs	r1, #4
 8004db2:	430a      	orrs	r2, r1
 8004db4:	621a      	str	r2, [r3, #32]
 8004db6:	4bab      	ldr	r3, [pc, #684]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	4baa      	ldr	r3, [pc, #680]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	621a      	str	r2, [r3, #32]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0x3a0>
 8004dc4:	4ba7      	ldr	r3, [pc, #668]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	4ba6      	ldr	r3, [pc, #664]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004dca:	2101      	movs	r1, #1
 8004dcc:	438a      	bics	r2, r1
 8004dce:	621a      	str	r2, [r3, #32]
 8004dd0:	4ba4      	ldr	r3, [pc, #656]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	4ba3      	ldr	r3, [pc, #652]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004dd6:	2104      	movs	r1, #4
 8004dd8:	438a      	bics	r2, r1
 8004dda:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d014      	beq.n	8004e0e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de4:	f7ff fb9e 	bl	8004524 <HAL_GetTick>
 8004de8:	0003      	movs	r3, r0
 8004dea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dec:	e009      	b.n	8004e02 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7ff fb99 	bl	8004524 <HAL_GetTick>
 8004df2:	0002      	movs	r2, r0
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	4a9b      	ldr	r2, [pc, #620]	; (8005068 <HAL_RCC_OscConfig+0x62c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e12b      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e02:	4b98      	ldr	r3, [pc, #608]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	2202      	movs	r2, #2
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x3b2>
 8004e0c:	e013      	b.n	8004e36 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0e:	f7ff fb89 	bl	8004524 <HAL_GetTick>
 8004e12:	0003      	movs	r3, r0
 8004e14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e16:	e009      	b.n	8004e2c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7ff fb84 	bl	8004524 <HAL_GetTick>
 8004e1c:	0002      	movs	r2, r0
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	4a91      	ldr	r2, [pc, #580]	; (8005068 <HAL_RCC_OscConfig+0x62c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e116      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2c:	4b8d      	ldr	r3, [pc, #564]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	2202      	movs	r2, #2
 8004e32:	4013      	ands	r3, r2
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e36:	231f      	movs	r3, #31
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e40:	4b88      	ldr	r3, [pc, #544]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	4b87      	ldr	r3, [pc, #540]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e46:	4989      	ldr	r1, [pc, #548]	; (800506c <HAL_RCC_OscConfig+0x630>)
 8004e48:	400a      	ands	r2, r1
 8004e4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2210      	movs	r2, #16
 8004e52:	4013      	ands	r3, r2
 8004e54:	d063      	beq.n	8004f1e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d12a      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e5e:	4b81      	ldr	r3, [pc, #516]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e62:	4b80      	ldr	r3, [pc, #512]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e64:	2104      	movs	r1, #4
 8004e66:	430a      	orrs	r2, r1
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004e6a:	4b7e      	ldr	r3, [pc, #504]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6e:	4b7d      	ldr	r3, [pc, #500]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e70:	2101      	movs	r1, #1
 8004e72:	430a      	orrs	r2, r1
 8004e74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e76:	f7ff fb55 	bl	8004524 <HAL_GetTick>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e80:	f7ff fb50 	bl	8004524 <HAL_GetTick>
 8004e84:	0002      	movs	r2, r0
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0e3      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e92:	4b74      	ldr	r3, [pc, #464]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	2202      	movs	r2, #2
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d0f1      	beq.n	8004e80 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e9c:	4b71      	ldr	r3, [pc, #452]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	22f8      	movs	r2, #248	; 0xf8
 8004ea2:	4393      	bics	r3, r2
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	00da      	lsls	r2, r3, #3
 8004eac:	4b6d      	ldr	r3, [pc, #436]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8004eb2:	e034      	b.n	8004f1e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	3305      	adds	r3, #5
 8004eba:	d111      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004ebc:	4b69      	ldr	r3, [pc, #420]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec0:	4b68      	ldr	r3, [pc, #416]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004ec2:	2104      	movs	r1, #4
 8004ec4:	438a      	bics	r2, r1
 8004ec6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ec8:	4b66      	ldr	r3, [pc, #408]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ecc:	22f8      	movs	r2, #248	; 0xf8
 8004ece:	4393      	bics	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	00da      	lsls	r2, r3, #3
 8004ed8:	4b62      	ldr	r3, [pc, #392]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004eda:	430a      	orrs	r2, r1
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ede:	e01e      	b.n	8004f1e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ee0:	4b60      	ldr	r3, [pc, #384]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee4:	4b5f      	ldr	r3, [pc, #380]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004eec:	4b5d      	ldr	r3, [pc, #372]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef0:	4b5c      	ldr	r3, [pc, #368]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	438a      	bics	r2, r1
 8004ef6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef8:	f7ff fb14 	bl	8004524 <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f02:	f7ff fb0f 	bl	8004524 <HAL_GetTick>
 8004f06:	0002      	movs	r2, r0
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0a2      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f14:	4b53      	ldr	r3, [pc, #332]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f18:	2202      	movs	r2, #2
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d1f1      	bne.n	8004f02 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d100      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4ec>
 8004f26:	e097      	b.n	8005058 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f28:	4b4e      	ldr	r3, [pc, #312]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	220c      	movs	r2, #12
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d100      	bne.n	8004f36 <HAL_RCC_OscConfig+0x4fa>
 8004f34:	e06b      	b.n	800500e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d14c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3e:	4b49      	ldr	r3, [pc, #292]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b48      	ldr	r3, [pc, #288]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004f44:	494a      	ldr	r1, [pc, #296]	; (8005070 <HAL_RCC_OscConfig+0x634>)
 8004f46:	400a      	ands	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4a:	f7ff faeb 	bl	8004524 <HAL_GetTick>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f54:	f7ff fae6 	bl	8004524 <HAL_GetTick>
 8004f58:	0002      	movs	r2, r0
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e079      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f66:	4b3f      	ldr	r3, [pc, #252]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	049b      	lsls	r3, r3, #18
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f72:	4b3c      	ldr	r3, [pc, #240]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	220f      	movs	r2, #15
 8004f78:	4393      	bics	r3, r2
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	4b38      	ldr	r3, [pc, #224]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004f82:	430a      	orrs	r2, r1
 8004f84:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f86:	4b37      	ldr	r3, [pc, #220]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4a3a      	ldr	r2, [pc, #232]	; (8005074 <HAL_RCC_OscConfig+0x638>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	0019      	movs	r1, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	4b32      	ldr	r3, [pc, #200]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa0:	4b30      	ldr	r3, [pc, #192]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004fa6:	2180      	movs	r1, #128	; 0x80
 8004fa8:	0449      	lsls	r1, r1, #17
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fae:	f7ff fab9 	bl	8004524 <HAL_GetTick>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7ff fab4 	bl	8004524 <HAL_GetTick>
 8004fbc:	0002      	movs	r2, r0
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e047      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fca:	4b26      	ldr	r3, [pc, #152]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	049b      	lsls	r3, r3, #18
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x57c>
 8004fd6:	e03f      	b.n	8005058 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd8:	4b22      	ldr	r3, [pc, #136]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b21      	ldr	r3, [pc, #132]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004fde:	4924      	ldr	r1, [pc, #144]	; (8005070 <HAL_RCC_OscConfig+0x634>)
 8004fe0:	400a      	ands	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7ff fa9e 	bl	8004524 <HAL_GetTick>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fee:	f7ff fa99 	bl	8004524 <HAL_GetTick>
 8004ff2:	0002      	movs	r2, r0
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e02c      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005000:	4b18      	ldr	r3, [pc, #96]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	049b      	lsls	r3, r3, #18
 8005008:	4013      	ands	r3, r2
 800500a:	d1f0      	bne.n	8004fee <HAL_RCC_OscConfig+0x5b2>
 800500c:	e024      	b.n	8005058 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e01f      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	23c0      	movs	r3, #192	; 0xc0
 800502a:	025b      	lsls	r3, r3, #9
 800502c:	401a      	ands	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	429a      	cmp	r2, r3
 8005034:	d10e      	bne.n	8005054 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	220f      	movs	r2, #15
 800503a:	401a      	ands	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005040:	429a      	cmp	r2, r3
 8005042:	d107      	bne.n	8005054 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	23f0      	movs	r3, #240	; 0xf0
 8005048:	039b      	lsls	r3, r3, #14
 800504a:	401a      	ands	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d001      	beq.n	8005058 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	0018      	movs	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	b008      	add	sp, #32
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	40021000 	.word	0x40021000
 8005068:	00001388 	.word	0x00001388
 800506c:	efffffff 	.word	0xefffffff
 8005070:	feffffff 	.word	0xfeffffff
 8005074:	ffc27fff 	.word	0xffc27fff

08005078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0b3      	b.n	80051f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800508c:	4b5b      	ldr	r3, [pc, #364]	; (80051fc <HAL_RCC_ClockConfig+0x184>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2201      	movs	r2, #1
 8005092:	4013      	ands	r3, r2
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d911      	bls.n	80050be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	4b58      	ldr	r3, [pc, #352]	; (80051fc <HAL_RCC_ClockConfig+0x184>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2201      	movs	r2, #1
 80050a0:	4393      	bics	r3, r2
 80050a2:	0019      	movs	r1, r3
 80050a4:	4b55      	ldr	r3, [pc, #340]	; (80051fc <HAL_RCC_ClockConfig+0x184>)
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ac:	4b53      	ldr	r3, [pc, #332]	; (80051fc <HAL_RCC_ClockConfig+0x184>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2201      	movs	r2, #1
 80050b2:	4013      	ands	r3, r2
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d001      	beq.n	80050be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e09a      	b.n	80051f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2202      	movs	r2, #2
 80050c4:	4013      	ands	r3, r2
 80050c6:	d015      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2204      	movs	r2, #4
 80050ce:	4013      	ands	r3, r2
 80050d0:	d006      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050d2:	4b4b      	ldr	r3, [pc, #300]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	4b4a      	ldr	r3, [pc, #296]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 80050d8:	21e0      	movs	r1, #224	; 0xe0
 80050da:	00c9      	lsls	r1, r1, #3
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e0:	4b47      	ldr	r3, [pc, #284]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	22f0      	movs	r2, #240	; 0xf0
 80050e6:	4393      	bics	r3, r2
 80050e8:	0019      	movs	r1, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	4b44      	ldr	r3, [pc, #272]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2201      	movs	r2, #1
 80050fa:	4013      	ands	r3, r2
 80050fc:	d040      	beq.n	8005180 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d107      	bne.n	8005116 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005106:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	029b      	lsls	r3, r3, #10
 800510e:	4013      	ands	r3, r2
 8005110:	d114      	bne.n	800513c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e06e      	b.n	80051f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d107      	bne.n	800512e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511e:	4b38      	ldr	r3, [pc, #224]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	049b      	lsls	r3, r3, #18
 8005126:	4013      	ands	r3, r2
 8005128:	d108      	bne.n	800513c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e062      	b.n	80051f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512e:	4b34      	ldr	r3, [pc, #208]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2202      	movs	r2, #2
 8005134:	4013      	ands	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e05b      	b.n	80051f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800513c:	4b30      	ldr	r3, [pc, #192]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2203      	movs	r2, #3
 8005142:	4393      	bics	r3, r2
 8005144:	0019      	movs	r1, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	4b2d      	ldr	r3, [pc, #180]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005150:	f7ff f9e8 	bl	8004524 <HAL_GetTick>
 8005154:	0003      	movs	r3, r0
 8005156:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005158:	e009      	b.n	800516e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515a:	f7ff f9e3 	bl	8004524 <HAL_GetTick>
 800515e:	0002      	movs	r2, r0
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	4a27      	ldr	r2, [pc, #156]	; (8005204 <HAL_RCC_ClockConfig+0x18c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e042      	b.n	80051f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	220c      	movs	r2, #12
 8005174:	401a      	ands	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	429a      	cmp	r2, r3
 800517e:	d1ec      	bne.n	800515a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005180:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <HAL_RCC_ClockConfig+0x184>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	4013      	ands	r3, r2
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d211      	bcs.n	80051b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_RCC_ClockConfig+0x184>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2201      	movs	r2, #1
 8005194:	4393      	bics	r3, r2
 8005196:	0019      	movs	r1, r3
 8005198:	4b18      	ldr	r3, [pc, #96]	; (80051fc <HAL_RCC_ClockConfig+0x184>)
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a0:	4b16      	ldr	r3, [pc, #88]	; (80051fc <HAL_RCC_ClockConfig+0x184>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e020      	b.n	80051f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2204      	movs	r2, #4
 80051b8:	4013      	ands	r3, r2
 80051ba:	d009      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051bc:	4b10      	ldr	r3, [pc, #64]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a11      	ldr	r2, [pc, #68]	; (8005208 <HAL_RCC_ClockConfig+0x190>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	0019      	movs	r1, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80051d0:	f000 f820 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 80051d4:	0001      	movs	r1, r0
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_RCC_ClockConfig+0x188>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	220f      	movs	r2, #15
 80051de:	4013      	ands	r3, r2
 80051e0:	4a0a      	ldr	r2, [pc, #40]	; (800520c <HAL_RCC_ClockConfig+0x194>)
 80051e2:	5cd3      	ldrb	r3, [r2, r3]
 80051e4:	000a      	movs	r2, r1
 80051e6:	40da      	lsrs	r2, r3
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCC_ClockConfig+0x198>)
 80051ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80051ec:	2003      	movs	r0, #3
 80051ee:	f7ff f953 	bl	8004498 <HAL_InitTick>
  
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b004      	add	sp, #16
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40022000 	.word	0x40022000
 8005200:	40021000 	.word	0x40021000
 8005204:	00001388 	.word	0x00001388
 8005208:	fffff8ff 	.word	0xfffff8ff
 800520c:	08007d84 	.word	0x08007d84
 8005210:	20000000 	.word	0x20000000

08005214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b08f      	sub	sp, #60	; 0x3c
 8005218:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800521a:	2314      	movs	r3, #20
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005220:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005222:	c313      	stmia	r3!, {r0, r1, r4}
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005228:	1d3b      	adds	r3, r7, #4
 800522a:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800522c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800522e:	c313      	stmia	r3!, {r0, r1, r4}
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005238:	2300      	movs	r3, #0
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
 800523c:	2300      	movs	r3, #0
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
 8005240:	2300      	movs	r3, #0
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005248:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	220c      	movs	r2, #12
 8005252:	4013      	ands	r3, r2
 8005254:	2b04      	cmp	r3, #4
 8005256:	d002      	beq.n	800525e <HAL_RCC_GetSysClockFreq+0x4a>
 8005258:	2b08      	cmp	r3, #8
 800525a:	d003      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x50>
 800525c:	e02f      	b.n	80052be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800525e:	4b1f      	ldr	r3, [pc, #124]	; (80052dc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005260:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005262:	e02f      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	0c9b      	lsrs	r3, r3, #18
 8005268:	220f      	movs	r2, #15
 800526a:	4013      	ands	r3, r2
 800526c:	2214      	movs	r2, #20
 800526e:	18ba      	adds	r2, r7, r2
 8005270:	5cd3      	ldrb	r3, [r2, r3]
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	220f      	movs	r2, #15
 800527a:	4013      	ands	r3, r2
 800527c:	1d3a      	adds	r2, r7, #4
 800527e:	5cd3      	ldrb	r3, [r2, r3]
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005284:	23c0      	movs	r3, #192	; 0xc0
 8005286:	025b      	lsls	r3, r3, #9
 8005288:	401a      	ands	r2, r3
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	025b      	lsls	r3, r3, #9
 800528e:	429a      	cmp	r2, r3
 8005290:	d109      	bne.n	80052a6 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005292:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005294:	4811      	ldr	r0, [pc, #68]	; (80052dc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005296:	f7fa ff3f 	bl	8000118 <__udivsi3>
 800529a:	0003      	movs	r3, r0
 800529c:	001a      	movs	r2, r3
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	4353      	muls	r3, r2
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052a8:	480c      	ldr	r0, [pc, #48]	; (80052dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80052aa:	f7fa ff35 	bl	8000118 <__udivsi3>
 80052ae:	0003      	movs	r3, r0
 80052b0:	001a      	movs	r2, r3
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	4353      	muls	r3, r2
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80052b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80052bc:	e002      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80052c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80052c6:	0018      	movs	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b00f      	add	sp, #60	; 0x3c
 80052cc:	bd90      	pop	{r4, r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	0800797c 	.word	0x0800797c
 80052d4:	0800798c 	.word	0x0800798c
 80052d8:	40021000 	.word	0x40021000
 80052dc:	007a1200 	.word	0x007a1200

080052e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e4:	4b02      	ldr	r3, [pc, #8]	; (80052f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80052e6:	681b      	ldr	r3, [r3, #0]
}
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	20000000 	.word	0x20000000

080052f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80052f8:	f7ff fff2 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 80052fc:	0001      	movs	r1, r0
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	2207      	movs	r2, #7
 8005306:	4013      	ands	r3, r2
 8005308:	4a04      	ldr	r2, [pc, #16]	; (800531c <HAL_RCC_GetPCLK1Freq+0x28>)
 800530a:	5cd3      	ldrb	r3, [r2, r3]
 800530c:	40d9      	lsrs	r1, r3
 800530e:	000b      	movs	r3, r1
}    
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	40021000 	.word	0x40021000
 800531c:	08007d94 	.word	0x08007d94

08005320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	025b      	lsls	r3, r3, #9
 8005338:	4013      	ands	r3, r2
 800533a:	d100      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800533c:	e08e      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800533e:	2017      	movs	r0, #23
 8005340:	183b      	adds	r3, r7, r0
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005346:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005348:	69da      	ldr	r2, [r3, #28]
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	055b      	lsls	r3, r3, #21
 800534e:	4013      	ands	r3, r2
 8005350:	d110      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005352:	4b5c      	ldr	r3, [pc, #368]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005354:	69da      	ldr	r2, [r3, #28]
 8005356:	4b5b      	ldr	r3, [pc, #364]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	0549      	lsls	r1, r1, #21
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
 8005360:	4b58      	ldr	r3, [pc, #352]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	055b      	lsls	r3, r3, #21
 8005368:	4013      	ands	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536e:	183b      	adds	r3, r7, r0
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005374:	4b54      	ldr	r3, [pc, #336]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	2380      	movs	r3, #128	; 0x80
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4013      	ands	r3, r2
 800537e:	d11a      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005380:	4b51      	ldr	r3, [pc, #324]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	4b50      	ldr	r3, [pc, #320]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005386:	2180      	movs	r1, #128	; 0x80
 8005388:	0049      	lsls	r1, r1, #1
 800538a:	430a      	orrs	r2, r1
 800538c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538e:	f7ff f8c9 	bl	8004524 <HAL_GetTick>
 8005392:	0003      	movs	r3, r0
 8005394:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005396:	e008      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005398:	f7ff f8c4 	bl	8004524 <HAL_GetTick>
 800539c:	0002      	movs	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	; 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e087      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053aa:	4b47      	ldr	r3, [pc, #284]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	4013      	ands	r3, r2
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053b6:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	23c0      	movs	r3, #192	; 0xc0
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4013      	ands	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d034      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	23c0      	movs	r3, #192	; 0xc0
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4013      	ands	r3, r2
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d02c      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053d8:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	4a3b      	ldr	r2, [pc, #236]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053de:	4013      	ands	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053e2:	4b38      	ldr	r3, [pc, #224]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053e4:	6a1a      	ldr	r2, [r3, #32]
 80053e6:	4b37      	ldr	r3, [pc, #220]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053e8:	2180      	movs	r1, #128	; 0x80
 80053ea:	0249      	lsls	r1, r1, #9
 80053ec:	430a      	orrs	r2, r1
 80053ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053f0:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	4b33      	ldr	r3, [pc, #204]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053f6:	4936      	ldr	r1, [pc, #216]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80053f8:	400a      	ands	r2, r1
 80053fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053fc:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	4013      	ands	r3, r2
 8005408:	d013      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540a:	f7ff f88b 	bl	8004524 <HAL_GetTick>
 800540e:	0003      	movs	r3, r0
 8005410:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005412:	e009      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005414:	f7ff f886 	bl	8004524 <HAL_GetTick>
 8005418:	0002      	movs	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d901      	bls.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e048      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005428:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	2202      	movs	r2, #2
 800542e:	4013      	ands	r3, r2
 8005430:	d0f0      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4a25      	ldr	r2, [pc, #148]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005442:	430a      	orrs	r2, r1
 8005444:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005446:	2317      	movs	r3, #23
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005450:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005456:	4920      	ldr	r1, [pc, #128]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005458:	400a      	ands	r2, r1
 800545a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2201      	movs	r2, #1
 8005462:	4013      	ands	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005466:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	2203      	movs	r2, #3
 800546c:	4393      	bics	r3, r2
 800546e:	0019      	movs	r1, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005476:	430a      	orrs	r2, r1
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2220      	movs	r2, #32
 8005480:	4013      	ands	r3, r2
 8005482:	d009      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	2210      	movs	r2, #16
 800548a:	4393      	bics	r3, r2
 800548c:	0019      	movs	r1, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005494:	430a      	orrs	r2, r1
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	4013      	ands	r3, r2
 80054a2:	d009      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054a4:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	2280      	movs	r2, #128	; 0x80
 80054aa:	4393      	bics	r3, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80054b4:	430a      	orrs	r2, r1
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b006      	add	sp, #24
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	40021000 	.word	0x40021000
 80054c8:	40007000 	.word	0x40007000
 80054cc:	fffffcff 	.word	0xfffffcff
 80054d0:	fffeffff 	.word	0xfffeffff
 80054d4:	00001388 	.word	0x00001388
 80054d8:	efffffff 	.word	0xefffffff

080054dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0a8      	b.n	8005640 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	2382      	movs	r3, #130	; 0x82
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	429a      	cmp	r2, r3
 8005500:	d009      	beq.n	8005516 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	61da      	str	r2, [r3, #28]
 8005508:	e005      	b.n	8005516 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	225d      	movs	r2, #93	; 0x5d
 8005520:	5c9b      	ldrb	r3, [r3, r2]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	225c      	movs	r2, #92	; 0x5c
 800552c:	2100      	movs	r1, #0
 800552e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	0018      	movs	r0, r3
 8005534:	f7fe fea4 	bl	8004280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	225d      	movs	r2, #93	; 0x5d
 800553c:	2102      	movs	r1, #2
 800553e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2140      	movs	r1, #64	; 0x40
 800554c:	438a      	bics	r2, r1
 800554e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	23e0      	movs	r3, #224	; 0xe0
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	429a      	cmp	r2, r3
 800555a:	d902      	bls.n	8005562 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e002      	b.n	8005568 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	015b      	lsls	r3, r3, #5
 8005566:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	23f0      	movs	r3, #240	; 0xf0
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	429a      	cmp	r2, r3
 8005572:	d008      	beq.n	8005586 <HAL_SPI_Init+0xaa>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	23e0      	movs	r3, #224	; 0xe0
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	429a      	cmp	r2, r3
 800557e:	d002      	beq.n	8005586 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	2382      	movs	r3, #130	; 0x82
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	401a      	ands	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6899      	ldr	r1, [r3, #8]
 8005594:	2384      	movs	r3, #132	; 0x84
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	400b      	ands	r3, r1
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2102      	movs	r1, #2
 80055a2:	400b      	ands	r3, r1
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2101      	movs	r1, #1
 80055ac:	400b      	ands	r3, r1
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6999      	ldr	r1, [r3, #24]
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	400b      	ands	r3, r1
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	2138      	movs	r1, #56	; 0x38
 80055c2:	400b      	ands	r3, r1
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	2180      	movs	r1, #128	; 0x80
 80055cc:	400b      	ands	r3, r1
 80055ce:	431a      	orrs	r2, r3
 80055d0:	0011      	movs	r1, r2
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	019b      	lsls	r3, r3, #6
 80055da:	401a      	ands	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	2204      	movs	r2, #4
 80055ec:	401a      	ands	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2110      	movs	r1, #16
 80055f4:	400b      	ands	r3, r1
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	2108      	movs	r1, #8
 80055fe:	400b      	ands	r3, r1
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68d9      	ldr	r1, [r3, #12]
 8005606:	23f0      	movs	r3, #240	; 0xf0
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	400b      	ands	r3, r1
 800560c:	431a      	orrs	r2, r3
 800560e:	0011      	movs	r1, r2
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	015b      	lsls	r3, r3, #5
 8005616:	401a      	ands	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4907      	ldr	r1, [pc, #28]	; (8005648 <HAL_SPI_Init+0x16c>)
 800562c:	400a      	ands	r2, r1
 800562e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	225d      	movs	r2, #93	; 0x5d
 800563a:	2101      	movs	r1, #1
 800563c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	b004      	add	sp, #16
 8005646:	bd80      	pop	{r7, pc}
 8005648:	fffff7ff 	.word	0xfffff7ff

0800564c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	1dbb      	adds	r3, r7, #6
 800565a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800565c:	231f      	movs	r3, #31
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	2200      	movs	r2, #0
 8005662:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	225c      	movs	r2, #92	; 0x5c
 8005668:	5c9b      	ldrb	r3, [r3, r2]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_SPI_Transmit+0x26>
 800566e:	2302      	movs	r3, #2
 8005670:	e140      	b.n	80058f4 <HAL_SPI_Transmit+0x2a8>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	225c      	movs	r2, #92	; 0x5c
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800567a:	f7fe ff53 	bl	8004524 <HAL_GetTick>
 800567e:	0003      	movs	r3, r0
 8005680:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005682:	2316      	movs	r3, #22
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	1dba      	adds	r2, r7, #6
 8005688:	8812      	ldrh	r2, [r2, #0]
 800568a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	225d      	movs	r2, #93	; 0x5d
 8005690:	5c9b      	ldrb	r3, [r3, r2]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d004      	beq.n	80056a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005698:	231f      	movs	r3, #31
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	2202      	movs	r2, #2
 800569e:	701a      	strb	r2, [r3, #0]
    goto error;
 80056a0:	e11d      	b.n	80058de <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_SPI_Transmit+0x64>
 80056a8:	1dbb      	adds	r3, r7, #6
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80056b0:	231f      	movs	r3, #31
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	2201      	movs	r2, #1
 80056b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80056b8:	e111      	b.n	80058de <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	225d      	movs	r2, #93	; 0x5d
 80056be:	2103      	movs	r1, #3
 80056c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1dba      	adds	r2, r7, #6
 80056d2:	8812      	ldrh	r2, [r2, #0]
 80056d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1dba      	adds	r2, r7, #6
 80056da:	8812      	ldrh	r2, [r2, #0]
 80056dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2244      	movs	r2, #68	; 0x44
 80056e8:	2100      	movs	r1, #0
 80056ea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2246      	movs	r2, #70	; 0x46
 80056f0:	2100      	movs	r1, #0
 80056f2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	429a      	cmp	r2, r3
 800570a:	d110      	bne.n	800572e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2140      	movs	r1, #64	; 0x40
 8005718:	438a      	bics	r2, r1
 800571a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	01c9      	lsls	r1, r1, #7
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2240      	movs	r2, #64	; 0x40
 8005736:	4013      	ands	r3, r2
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d007      	beq.n	800574c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2140      	movs	r1, #64	; 0x40
 8005748:	430a      	orrs	r2, r1
 800574a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	23e0      	movs	r3, #224	; 0xe0
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	429a      	cmp	r2, r3
 8005756:	d94e      	bls.n	80057f6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d004      	beq.n	800576a <HAL_SPI_Transmit+0x11e>
 8005760:	2316      	movs	r3, #22
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d13f      	bne.n	80057ea <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	881a      	ldrh	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	1c9a      	adds	r2, r3, #2
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800578e:	e02c      	b.n	80057ea <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2202      	movs	r2, #2
 8005798:	4013      	ands	r3, r2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d112      	bne.n	80057c4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057c2:	e012      	b.n	80057ea <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c4:	f7fe feae 	bl	8004524 <HAL_GetTick>
 80057c8:	0002      	movs	r2, r0
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d802      	bhi.n	80057da <HAL_SPI_Transmit+0x18e>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	d102      	bne.n	80057e0 <HAL_SPI_Transmit+0x194>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80057e0:	231f      	movs	r3, #31
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	2203      	movs	r2, #3
 80057e6:	701a      	strb	r2, [r3, #0]
          goto error;
 80057e8:	e079      	b.n	80058de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1cd      	bne.n	8005790 <HAL_SPI_Transmit+0x144>
 80057f4:	e04f      	b.n	8005896 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <HAL_SPI_Transmit+0x1bc>
 80057fe:	2316      	movs	r3, #22
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d141      	bne.n	800588c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	330c      	adds	r3, #12
 8005812:	7812      	ldrb	r2, [r2, #0]
 8005814:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800582e:	e02d      	b.n	800588c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2202      	movs	r2, #2
 8005838:	4013      	ands	r3, r2
 800583a:	2b02      	cmp	r3, #2
 800583c:	d113      	bne.n	8005866 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	7812      	ldrb	r2, [r2, #0]
 800584a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005864:	e012      	b.n	800588c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005866:	f7fe fe5d 	bl	8004524 <HAL_GetTick>
 800586a:	0002      	movs	r2, r0
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d802      	bhi.n	800587c <HAL_SPI_Transmit+0x230>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	d102      	bne.n	8005882 <HAL_SPI_Transmit+0x236>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005882:	231f      	movs	r3, #31
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	2203      	movs	r2, #3
 8005888:	701a      	strb	r2, [r3, #0]
          goto error;
 800588a:	e028      	b.n	80058de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1cc      	bne.n	8005830 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	0018      	movs	r0, r3
 800589e:	f000 f95d 	bl	8005b5c <SPI_EndRxTxTransaction>
 80058a2:	1e03      	subs	r3, r0, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80058d2:	231f      	movs	r3, #31
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e000      	b.n	80058de <HAL_SPI_Transmit+0x292>
  }

error:
 80058dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	225d      	movs	r2, #93	; 0x5d
 80058e2:	2101      	movs	r1, #1
 80058e4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	225c      	movs	r2, #92	; 0x5c
 80058ea:	2100      	movs	r1, #0
 80058ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80058ee:	231f      	movs	r3, #31
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	781b      	ldrb	r3, [r3, #0]
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b008      	add	sp, #32
 80058fa:	bd80      	pop	{r7, pc}

080058fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	1dfb      	adds	r3, r7, #7
 800590a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800590c:	f7fe fe0a 	bl	8004524 <HAL_GetTick>
 8005910:	0002      	movs	r2, r0
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800591c:	f7fe fe02 	bl	8004524 <HAL_GetTick>
 8005920:	0003      	movs	r3, r0
 8005922:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005924:	4b3a      	ldr	r3, [pc, #232]	; (8005a10 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	015b      	lsls	r3, r3, #5
 800592a:	0d1b      	lsrs	r3, r3, #20
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	4353      	muls	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005932:	e058      	b.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	3301      	adds	r3, #1
 8005938:	d055      	beq.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800593a:	f7fe fdf3 	bl	8004524 <HAL_GetTick>
 800593e:	0002      	movs	r2, r0
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	429a      	cmp	r2, r3
 8005948:	d902      	bls.n	8005950 <SPI_WaitFlagStateUntilTimeout+0x54>
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d142      	bne.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	21e0      	movs	r1, #224	; 0xe0
 800595c:	438a      	bics	r2, r1
 800595e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	2382      	movs	r3, #130	; 0x82
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	429a      	cmp	r2, r3
 800596a:	d113      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0x98>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	2380      	movs	r3, #128	; 0x80
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	429a      	cmp	r2, r3
 8005976:	d005      	beq.n	8005984 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	429a      	cmp	r2, r3
 8005982:	d107      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2140      	movs	r1, #64	; 0x40
 8005990:	438a      	bics	r2, r1
 8005992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	019b      	lsls	r3, r3, #6
 800599c:	429a      	cmp	r2, r3
 800599e:	d110      	bne.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	491a      	ldr	r1, [pc, #104]	; (8005a14 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80059ac:	400a      	ands	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2180      	movs	r1, #128	; 0x80
 80059bc:	0189      	lsls	r1, r1, #6
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	225d      	movs	r2, #93	; 0x5d
 80059c6:	2101      	movs	r1, #1
 80059c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	225c      	movs	r2, #92	; 0x5c
 80059ce:	2100      	movs	r1, #0
 80059d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e017      	b.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	425a      	negs	r2, r3
 80059f6:	4153      	adcs	r3, r2
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	001a      	movs	r2, r3
 80059fc:	1dfb      	adds	r3, r7, #7
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d197      	bne.n	8005934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	0018      	movs	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b008      	add	sp, #32
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	20000000 	.word	0x20000000
 8005a14:	ffffdfff 	.word	0xffffdfff

08005a18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a26:	2317      	movs	r3, #23
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a2e:	f7fe fd79 	bl	8004524 <HAL_GetTick>
 8005a32:	0002      	movs	r2, r0
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	18d3      	adds	r3, r2, r3
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a3e:	f7fe fd71 	bl	8004524 <HAL_GetTick>
 8005a42:	0003      	movs	r3, r0
 8005a44:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a4e:	4b41      	ldr	r3, [pc, #260]	; (8005b54 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	0013      	movs	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	189b      	adds	r3, r3, r2
 8005a58:	00da      	lsls	r2, r3, #3
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	0d1b      	lsrs	r3, r3, #20
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	4353      	muls	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a64:	e068      	b.n	8005b38 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	23c0      	movs	r3, #192	; 0xc0
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d10a      	bne.n	8005a86 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	2117      	movs	r1, #23
 8005a7e:	187b      	adds	r3, r7, r1
 8005a80:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a82:	187b      	adds	r3, r7, r1
 8005a84:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	d055      	beq.n	8005b38 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a8c:	f7fe fd4a 	bl	8004524 <HAL_GetTick>
 8005a90:	0002      	movs	r2, r0
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d902      	bls.n	8005aa2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d142      	bne.n	8005b28 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	21e0      	movs	r1, #224	; 0xe0
 8005aae:	438a      	bics	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	2382      	movs	r3, #130	; 0x82
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d113      	bne.n	8005ae6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d005      	beq.n	8005ad6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	2380      	movs	r3, #128	; 0x80
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d107      	bne.n	8005ae6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2140      	movs	r1, #64	; 0x40
 8005ae2:	438a      	bics	r2, r1
 8005ae4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d110      	bne.n	8005b14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4916      	ldr	r1, [pc, #88]	; (8005b58 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005afe:	400a      	ands	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2180      	movs	r1, #128	; 0x80
 8005b0e:	0189      	lsls	r1, r1, #6
 8005b10:	430a      	orrs	r2, r1
 8005b12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	225d      	movs	r2, #93	; 0x5d
 8005b18:	2101      	movs	r1, #1
 8005b1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	225c      	movs	r2, #92	; 0x5c
 8005b20:	2100      	movs	r1, #0
 8005b22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e010      	b.n	8005b4a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	4013      	ands	r3, r2
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d18e      	bne.n	8005a66 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b00a      	add	sp, #40	; 0x28
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	20000000 	.word	0x20000000
 8005b58:	ffffdfff 	.word	0xffffdfff

08005b5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	23c0      	movs	r3, #192	; 0xc0
 8005b6c:	0159      	lsls	r1, r3, #5
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	0013      	movs	r3, r2
 8005b76:	2200      	movs	r2, #0
 8005b78:	f7ff ff4e 	bl	8005a18 <SPI_WaitFifoStateUntilTimeout>
 8005b7c:	1e03      	subs	r3, r0, #0
 8005b7e:	d007      	beq.n	8005b90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	2220      	movs	r2, #32
 8005b86:	431a      	orrs	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e027      	b.n	8005be0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	0013      	movs	r3, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2180      	movs	r1, #128	; 0x80
 8005b9e:	f7ff fead 	bl	80058fc <SPI_WaitFlagStateUntilTimeout>
 8005ba2:	1e03      	subs	r3, r0, #0
 8005ba4:	d007      	beq.n	8005bb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005baa:	2220      	movs	r2, #32
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e014      	b.n	8005be0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	23c0      	movs	r3, #192	; 0xc0
 8005bba:	00d9      	lsls	r1, r3, #3
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	0013      	movs	r3, r2
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f7ff ff27 	bl	8005a18 <SPI_WaitFifoStateUntilTimeout>
 8005bca:	1e03      	subs	r3, r0, #0
 8005bcc:	d007      	beq.n	8005bde <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e000      	b.n	8005be0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b004      	add	sp, #16
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e044      	b.n	8005c84 <HAL_HalfDuplex_Init+0x9c>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2274      	movs	r2, #116	; 0x74
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7fe fb83 	bl	8004318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2224      	movs	r2, #36	; 0x24
 8005c16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2101      	movs	r1, #1
 8005c24:	438a      	bics	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 f8da 	bl	8005de4 <UART_SetConfig>
 8005c30:	0003      	movs	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e024      	b.n	8005c84 <HAL_HalfDuplex_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f000 fa0d 	bl	8006064 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported) and IREN (if IrDA is supported) bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	490d      	ldr	r1, [pc, #52]	; (8005c8c <HAL_HalfDuplex_Init+0xa4>)
 8005c56:	400a      	ands	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_IREN);
#endif /* USART_CR3_IREN */
#endif /* USART_CR3_SCEN */

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2108      	movs	r1, #8
 8005c66:	430a      	orrs	r2, r1
 8005c68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2101      	movs	r1, #1
 8005c76:	430a      	orrs	r2, r1
 8005c78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f000 faa5 	bl	80061cc <UART_CheckIdleState>
 8005c82:	0003      	movs	r3, r0
}
 8005c84:	0018      	movs	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b002      	add	sp, #8
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	fffff7ff 	.word	0xfffff7ff

08005c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	1dbb      	adds	r3, r7, #6
 8005c9e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d000      	beq.n	8005caa <HAL_UART_Transmit+0x1a>
 8005ca8:	e096      	b.n	8005dd8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_UART_Transmit+0x28>
 8005cb0:	1dbb      	adds	r3, r7, #6
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e08e      	b.n	8005dda <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	2380      	movs	r3, #128	; 0x80
 8005cc2:	015b      	lsls	r3, r3, #5
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d109      	bne.n	8005cdc <HAL_UART_Transmit+0x4c>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d001      	beq.n	8005cdc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e07e      	b.n	8005dda <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2274      	movs	r2, #116	; 0x74
 8005ce0:	5c9b      	ldrb	r3, [r3, r2]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Transmit+0x5a>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e077      	b.n	8005dda <HAL_UART_Transmit+0x14a>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2274      	movs	r2, #116	; 0x74
 8005cee:	2101      	movs	r1, #1
 8005cf0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2221      	movs	r2, #33	; 0x21
 8005cfe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d00:	f7fe fc10 	bl	8004524 <HAL_GetTick>
 8005d04:	0003      	movs	r3, r0
 8005d06:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1dba      	adds	r2, r7, #6
 8005d0c:	2150      	movs	r1, #80	; 0x50
 8005d0e:	8812      	ldrh	r2, [r2, #0]
 8005d10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1dba      	adds	r2, r7, #6
 8005d16:	2152      	movs	r1, #82	; 0x52
 8005d18:	8812      	ldrh	r2, [r2, #0]
 8005d1a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	2380      	movs	r3, #128	; 0x80
 8005d22:	015b      	lsls	r3, r3, #5
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d108      	bne.n	8005d3a <HAL_UART_Transmit+0xaa>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	e003      	b.n	8005d42 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2274      	movs	r2, #116	; 0x74
 8005d46:	2100      	movs	r1, #0
 8005d48:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005d4a:	e02d      	b.n	8005da8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	0013      	movs	r3, r2
 8005d56:	2200      	movs	r2, #0
 8005d58:	2180      	movs	r1, #128	; 0x80
 8005d5a:	f000 fa7f 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8005d5e:	1e03      	subs	r3, r0, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e039      	b.n	8005dda <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	881a      	ldrh	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	05d2      	lsls	r2, r2, #23
 8005d76:	0dd2      	lsrs	r2, r2, #23
 8005d78:	b292      	uxth	r2, r2
 8005d7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	3302      	adds	r3, #2
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	e008      	b.n	8005d96 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	781a      	ldrb	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	b292      	uxth	r2, r2
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2252      	movs	r2, #82	; 0x52
 8005d9a:	5a9b      	ldrh	r3, [r3, r2]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b299      	uxth	r1, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2252      	movs	r2, #82	; 0x52
 8005da6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2252      	movs	r2, #82	; 0x52
 8005dac:	5a9b      	ldrh	r3, [r3, r2]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1cb      	bne.n	8005d4c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	0013      	movs	r3, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2140      	movs	r1, #64	; 0x40
 8005dc2:	f000 fa4b 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8005dc6:	1e03      	subs	r3, r0, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e005      	b.n	8005dda <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005dd8:	2302      	movs	r3, #2
  }
}
 8005dda:	0018      	movs	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b008      	add	sp, #32
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dec:	231e      	movs	r3, #30
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a8d      	ldr	r2, [pc, #564]	; (8006048 <UART_SetConfig+0x264>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	0019      	movs	r1, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	4a88      	ldr	r2, [pc, #544]	; (800604c <UART_SetConfig+0x268>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	0019      	movs	r1, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	4a7f      	ldr	r2, [pc, #508]	; (8006050 <UART_SetConfig+0x26c>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	0019      	movs	r1, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7b      	ldr	r2, [pc, #492]	; (8006054 <UART_SetConfig+0x270>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d127      	bne.n	8005eba <UART_SetConfig+0xd6>
 8005e6a:	4b7b      	ldr	r3, [pc, #492]	; (8006058 <UART_SetConfig+0x274>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	2203      	movs	r2, #3
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d00d      	beq.n	8005e92 <UART_SetConfig+0xae>
 8005e76:	d81b      	bhi.n	8005eb0 <UART_SetConfig+0xcc>
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d014      	beq.n	8005ea6 <UART_SetConfig+0xc2>
 8005e7c:	d818      	bhi.n	8005eb0 <UART_SetConfig+0xcc>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <UART_SetConfig+0xa4>
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d00a      	beq.n	8005e9c <UART_SetConfig+0xb8>
 8005e86:	e013      	b.n	8005eb0 <UART_SetConfig+0xcc>
 8005e88:	231f      	movs	r3, #31
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e021      	b.n	8005ed6 <UART_SetConfig+0xf2>
 8005e92:	231f      	movs	r3, #31
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	2202      	movs	r2, #2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	e01c      	b.n	8005ed6 <UART_SetConfig+0xf2>
 8005e9c:	231f      	movs	r3, #31
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e017      	b.n	8005ed6 <UART_SetConfig+0xf2>
 8005ea6:	231f      	movs	r3, #31
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	2208      	movs	r2, #8
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e012      	b.n	8005ed6 <UART_SetConfig+0xf2>
 8005eb0:	231f      	movs	r3, #31
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2210      	movs	r2, #16
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	e00d      	b.n	8005ed6 <UART_SetConfig+0xf2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a67      	ldr	r2, [pc, #412]	; (800605c <UART_SetConfig+0x278>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d104      	bne.n	8005ece <UART_SetConfig+0xea>
 8005ec4:	231f      	movs	r3, #31
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	e003      	b.n	8005ed6 <UART_SetConfig+0xf2>
 8005ece:	231f      	movs	r3, #31
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	2210      	movs	r2, #16
 8005ed4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69da      	ldr	r2, [r3, #28]
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d15d      	bne.n	8005f9e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005ee2:	231f      	movs	r3, #31
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d015      	beq.n	8005f18 <UART_SetConfig+0x134>
 8005eec:	dc18      	bgt.n	8005f20 <UART_SetConfig+0x13c>
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d00d      	beq.n	8005f0e <UART_SetConfig+0x12a>
 8005ef2:	dc15      	bgt.n	8005f20 <UART_SetConfig+0x13c>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <UART_SetConfig+0x11a>
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d005      	beq.n	8005f08 <UART_SetConfig+0x124>
 8005efc:	e010      	b.n	8005f20 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005efe:	f7ff f9f9 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 8005f02:	0003      	movs	r3, r0
 8005f04:	61bb      	str	r3, [r7, #24]
        break;
 8005f06:	e012      	b.n	8005f2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f08:	4b55      	ldr	r3, [pc, #340]	; (8006060 <UART_SetConfig+0x27c>)
 8005f0a:	61bb      	str	r3, [r7, #24]
        break;
 8005f0c:	e00f      	b.n	8005f2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0e:	f7ff f981 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 8005f12:	0003      	movs	r3, r0
 8005f14:	61bb      	str	r3, [r7, #24]
        break;
 8005f16:	e00a      	b.n	8005f2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	61bb      	str	r3, [r7, #24]
        break;
 8005f1e:	e006      	b.n	8005f2e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f24:	231e      	movs	r3, #30
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	2201      	movs	r2, #1
 8005f2a:	701a      	strb	r2, [r3, #0]
        break;
 8005f2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d100      	bne.n	8005f36 <UART_SetConfig+0x152>
 8005f34:	e07b      	b.n	800602e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	005a      	lsls	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	18d2      	adds	r2, r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	0019      	movs	r1, r3
 8005f48:	0010      	movs	r0, r2
 8005f4a:	f7fa f8e5 	bl	8000118 <__udivsi3>
 8005f4e:	0003      	movs	r3, r0
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b0f      	cmp	r3, #15
 8005f58:	d91c      	bls.n	8005f94 <UART_SetConfig+0x1b0>
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	025b      	lsls	r3, r3, #9
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d217      	bcs.n	8005f94 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	200e      	movs	r0, #14
 8005f6a:	183b      	adds	r3, r7, r0
 8005f6c:	210f      	movs	r1, #15
 8005f6e:	438a      	bics	r2, r1
 8005f70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	085b      	lsrs	r3, r3, #1
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2207      	movs	r2, #7
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	b299      	uxth	r1, r3
 8005f7e:	183b      	adds	r3, r7, r0
 8005f80:	183a      	adds	r2, r7, r0
 8005f82:	8812      	ldrh	r2, [r2, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	183a      	adds	r2, r7, r0
 8005f8e:	8812      	ldrh	r2, [r2, #0]
 8005f90:	60da      	str	r2, [r3, #12]
 8005f92:	e04c      	b.n	800602e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005f94:	231e      	movs	r3, #30
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e047      	b.n	800602e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f9e:	231f      	movs	r3, #31
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d015      	beq.n	8005fd4 <UART_SetConfig+0x1f0>
 8005fa8:	dc18      	bgt.n	8005fdc <UART_SetConfig+0x1f8>
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d00d      	beq.n	8005fca <UART_SetConfig+0x1e6>
 8005fae:	dc15      	bgt.n	8005fdc <UART_SetConfig+0x1f8>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <UART_SetConfig+0x1d6>
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d005      	beq.n	8005fc4 <UART_SetConfig+0x1e0>
 8005fb8:	e010      	b.n	8005fdc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fba:	f7ff f99b 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	61bb      	str	r3, [r7, #24]
        break;
 8005fc2:	e012      	b.n	8005fea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc4:	4b26      	ldr	r3, [pc, #152]	; (8006060 <UART_SetConfig+0x27c>)
 8005fc6:	61bb      	str	r3, [r7, #24]
        break;
 8005fc8:	e00f      	b.n	8005fea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fca:	f7ff f923 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	61bb      	str	r3, [r7, #24]
        break;
 8005fd2:	e00a      	b.n	8005fea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	61bb      	str	r3, [r7, #24]
        break;
 8005fda:	e006      	b.n	8005fea <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fe0:	231e      	movs	r3, #30
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	701a      	strb	r2, [r3, #0]
        break;
 8005fe8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01e      	beq.n	800602e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	085a      	lsrs	r2, r3, #1
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	18d2      	adds	r2, r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	0019      	movs	r1, r3
 8006000:	0010      	movs	r0, r2
 8006002:	f7fa f889 	bl	8000118 <__udivsi3>
 8006006:	0003      	movs	r3, r0
 8006008:	b29b      	uxth	r3, r3
 800600a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b0f      	cmp	r3, #15
 8006010:	d909      	bls.n	8006026 <UART_SetConfig+0x242>
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	2380      	movs	r3, #128	; 0x80
 8006016:	025b      	lsls	r3, r3, #9
 8006018:	429a      	cmp	r2, r3
 800601a:	d204      	bcs.n	8006026 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	60da      	str	r2, [r3, #12]
 8006024:	e003      	b.n	800602e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006026:	231e      	movs	r3, #30
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800603a:	231e      	movs	r3, #30
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	781b      	ldrb	r3, [r3, #0]
}
 8006040:	0018      	movs	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	b008      	add	sp, #32
 8006046:	bd80      	pop	{r7, pc}
 8006048:	efff69f3 	.word	0xefff69f3
 800604c:	ffffcfff 	.word	0xffffcfff
 8006050:	fffff4ff 	.word	0xfffff4ff
 8006054:	40013800 	.word	0x40013800
 8006058:	40021000 	.word	0x40021000
 800605c:	40004400 	.word	0x40004400
 8006060:	007a1200 	.word	0x007a1200

08006064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2201      	movs	r2, #1
 8006072:	4013      	ands	r3, r2
 8006074:	d00b      	beq.n	800608e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	4a4a      	ldr	r2, [pc, #296]	; (80061a8 <UART_AdvFeatureConfig+0x144>)
 800607e:	4013      	ands	r3, r2
 8006080:	0019      	movs	r1, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	2202      	movs	r2, #2
 8006094:	4013      	ands	r3, r2
 8006096:	d00b      	beq.n	80060b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4a43      	ldr	r2, [pc, #268]	; (80061ac <UART_AdvFeatureConfig+0x148>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	0019      	movs	r1, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	2204      	movs	r2, #4
 80060b6:	4013      	ands	r3, r2
 80060b8:	d00b      	beq.n	80060d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4a3b      	ldr	r2, [pc, #236]	; (80061b0 <UART_AdvFeatureConfig+0x14c>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	0019      	movs	r1, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	2208      	movs	r2, #8
 80060d8:	4013      	ands	r3, r2
 80060da:	d00b      	beq.n	80060f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4a34      	ldr	r2, [pc, #208]	; (80061b4 <UART_AdvFeatureConfig+0x150>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	0019      	movs	r1, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2210      	movs	r2, #16
 80060fa:	4013      	ands	r3, r2
 80060fc:	d00b      	beq.n	8006116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	4a2c      	ldr	r2, [pc, #176]	; (80061b8 <UART_AdvFeatureConfig+0x154>)
 8006106:	4013      	ands	r3, r2
 8006108:	0019      	movs	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	2220      	movs	r2, #32
 800611c:	4013      	ands	r3, r2
 800611e:	d00b      	beq.n	8006138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	4a25      	ldr	r2, [pc, #148]	; (80061bc <UART_AdvFeatureConfig+0x158>)
 8006128:	4013      	ands	r3, r2
 800612a:	0019      	movs	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	2240      	movs	r2, #64	; 0x40
 800613e:	4013      	ands	r3, r2
 8006140:	d01d      	beq.n	800617e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4a1d      	ldr	r2, [pc, #116]	; (80061c0 <UART_AdvFeatureConfig+0x15c>)
 800614a:	4013      	ands	r3, r2
 800614c:	0019      	movs	r1, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800615e:	2380      	movs	r3, #128	; 0x80
 8006160:	035b      	lsls	r3, r3, #13
 8006162:	429a      	cmp	r2, r3
 8006164:	d10b      	bne.n	800617e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <UART_AdvFeatureConfig+0x160>)
 800616e:	4013      	ands	r3, r2
 8006170:	0019      	movs	r1, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	2280      	movs	r2, #128	; 0x80
 8006184:	4013      	ands	r3, r2
 8006186:	d00b      	beq.n	80061a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	4a0e      	ldr	r2, [pc, #56]	; (80061c8 <UART_AdvFeatureConfig+0x164>)
 8006190:	4013      	ands	r3, r2
 8006192:	0019      	movs	r1, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	605a      	str	r2, [r3, #4]
  }
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b002      	add	sp, #8
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	fffdffff 	.word	0xfffdffff
 80061ac:	fffeffff 	.word	0xfffeffff
 80061b0:	fffbffff 	.word	0xfffbffff
 80061b4:	ffff7fff 	.word	0xffff7fff
 80061b8:	ffffefff 	.word	0xffffefff
 80061bc:	ffffdfff 	.word	0xffffdfff
 80061c0:	ffefffff 	.word	0xffefffff
 80061c4:	ff9fffff 	.word	0xff9fffff
 80061c8:	fff7ffff 	.word	0xfff7ffff

080061cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2280      	movs	r2, #128	; 0x80
 80061d8:	2100      	movs	r1, #0
 80061da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061dc:	f7fe f9a2 	bl	8004524 <HAL_GetTick>
 80061e0:	0003      	movs	r3, r0
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2208      	movs	r2, #8
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d10c      	bne.n	800620c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	0391      	lsls	r1, r2, #14
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4a17      	ldr	r2, [pc, #92]	; (8006258 <UART_CheckIdleState+0x8c>)
 80061fc:	9200      	str	r2, [sp, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	f000 f82c 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8006204:	1e03      	subs	r3, r0, #0
 8006206:	d001      	beq.n	800620c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e021      	b.n	8006250 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2204      	movs	r2, #4
 8006214:	4013      	ands	r3, r2
 8006216:	2b04      	cmp	r3, #4
 8006218:	d10c      	bne.n	8006234 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2280      	movs	r2, #128	; 0x80
 800621e:	03d1      	lsls	r1, r2, #15
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4a0d      	ldr	r2, [pc, #52]	; (8006258 <UART_CheckIdleState+0x8c>)
 8006224:	9200      	str	r2, [sp, #0]
 8006226:	2200      	movs	r2, #0
 8006228:	f000 f818 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 800622c:	1e03      	subs	r3, r0, #0
 800622e:	d001      	beq.n	8006234 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e00d      	b.n	8006250 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2274      	movs	r2, #116	; 0x74
 800624a:	2100      	movs	r1, #0
 800624c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b004      	add	sp, #16
 8006256:	bd80      	pop	{r7, pc}
 8006258:	01ffffff 	.word	0x01ffffff

0800625c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b094      	sub	sp, #80	; 0x50
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	1dfb      	adds	r3, r7, #7
 800626a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626c:	e0a3      	b.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006270:	3301      	adds	r3, #1
 8006272:	d100      	bne.n	8006276 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006274:	e09f      	b.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fe f955 	bl	8004524 <HAL_GetTick>
 800627a:	0002      	movs	r2, r0
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <UART_WaitOnFlagUntilTimeout+0x30>
 8006286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006288:	2b00      	cmp	r3, #0
 800628a:	d13d      	bne.n	8006308 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628c:	f3ef 8310 	mrs	r3, PRIMASK
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006294:	647b      	str	r3, [r7, #68]	; 0x44
 8006296:	2301      	movs	r3, #1
 8006298:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	f383 8810 	msr	PRIMASK, r3
}
 80062a0:	46c0      	nop			; (mov r8, r8)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	494c      	ldr	r1, [pc, #304]	; (80063e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80062ae:	400a      	ands	r2, r1
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	f383 8810 	msr	PRIMASK, r3
}
 80062bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062be:	f3ef 8310 	mrs	r3, PRIMASK
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80062c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40
 80062c8:	2301      	movs	r3, #1
 80062ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	f383 8810 	msr	PRIMASK, r3
}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2101      	movs	r1, #1
 80062e0:	438a      	bics	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ea:	f383 8810 	msr	PRIMASK, r3
}
 80062ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2274      	movs	r2, #116	; 0x74
 8006300:	2100      	movs	r1, #0
 8006302:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e067      	b.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2204      	movs	r2, #4
 8006310:	4013      	ands	r3, r2
 8006312:	d050      	beq.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69da      	ldr	r2, [r3, #28]
 800631a:	2380      	movs	r3, #128	; 0x80
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	401a      	ands	r2, r3
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	429a      	cmp	r2, r3
 8006326:	d146      	bne.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2280      	movs	r2, #128	; 0x80
 800632e:	0112      	lsls	r2, r2, #4
 8006330:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006332:	f3ef 8310 	mrs	r3, PRIMASK
 8006336:	613b      	str	r3, [r7, #16]
  return(result);
 8006338:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800633a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800633c:	2301      	movs	r3, #1
 800633e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f383 8810 	msr	PRIMASK, r3
}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4923      	ldr	r1, [pc, #140]	; (80063e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006354:	400a      	ands	r2, r1
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f383 8810 	msr	PRIMASK, r3
}
 8006362:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006364:	f3ef 8310 	mrs	r3, PRIMASK
 8006368:	61fb      	str	r3, [r7, #28]
  return(result);
 800636a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	64bb      	str	r3, [r7, #72]	; 0x48
 800636e:	2301      	movs	r3, #1
 8006370:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	f383 8810 	msr	PRIMASK, r3
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2101      	movs	r1, #1
 8006386:	438a      	bics	r2, r1
 8006388:	609a      	str	r2, [r3, #8]
 800638a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	f383 8810 	msr	PRIMASK, r3
}
 8006394:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2280      	movs	r2, #128	; 0x80
 80063a6:	2120      	movs	r1, #32
 80063a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2274      	movs	r2, #116	; 0x74
 80063ae:	2100      	movs	r1, #0
 80063b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e010      	b.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	4013      	ands	r3, r2
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	425a      	negs	r2, r3
 80063c6:	4153      	adcs	r3, r2
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	001a      	movs	r2, r3
 80063cc:	1dfb      	adds	r3, r7, #7
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d100      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80063d4:	e74b      	b.n	800626e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b014      	add	sp, #80	; 0x50
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	fffffe5f 	.word	0xfffffe5f

080063e4 <__errno>:
 80063e4:	4b01      	ldr	r3, [pc, #4]	; (80063ec <__errno+0x8>)
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	4770      	bx	lr
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	2000000c 	.word	0x2000000c

080063f0 <__libc_init_array>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	2600      	movs	r6, #0
 80063f4:	4d0c      	ldr	r5, [pc, #48]	; (8006428 <__libc_init_array+0x38>)
 80063f6:	4c0d      	ldr	r4, [pc, #52]	; (800642c <__libc_init_array+0x3c>)
 80063f8:	1b64      	subs	r4, r4, r5
 80063fa:	10a4      	asrs	r4, r4, #2
 80063fc:	42a6      	cmp	r6, r4
 80063fe:	d109      	bne.n	8006414 <__libc_init_array+0x24>
 8006400:	2600      	movs	r6, #0
 8006402:	f001 faa3 	bl	800794c <_init>
 8006406:	4d0a      	ldr	r5, [pc, #40]	; (8006430 <__libc_init_array+0x40>)
 8006408:	4c0a      	ldr	r4, [pc, #40]	; (8006434 <__libc_init_array+0x44>)
 800640a:	1b64      	subs	r4, r4, r5
 800640c:	10a4      	asrs	r4, r4, #2
 800640e:	42a6      	cmp	r6, r4
 8006410:	d105      	bne.n	800641e <__libc_init_array+0x2e>
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	00b3      	lsls	r3, r6, #2
 8006416:	58eb      	ldr	r3, [r5, r3]
 8006418:	4798      	blx	r3
 800641a:	3601      	adds	r6, #1
 800641c:	e7ee      	b.n	80063fc <__libc_init_array+0xc>
 800641e:	00b3      	lsls	r3, r6, #2
 8006420:	58eb      	ldr	r3, [r5, r3]
 8006422:	4798      	blx	r3
 8006424:	3601      	adds	r6, #1
 8006426:	e7f2      	b.n	800640e <__libc_init_array+0x1e>
 8006428:	08007e00 	.word	0x08007e00
 800642c:	08007e00 	.word	0x08007e00
 8006430:	08007e00 	.word	0x08007e00
 8006434:	08007e04 	.word	0x08007e04

08006438 <memset>:
 8006438:	0003      	movs	r3, r0
 800643a:	1882      	adds	r2, r0, r2
 800643c:	4293      	cmp	r3, r2
 800643e:	d100      	bne.n	8006442 <memset+0xa>
 8006440:	4770      	bx	lr
 8006442:	7019      	strb	r1, [r3, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	e7f9      	b.n	800643c <memset+0x4>

08006448 <strcat>:
 8006448:	0002      	movs	r2, r0
 800644a:	b510      	push	{r4, lr}
 800644c:	7813      	ldrb	r3, [r2, #0]
 800644e:	0014      	movs	r4, r2
 8006450:	3201      	adds	r2, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1fa      	bne.n	800644c <strcat+0x4>
 8006456:	5cca      	ldrb	r2, [r1, r3]
 8006458:	54e2      	strb	r2, [r4, r3]
 800645a:	3301      	adds	r3, #1
 800645c:	2a00      	cmp	r2, #0
 800645e:	d1fa      	bne.n	8006456 <strcat+0xe>
 8006460:	bd10      	pop	{r4, pc}

08006462 <strcpy>:
 8006462:	0003      	movs	r3, r0
 8006464:	780a      	ldrb	r2, [r1, #0]
 8006466:	3101      	adds	r1, #1
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	2a00      	cmp	r2, #0
 800646e:	d1f9      	bne.n	8006464 <strcpy+0x2>
 8006470:	4770      	bx	lr
	...

08006474 <exp>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	0004      	movs	r4, r0
 8006478:	000d      	movs	r5, r1
 800647a:	f000 f8d7 	bl	800662c <__ieee754_exp>
 800647e:	0006      	movs	r6, r0
 8006480:	000f      	movs	r7, r1
 8006482:	0020      	movs	r0, r4
 8006484:	0029      	movs	r1, r5
 8006486:	f001 f9df 	bl	8007848 <finite>
 800648a:	2800      	cmp	r0, #0
 800648c:	d00d      	beq.n	80064aa <exp+0x36>
 800648e:	0020      	movs	r0, r4
 8006490:	0029      	movs	r1, r5
 8006492:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <exp+0x5c>)
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <exp+0x60>)
 8006496:	f7f9 ffdf 	bl	8000458 <__aeabi_dcmpgt>
 800649a:	2800      	cmp	r0, #0
 800649c:	d008      	beq.n	80064b0 <exp+0x3c>
 800649e:	f7ff ffa1 	bl	80063e4 <__errno>
 80064a2:	2322      	movs	r3, #34	; 0x22
 80064a4:	2600      	movs	r6, #0
 80064a6:	4f0c      	ldr	r7, [pc, #48]	; (80064d8 <exp+0x64>)
 80064a8:	6003      	str	r3, [r0, #0]
 80064aa:	0030      	movs	r0, r6
 80064ac:	0039      	movs	r1, r7
 80064ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b0:	0020      	movs	r0, r4
 80064b2:	0029      	movs	r1, r5
 80064b4:	4a09      	ldr	r2, [pc, #36]	; (80064dc <exp+0x68>)
 80064b6:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <exp+0x6c>)
 80064b8:	f7f9 ffba 	bl	8000430 <__aeabi_dcmplt>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d0f4      	beq.n	80064aa <exp+0x36>
 80064c0:	f7ff ff90 	bl	80063e4 <__errno>
 80064c4:	2322      	movs	r3, #34	; 0x22
 80064c6:	2600      	movs	r6, #0
 80064c8:	2700      	movs	r7, #0
 80064ca:	6003      	str	r3, [r0, #0]
 80064cc:	e7ed      	b.n	80064aa <exp+0x36>
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	fefa39ef 	.word	0xfefa39ef
 80064d4:	40862e42 	.word	0x40862e42
 80064d8:	7ff00000 	.word	0x7ff00000
 80064dc:	d52d3051 	.word	0xd52d3051
 80064e0:	c0874910 	.word	0xc0874910

080064e4 <log>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	0004      	movs	r4, r0
 80064e8:	000d      	movs	r5, r1
 80064ea:	f000 fa09 	bl	8006900 <__ieee754_log>
 80064ee:	0022      	movs	r2, r4
 80064f0:	0006      	movs	r6, r0
 80064f2:	000f      	movs	r7, r1
 80064f4:	002b      	movs	r3, r5
 80064f6:	0020      	movs	r0, r4
 80064f8:	0029      	movs	r1, r5
 80064fa:	f7fb fcfd 	bl	8001ef8 <__aeabi_dcmpun>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d115      	bne.n	800652e <log+0x4a>
 8006502:	2200      	movs	r2, #0
 8006504:	2300      	movs	r3, #0
 8006506:	0020      	movs	r0, r4
 8006508:	0029      	movs	r1, r5
 800650a:	f7f9 ffa5 	bl	8000458 <__aeabi_dcmpgt>
 800650e:	2800      	cmp	r0, #0
 8006510:	d10d      	bne.n	800652e <log+0x4a>
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	0020      	movs	r0, r4
 8006518:	0029      	movs	r1, r5
 800651a:	f7f9 ff83 	bl	8000424 <__aeabi_dcmpeq>
 800651e:	2800      	cmp	r0, #0
 8006520:	d008      	beq.n	8006534 <log+0x50>
 8006522:	f7ff ff5f 	bl	80063e4 <__errno>
 8006526:	2322      	movs	r3, #34	; 0x22
 8006528:	2600      	movs	r6, #0
 800652a:	4f07      	ldr	r7, [pc, #28]	; (8006548 <log+0x64>)
 800652c:	6003      	str	r3, [r0, #0]
 800652e:	0030      	movs	r0, r6
 8006530:	0039      	movs	r1, r7
 8006532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006534:	f7ff ff56 	bl	80063e4 <__errno>
 8006538:	2321      	movs	r3, #33	; 0x21
 800653a:	6003      	str	r3, [r0, #0]
 800653c:	4803      	ldr	r0, [pc, #12]	; (800654c <log+0x68>)
 800653e:	f001 f98b 	bl	8007858 <nan>
 8006542:	0006      	movs	r6, r0
 8006544:	000f      	movs	r7, r1
 8006546:	e7f2      	b.n	800652e <log+0x4a>
 8006548:	fff00000 	.word	0xfff00000
 800654c:	08007d9c 	.word	0x08007d9c

08006550 <pow>:
 8006550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006552:	0014      	movs	r4, r2
 8006554:	001d      	movs	r5, r3
 8006556:	9000      	str	r0, [sp, #0]
 8006558:	9101      	str	r1, [sp, #4]
 800655a:	f000 fb81 	bl	8006c60 <__ieee754_pow>
 800655e:	0022      	movs	r2, r4
 8006560:	0006      	movs	r6, r0
 8006562:	000f      	movs	r7, r1
 8006564:	002b      	movs	r3, r5
 8006566:	0020      	movs	r0, r4
 8006568:	0029      	movs	r1, r5
 800656a:	f7fb fcc5 	bl	8001ef8 <__aeabi_dcmpun>
 800656e:	2800      	cmp	r0, #0
 8006570:	d13f      	bne.n	80065f2 <pow+0xa2>
 8006572:	9800      	ldr	r0, [sp, #0]
 8006574:	9901      	ldr	r1, [sp, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	f7f9 ff53 	bl	8000424 <__aeabi_dcmpeq>
 800657e:	2800      	cmp	r0, #0
 8006580:	d019      	beq.n	80065b6 <pow+0x66>
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	0020      	movs	r0, r4
 8006588:	0029      	movs	r1, r5
 800658a:	f7f9 ff4b 	bl	8000424 <__aeabi_dcmpeq>
 800658e:	2800      	cmp	r0, #0
 8006590:	d146      	bne.n	8006620 <pow+0xd0>
 8006592:	0020      	movs	r0, r4
 8006594:	0029      	movs	r1, r5
 8006596:	f001 f957 	bl	8007848 <finite>
 800659a:	2800      	cmp	r0, #0
 800659c:	d029      	beq.n	80065f2 <pow+0xa2>
 800659e:	2200      	movs	r2, #0
 80065a0:	2300      	movs	r3, #0
 80065a2:	0020      	movs	r0, r4
 80065a4:	0029      	movs	r1, r5
 80065a6:	f7f9 ff43 	bl	8000430 <__aeabi_dcmplt>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d021      	beq.n	80065f2 <pow+0xa2>
 80065ae:	f7ff ff19 	bl	80063e4 <__errno>
 80065b2:	2322      	movs	r3, #34	; 0x22
 80065b4:	e01c      	b.n	80065f0 <pow+0xa0>
 80065b6:	0030      	movs	r0, r6
 80065b8:	0039      	movs	r1, r7
 80065ba:	f001 f945 	bl	8007848 <finite>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d11b      	bne.n	80065fa <pow+0xaa>
 80065c2:	9800      	ldr	r0, [sp, #0]
 80065c4:	9901      	ldr	r1, [sp, #4]
 80065c6:	f001 f93f 	bl	8007848 <finite>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d015      	beq.n	80065fa <pow+0xaa>
 80065ce:	0020      	movs	r0, r4
 80065d0:	0029      	movs	r1, r5
 80065d2:	f001 f939 	bl	8007848 <finite>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d00f      	beq.n	80065fa <pow+0xaa>
 80065da:	0032      	movs	r2, r6
 80065dc:	003b      	movs	r3, r7
 80065de:	0030      	movs	r0, r6
 80065e0:	0039      	movs	r1, r7
 80065e2:	f7fb fc89 	bl	8001ef8 <__aeabi_dcmpun>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d0e1      	beq.n	80065ae <pow+0x5e>
 80065ea:	f7ff fefb 	bl	80063e4 <__errno>
 80065ee:	2321      	movs	r3, #33	; 0x21
 80065f0:	6003      	str	r3, [r0, #0]
 80065f2:	0030      	movs	r0, r6
 80065f4:	0039      	movs	r1, r7
 80065f6:	b003      	add	sp, #12
 80065f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065fa:	2200      	movs	r2, #0
 80065fc:	2300      	movs	r3, #0
 80065fe:	0030      	movs	r0, r6
 8006600:	0039      	movs	r1, r7
 8006602:	f7f9 ff0f 	bl	8000424 <__aeabi_dcmpeq>
 8006606:	2800      	cmp	r0, #0
 8006608:	d0f3      	beq.n	80065f2 <pow+0xa2>
 800660a:	9800      	ldr	r0, [sp, #0]
 800660c:	9901      	ldr	r1, [sp, #4]
 800660e:	f001 f91b 	bl	8007848 <finite>
 8006612:	2800      	cmp	r0, #0
 8006614:	d0ed      	beq.n	80065f2 <pow+0xa2>
 8006616:	0020      	movs	r0, r4
 8006618:	0029      	movs	r1, r5
 800661a:	f001 f915 	bl	8007848 <finite>
 800661e:	e7c4      	b.n	80065aa <pow+0x5a>
 8006620:	2600      	movs	r6, #0
 8006622:	4f01      	ldr	r7, [pc, #4]	; (8006628 <pow+0xd8>)
 8006624:	e7e5      	b.n	80065f2 <pow+0xa2>
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	3ff00000 	.word	0x3ff00000

0800662c <__ieee754_exp>:
 800662c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800662e:	004b      	lsls	r3, r1, #1
 8006630:	000c      	movs	r4, r1
 8006632:	0fce      	lsrs	r6, r1, #31
 8006634:	4992      	ldr	r1, [pc, #584]	; (8006880 <__ieee754_exp+0x254>)
 8006636:	0005      	movs	r5, r0
 8006638:	b089      	sub	sp, #36	; 0x24
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	428b      	cmp	r3, r1
 800663e:	d92f      	bls.n	80066a0 <__ieee754_exp+0x74>
 8006640:	4990      	ldr	r1, [pc, #576]	; (8006884 <__ieee754_exp+0x258>)
 8006642:	428b      	cmp	r3, r1
 8006644:	d912      	bls.n	800666c <__ieee754_exp+0x40>
 8006646:	0323      	lsls	r3, r4, #12
 8006648:	0b1b      	lsrs	r3, r3, #12
 800664a:	4303      	orrs	r3, r0
 800664c:	d006      	beq.n	800665c <__ieee754_exp+0x30>
 800664e:	0002      	movs	r2, r0
 8006650:	0023      	movs	r3, r4
 8006652:	0028      	movs	r0, r5
 8006654:	0021      	movs	r1, r4
 8006656:	f7f9 ff13 	bl	8000480 <__aeabi_dadd>
 800665a:	e011      	b.n	8006680 <__ieee754_exp+0x54>
 800665c:	2e00      	cmp	r6, #0
 800665e:	d001      	beq.n	8006664 <__ieee754_exp+0x38>
 8006660:	2500      	movs	r5, #0
 8006662:	002c      	movs	r4, r5
 8006664:	0028      	movs	r0, r5
 8006666:	0021      	movs	r1, r4
 8006668:	b009      	add	sp, #36	; 0x24
 800666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666c:	0021      	movs	r1, r4
 800666e:	4a86      	ldr	r2, [pc, #536]	; (8006888 <__ieee754_exp+0x25c>)
 8006670:	4b86      	ldr	r3, [pc, #536]	; (800688c <__ieee754_exp+0x260>)
 8006672:	f7f9 fef1 	bl	8000458 <__aeabi_dcmpgt>
 8006676:	1e07      	subs	r7, r0, #0
 8006678:	d005      	beq.n	8006686 <__ieee754_exp+0x5a>
 800667a:	2000      	movs	r0, #0
 800667c:	f001 f8da 	bl	8007834 <__math_oflow>
 8006680:	0005      	movs	r5, r0
 8006682:	000c      	movs	r4, r1
 8006684:	e7ee      	b.n	8006664 <__ieee754_exp+0x38>
 8006686:	0028      	movs	r0, r5
 8006688:	0021      	movs	r1, r4
 800668a:	4a81      	ldr	r2, [pc, #516]	; (8006890 <__ieee754_exp+0x264>)
 800668c:	4b81      	ldr	r3, [pc, #516]	; (8006894 <__ieee754_exp+0x268>)
 800668e:	f7f9 fecf 	bl	8000430 <__aeabi_dcmplt>
 8006692:	2800      	cmp	r0, #0
 8006694:	d100      	bne.n	8006698 <__ieee754_exp+0x6c>
 8006696:	e07d      	b.n	8006794 <__ieee754_exp+0x168>
 8006698:	0038      	movs	r0, r7
 800669a:	f001 f8c4 	bl	8007826 <__math_uflow>
 800669e:	e7ef      	b.n	8006680 <__ieee754_exp+0x54>
 80066a0:	4a7d      	ldr	r2, [pc, #500]	; (8006898 <__ieee754_exp+0x26c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d800      	bhi.n	80066a8 <__ieee754_exp+0x7c>
 80066a6:	e09e      	b.n	80067e6 <__ieee754_exp+0x1ba>
 80066a8:	4a7c      	ldr	r2, [pc, #496]	; (800689c <__ieee754_exp+0x270>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d872      	bhi.n	8006794 <__ieee754_exp+0x168>
 80066ae:	4b7c      	ldr	r3, [pc, #496]	; (80068a0 <__ieee754_exp+0x274>)
 80066b0:	00f7      	lsls	r7, r6, #3
 80066b2:	19db      	adds	r3, r3, r7
 80066b4:	0021      	movs	r1, r4
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f7fb f88b 	bl	80017d4 <__aeabi_dsub>
 80066be:	9002      	str	r0, [sp, #8]
 80066c0:	9103      	str	r1, [sp, #12]
 80066c2:	2001      	movs	r0, #1
 80066c4:	4b77      	ldr	r3, [pc, #476]	; (80068a4 <__ieee754_exp+0x278>)
 80066c6:	1b80      	subs	r0, r0, r6
 80066c8:	19df      	adds	r7, r3, r7
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	687c      	ldr	r4, [r7, #4]
 80066ce:	9304      	str	r3, [sp, #16]
 80066d0:	9405      	str	r4, [sp, #20]
 80066d2:	1b83      	subs	r3, r0, r6
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	9a04      	ldr	r2, [sp, #16]
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	9802      	ldr	r0, [sp, #8]
 80066dc:	9903      	ldr	r1, [sp, #12]
 80066de:	f7fb f879 	bl	80017d4 <__aeabi_dsub>
 80066e2:	0005      	movs	r5, r0
 80066e4:	000c      	movs	r4, r1
 80066e6:	002a      	movs	r2, r5
 80066e8:	0023      	movs	r3, r4
 80066ea:	0028      	movs	r0, r5
 80066ec:	0021      	movs	r1, r4
 80066ee:	f7fa fe05 	bl	80012fc <__aeabi_dmul>
 80066f2:	0006      	movs	r6, r0
 80066f4:	000f      	movs	r7, r1
 80066f6:	4a6c      	ldr	r2, [pc, #432]	; (80068a8 <__ieee754_exp+0x27c>)
 80066f8:	4b6c      	ldr	r3, [pc, #432]	; (80068ac <__ieee754_exp+0x280>)
 80066fa:	f7fa fdff 	bl	80012fc <__aeabi_dmul>
 80066fe:	4a6c      	ldr	r2, [pc, #432]	; (80068b0 <__ieee754_exp+0x284>)
 8006700:	4b6c      	ldr	r3, [pc, #432]	; (80068b4 <__ieee754_exp+0x288>)
 8006702:	f7fb f867 	bl	80017d4 <__aeabi_dsub>
 8006706:	0032      	movs	r2, r6
 8006708:	003b      	movs	r3, r7
 800670a:	f7fa fdf7 	bl	80012fc <__aeabi_dmul>
 800670e:	4a6a      	ldr	r2, [pc, #424]	; (80068b8 <__ieee754_exp+0x28c>)
 8006710:	4b6a      	ldr	r3, [pc, #424]	; (80068bc <__ieee754_exp+0x290>)
 8006712:	f7f9 feb5 	bl	8000480 <__aeabi_dadd>
 8006716:	0032      	movs	r2, r6
 8006718:	003b      	movs	r3, r7
 800671a:	f7fa fdef 	bl	80012fc <__aeabi_dmul>
 800671e:	4a68      	ldr	r2, [pc, #416]	; (80068c0 <__ieee754_exp+0x294>)
 8006720:	4b68      	ldr	r3, [pc, #416]	; (80068c4 <__ieee754_exp+0x298>)
 8006722:	f7fb f857 	bl	80017d4 <__aeabi_dsub>
 8006726:	0032      	movs	r2, r6
 8006728:	003b      	movs	r3, r7
 800672a:	f7fa fde7 	bl	80012fc <__aeabi_dmul>
 800672e:	4a66      	ldr	r2, [pc, #408]	; (80068c8 <__ieee754_exp+0x29c>)
 8006730:	4b66      	ldr	r3, [pc, #408]	; (80068cc <__ieee754_exp+0x2a0>)
 8006732:	f7f9 fea5 	bl	8000480 <__aeabi_dadd>
 8006736:	0032      	movs	r2, r6
 8006738:	003b      	movs	r3, r7
 800673a:	f7fa fddf 	bl	80012fc <__aeabi_dmul>
 800673e:	0002      	movs	r2, r0
 8006740:	000b      	movs	r3, r1
 8006742:	0028      	movs	r0, r5
 8006744:	0021      	movs	r1, r4
 8006746:	f7fb f845 	bl	80017d4 <__aeabi_dsub>
 800674a:	000b      	movs	r3, r1
 800674c:	0002      	movs	r2, r0
 800674e:	0006      	movs	r6, r0
 8006750:	000f      	movs	r7, r1
 8006752:	0028      	movs	r0, r5
 8006754:	0021      	movs	r1, r4
 8006756:	f7fa fdd1 	bl	80012fc <__aeabi_dmul>
 800675a:	9b01      	ldr	r3, [sp, #4]
 800675c:	9006      	str	r0, [sp, #24]
 800675e:	9107      	str	r1, [sp, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d156      	bne.n	8006812 <__ieee754_exp+0x1e6>
 8006764:	2380      	movs	r3, #128	; 0x80
 8006766:	2200      	movs	r2, #0
 8006768:	0030      	movs	r0, r6
 800676a:	0039      	movs	r1, r7
 800676c:	05db      	lsls	r3, r3, #23
 800676e:	f7fb f831 	bl	80017d4 <__aeabi_dsub>
 8006772:	0002      	movs	r2, r0
 8006774:	000b      	movs	r3, r1
 8006776:	9806      	ldr	r0, [sp, #24]
 8006778:	9907      	ldr	r1, [sp, #28]
 800677a:	f7fa f9bd 	bl	8000af8 <__aeabi_ddiv>
 800677e:	002a      	movs	r2, r5
 8006780:	0023      	movs	r3, r4
 8006782:	f7fb f827 	bl	80017d4 <__aeabi_dsub>
 8006786:	0002      	movs	r2, r0
 8006788:	000b      	movs	r3, r1
 800678a:	2000      	movs	r0, #0
 800678c:	4950      	ldr	r1, [pc, #320]	; (80068d0 <__ieee754_exp+0x2a4>)
 800678e:	f7fb f821 	bl	80017d4 <__aeabi_dsub>
 8006792:	e775      	b.n	8006680 <__ieee754_exp+0x54>
 8006794:	484f      	ldr	r0, [pc, #316]	; (80068d4 <__ieee754_exp+0x2a8>)
 8006796:	00f6      	lsls	r6, r6, #3
 8006798:	1986      	adds	r6, r0, r6
 800679a:	4a4f      	ldr	r2, [pc, #316]	; (80068d8 <__ieee754_exp+0x2ac>)
 800679c:	4b4f      	ldr	r3, [pc, #316]	; (80068dc <__ieee754_exp+0x2b0>)
 800679e:	0028      	movs	r0, r5
 80067a0:	0021      	movs	r1, r4
 80067a2:	f7fa fdab 	bl	80012fc <__aeabi_dmul>
 80067a6:	6832      	ldr	r2, [r6, #0]
 80067a8:	6873      	ldr	r3, [r6, #4]
 80067aa:	f7f9 fe69 	bl	8000480 <__aeabi_dadd>
 80067ae:	f7fb fbc1 	bl	8001f34 <__aeabi_d2iz>
 80067b2:	9001      	str	r0, [sp, #4]
 80067b4:	f7fb fbf4 	bl	8001fa0 <__aeabi_i2d>
 80067b8:	4a49      	ldr	r2, [pc, #292]	; (80068e0 <__ieee754_exp+0x2b4>)
 80067ba:	4b4a      	ldr	r3, [pc, #296]	; (80068e4 <__ieee754_exp+0x2b8>)
 80067bc:	0006      	movs	r6, r0
 80067be:	000f      	movs	r7, r1
 80067c0:	f7fa fd9c 	bl	80012fc <__aeabi_dmul>
 80067c4:	0002      	movs	r2, r0
 80067c6:	000b      	movs	r3, r1
 80067c8:	0028      	movs	r0, r5
 80067ca:	0021      	movs	r1, r4
 80067cc:	f7fb f802 	bl	80017d4 <__aeabi_dsub>
 80067d0:	4a45      	ldr	r2, [pc, #276]	; (80068e8 <__ieee754_exp+0x2bc>)
 80067d2:	9002      	str	r0, [sp, #8]
 80067d4:	9103      	str	r1, [sp, #12]
 80067d6:	4b45      	ldr	r3, [pc, #276]	; (80068ec <__ieee754_exp+0x2c0>)
 80067d8:	0030      	movs	r0, r6
 80067da:	0039      	movs	r1, r7
 80067dc:	f7fa fd8e 	bl	80012fc <__aeabi_dmul>
 80067e0:	9004      	str	r0, [sp, #16]
 80067e2:	9105      	str	r1, [sp, #20]
 80067e4:	e777      	b.n	80066d6 <__ieee754_exp+0xaa>
 80067e6:	4a42      	ldr	r2, [pc, #264]	; (80068f0 <__ieee754_exp+0x2c4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d80d      	bhi.n	8006808 <__ieee754_exp+0x1dc>
 80067ec:	4a41      	ldr	r2, [pc, #260]	; (80068f4 <__ieee754_exp+0x2c8>)
 80067ee:	4b42      	ldr	r3, [pc, #264]	; (80068f8 <__ieee754_exp+0x2cc>)
 80067f0:	0021      	movs	r1, r4
 80067f2:	f7f9 fe45 	bl	8000480 <__aeabi_dadd>
 80067f6:	2200      	movs	r2, #0
 80067f8:	4b35      	ldr	r3, [pc, #212]	; (80068d0 <__ieee754_exp+0x2a4>)
 80067fa:	f7f9 fe2d 	bl	8000458 <__aeabi_dcmpgt>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d005      	beq.n	800680e <__ieee754_exp+0x1e2>
 8006802:	2200      	movs	r2, #0
 8006804:	4b32      	ldr	r3, [pc, #200]	; (80068d0 <__ieee754_exp+0x2a4>)
 8006806:	e724      	b.n	8006652 <__ieee754_exp+0x26>
 8006808:	2300      	movs	r3, #0
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	e76b      	b.n	80066e6 <__ieee754_exp+0xba>
 800680e:	9001      	str	r0, [sp, #4]
 8006810:	e769      	b.n	80066e6 <__ieee754_exp+0xba>
 8006812:	2180      	movs	r1, #128	; 0x80
 8006814:	0032      	movs	r2, r6
 8006816:	003b      	movs	r3, r7
 8006818:	2000      	movs	r0, #0
 800681a:	05c9      	lsls	r1, r1, #23
 800681c:	f7fa ffda 	bl	80017d4 <__aeabi_dsub>
 8006820:	0002      	movs	r2, r0
 8006822:	000b      	movs	r3, r1
 8006824:	9806      	ldr	r0, [sp, #24]
 8006826:	9907      	ldr	r1, [sp, #28]
 8006828:	f7fa f966 	bl	8000af8 <__aeabi_ddiv>
 800682c:	0002      	movs	r2, r0
 800682e:	000b      	movs	r3, r1
 8006830:	9804      	ldr	r0, [sp, #16]
 8006832:	9905      	ldr	r1, [sp, #20]
 8006834:	f7fa ffce 	bl	80017d4 <__aeabi_dsub>
 8006838:	9a02      	ldr	r2, [sp, #8]
 800683a:	9b03      	ldr	r3, [sp, #12]
 800683c:	f7fa ffca 	bl	80017d4 <__aeabi_dsub>
 8006840:	0002      	movs	r2, r0
 8006842:	000b      	movs	r3, r1
 8006844:	2000      	movs	r0, #0
 8006846:	4922      	ldr	r1, [pc, #136]	; (80068d0 <__ieee754_exp+0x2a4>)
 8006848:	f7fa ffc4 	bl	80017d4 <__aeabi_dsub>
 800684c:	4b2b      	ldr	r3, [pc, #172]	; (80068fc <__ieee754_exp+0x2d0>)
 800684e:	9a01      	ldr	r2, [sp, #4]
 8006850:	0004      	movs	r4, r0
 8006852:	000d      	movs	r5, r1
 8006854:	429a      	cmp	r2, r3
 8006856:	db05      	blt.n	8006864 <__ieee754_exp+0x238>
 8006858:	9901      	ldr	r1, [sp, #4]
 800685a:	0508      	lsls	r0, r1, #20
 800685c:	1943      	adds	r3, r0, r5
 800685e:	0025      	movs	r5, r4
 8006860:	001c      	movs	r4, r3
 8006862:	e6ff      	b.n	8006664 <__ieee754_exp+0x38>
 8006864:	22fa      	movs	r2, #250	; 0xfa
 8006866:	0092      	lsls	r2, r2, #2
 8006868:	4694      	mov	ip, r2
 800686a:	9b01      	ldr	r3, [sp, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	4463      	add	r3, ip
 8006870:	051b      	lsls	r3, r3, #20
 8006872:	1859      	adds	r1, r3, r1
 8006874:	23b8      	movs	r3, #184	; 0xb8
 8006876:	045b      	lsls	r3, r3, #17
 8006878:	f7fa fd40 	bl	80012fc <__aeabi_dmul>
 800687c:	e700      	b.n	8006680 <__ieee754_exp+0x54>
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	40862e41 	.word	0x40862e41
 8006884:	7fefffff 	.word	0x7fefffff
 8006888:	fefa39ef 	.word	0xfefa39ef
 800688c:	40862e42 	.word	0x40862e42
 8006890:	d52d3051 	.word	0xd52d3051
 8006894:	c0874910 	.word	0xc0874910
 8006898:	3fd62e42 	.word	0x3fd62e42
 800689c:	3ff0a2b1 	.word	0x3ff0a2b1
 80068a0:	08007db0 	.word	0x08007db0
 80068a4:	08007dc0 	.word	0x08007dc0
 80068a8:	72bea4d0 	.word	0x72bea4d0
 80068ac:	3e663769 	.word	0x3e663769
 80068b0:	c5d26bf1 	.word	0xc5d26bf1
 80068b4:	3ebbbd41 	.word	0x3ebbbd41
 80068b8:	af25de2c 	.word	0xaf25de2c
 80068bc:	3f11566a 	.word	0x3f11566a
 80068c0:	16bebd93 	.word	0x16bebd93
 80068c4:	3f66c16c 	.word	0x3f66c16c
 80068c8:	5555553e 	.word	0x5555553e
 80068cc:	3fc55555 	.word	0x3fc55555
 80068d0:	3ff00000 	.word	0x3ff00000
 80068d4:	08007da0 	.word	0x08007da0
 80068d8:	652b82fe 	.word	0x652b82fe
 80068dc:	3ff71547 	.word	0x3ff71547
 80068e0:	fee00000 	.word	0xfee00000
 80068e4:	3fe62e42 	.word	0x3fe62e42
 80068e8:	35793c76 	.word	0x35793c76
 80068ec:	3dea39ef 	.word	0x3dea39ef
 80068f0:	3defffff 	.word	0x3defffff
 80068f4:	8800759c 	.word	0x8800759c
 80068f8:	7e37e43c 	.word	0x7e37e43c
 80068fc:	fffffc03 	.word	0xfffffc03

08006900 <__ieee754_log>:
 8006900:	2280      	movs	r2, #128	; 0x80
 8006902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006904:	000b      	movs	r3, r1
 8006906:	b08d      	sub	sp, #52	; 0x34
 8006908:	0352      	lsls	r2, r2, #13
 800690a:	4291      	cmp	r1, r2
 800690c:	da22      	bge.n	8006954 <__ieee754_log+0x54>
 800690e:	004a      	lsls	r2, r1, #1
 8006910:	0852      	lsrs	r2, r2, #1
 8006912:	4302      	orrs	r2, r0
 8006914:	d107      	bne.n	8006926 <__ieee754_log+0x26>
 8006916:	2200      	movs	r2, #0
 8006918:	2300      	movs	r3, #0
 800691a:	2000      	movs	r0, #0
 800691c:	49b3      	ldr	r1, [pc, #716]	; (8006bec <__ieee754_log+0x2ec>)
 800691e:	f7fa f8eb 	bl	8000af8 <__aeabi_ddiv>
 8006922:	b00d      	add	sp, #52	; 0x34
 8006924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006926:	2900      	cmp	r1, #0
 8006928:	da05      	bge.n	8006936 <__ieee754_log+0x36>
 800692a:	0002      	movs	r2, r0
 800692c:	f7fa ff52 	bl	80017d4 <__aeabi_dsub>
 8006930:	2200      	movs	r2, #0
 8006932:	2300      	movs	r3, #0
 8006934:	e7f3      	b.n	800691e <__ieee754_log+0x1e>
 8006936:	4bae      	ldr	r3, [pc, #696]	; (8006bf0 <__ieee754_log+0x2f0>)
 8006938:	2200      	movs	r2, #0
 800693a:	f7fa fcdf 	bl	80012fc <__aeabi_dmul>
 800693e:	2436      	movs	r4, #54	; 0x36
 8006940:	000b      	movs	r3, r1
 8006942:	4264      	negs	r4, r4
 8006944:	4aab      	ldr	r2, [pc, #684]	; (8006bf4 <__ieee754_log+0x2f4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	dd06      	ble.n	8006958 <__ieee754_log+0x58>
 800694a:	0002      	movs	r2, r0
 800694c:	000b      	movs	r3, r1
 800694e:	f7f9 fd97 	bl	8000480 <__aeabi_dadd>
 8006952:	e7e6      	b.n	8006922 <__ieee754_log+0x22>
 8006954:	2400      	movs	r4, #0
 8006956:	e7f5      	b.n	8006944 <__ieee754_log+0x44>
 8006958:	4da7      	ldr	r5, [pc, #668]	; (8006bf8 <__ieee754_log+0x2f8>)
 800695a:	151a      	asrs	r2, r3, #20
 800695c:	1952      	adds	r2, r2, r5
 800695e:	1912      	adds	r2, r2, r4
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	4ca6      	ldr	r4, [pc, #664]	; (8006bfc <__ieee754_log+0x2fc>)
 8006964:	0b1b      	lsrs	r3, r3, #12
 8006966:	9302      	str	r3, [sp, #8]
 8006968:	191c      	adds	r4, r3, r4
 800696a:	2380      	movs	r3, #128	; 0x80
 800696c:	035b      	lsls	r3, r3, #13
 800696e:	4023      	ands	r3, r4
 8006970:	4ca3      	ldr	r4, [pc, #652]	; (8006c00 <__ieee754_log+0x300>)
 8006972:	9d02      	ldr	r5, [sp, #8]
 8006974:	405c      	eors	r4, r3
 8006976:	151b      	asrs	r3, r3, #20
 8006978:	189b      	adds	r3, r3, r2
 800697a:	4325      	orrs	r5, r4
 800697c:	2200      	movs	r2, #0
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	0029      	movs	r1, r5
 8006982:	4b9f      	ldr	r3, [pc, #636]	; (8006c00 <__ieee754_log+0x300>)
 8006984:	f7fa ff26 	bl	80017d4 <__aeabi_dsub>
 8006988:	9b02      	ldr	r3, [sp, #8]
 800698a:	0006      	movs	r6, r0
 800698c:	3302      	adds	r3, #2
 800698e:	031b      	lsls	r3, r3, #12
 8006990:	000f      	movs	r7, r1
 8006992:	2200      	movs	r2, #0
 8006994:	0b1b      	lsrs	r3, r3, #12
 8006996:	2b02      	cmp	r3, #2
 8006998:	dc64      	bgt.n	8006a64 <__ieee754_log+0x164>
 800699a:	2300      	movs	r3, #0
 800699c:	f7f9 fd42 	bl	8000424 <__aeabi_dcmpeq>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d019      	beq.n	80069d8 <__ieee754_log+0xd8>
 80069a4:	9b00      	ldr	r3, [sp, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d100      	bne.n	80069ac <__ieee754_log+0xac>
 80069aa:	e11c      	b.n	8006be6 <__ieee754_log+0x2e6>
 80069ac:	0018      	movs	r0, r3
 80069ae:	f7fb faf7 	bl	8001fa0 <__aeabi_i2d>
 80069b2:	4a94      	ldr	r2, [pc, #592]	; (8006c04 <__ieee754_log+0x304>)
 80069b4:	4b94      	ldr	r3, [pc, #592]	; (8006c08 <__ieee754_log+0x308>)
 80069b6:	0004      	movs	r4, r0
 80069b8:	000d      	movs	r5, r1
 80069ba:	f7fa fc9f 	bl	80012fc <__aeabi_dmul>
 80069be:	4a93      	ldr	r2, [pc, #588]	; (8006c0c <__ieee754_log+0x30c>)
 80069c0:	0006      	movs	r6, r0
 80069c2:	000f      	movs	r7, r1
 80069c4:	4b92      	ldr	r3, [pc, #584]	; (8006c10 <__ieee754_log+0x310>)
 80069c6:	0020      	movs	r0, r4
 80069c8:	0029      	movs	r1, r5
 80069ca:	f7fa fc97 	bl	80012fc <__aeabi_dmul>
 80069ce:	0002      	movs	r2, r0
 80069d0:	000b      	movs	r3, r1
 80069d2:	0030      	movs	r0, r6
 80069d4:	0039      	movs	r1, r7
 80069d6:	e7ba      	b.n	800694e <__ieee754_log+0x4e>
 80069d8:	4a8e      	ldr	r2, [pc, #568]	; (8006c14 <__ieee754_log+0x314>)
 80069da:	4b8f      	ldr	r3, [pc, #572]	; (8006c18 <__ieee754_log+0x318>)
 80069dc:	0030      	movs	r0, r6
 80069de:	0039      	movs	r1, r7
 80069e0:	f7fa fc8c 	bl	80012fc <__aeabi_dmul>
 80069e4:	0002      	movs	r2, r0
 80069e6:	000b      	movs	r3, r1
 80069e8:	2000      	movs	r0, #0
 80069ea:	498c      	ldr	r1, [pc, #560]	; (8006c1c <__ieee754_log+0x31c>)
 80069ec:	f7fa fef2 	bl	80017d4 <__aeabi_dsub>
 80069f0:	0032      	movs	r2, r6
 80069f2:	0004      	movs	r4, r0
 80069f4:	000d      	movs	r5, r1
 80069f6:	003b      	movs	r3, r7
 80069f8:	0030      	movs	r0, r6
 80069fa:	0039      	movs	r1, r7
 80069fc:	f7fa fc7e 	bl	80012fc <__aeabi_dmul>
 8006a00:	000b      	movs	r3, r1
 8006a02:	0002      	movs	r2, r0
 8006a04:	0029      	movs	r1, r5
 8006a06:	0020      	movs	r0, r4
 8006a08:	f7fa fc78 	bl	80012fc <__aeabi_dmul>
 8006a0c:	9b00      	ldr	r3, [sp, #0]
 8006a0e:	9002      	str	r0, [sp, #8]
 8006a10:	9103      	str	r1, [sp, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <__ieee754_log+0x124>
 8006a16:	0002      	movs	r2, r0
 8006a18:	000b      	movs	r3, r1
 8006a1a:	0030      	movs	r0, r6
 8006a1c:	0039      	movs	r1, r7
 8006a1e:	f7fa fed9 	bl	80017d4 <__aeabi_dsub>
 8006a22:	e77e      	b.n	8006922 <__ieee754_log+0x22>
 8006a24:	9800      	ldr	r0, [sp, #0]
 8006a26:	f7fb fabb 	bl	8001fa0 <__aeabi_i2d>
 8006a2a:	4a76      	ldr	r2, [pc, #472]	; (8006c04 <__ieee754_log+0x304>)
 8006a2c:	4b76      	ldr	r3, [pc, #472]	; (8006c08 <__ieee754_log+0x308>)
 8006a2e:	0004      	movs	r4, r0
 8006a30:	000d      	movs	r5, r1
 8006a32:	f7fa fc63 	bl	80012fc <__aeabi_dmul>
 8006a36:	4a75      	ldr	r2, [pc, #468]	; (8006c0c <__ieee754_log+0x30c>)
 8006a38:	9000      	str	r0, [sp, #0]
 8006a3a:	9101      	str	r1, [sp, #4]
 8006a3c:	4b74      	ldr	r3, [pc, #464]	; (8006c10 <__ieee754_log+0x310>)
 8006a3e:	0020      	movs	r0, r4
 8006a40:	0029      	movs	r1, r5
 8006a42:	f7fa fc5b 	bl	80012fc <__aeabi_dmul>
 8006a46:	0002      	movs	r2, r0
 8006a48:	000b      	movs	r3, r1
 8006a4a:	9802      	ldr	r0, [sp, #8]
 8006a4c:	9903      	ldr	r1, [sp, #12]
 8006a4e:	f7fa fec1 	bl	80017d4 <__aeabi_dsub>
 8006a52:	0032      	movs	r2, r6
 8006a54:	003b      	movs	r3, r7
 8006a56:	f7fa febd 	bl	80017d4 <__aeabi_dsub>
 8006a5a:	0002      	movs	r2, r0
 8006a5c:	000b      	movs	r3, r1
 8006a5e:	9800      	ldr	r0, [sp, #0]
 8006a60:	9901      	ldr	r1, [sp, #4]
 8006a62:	e7dc      	b.n	8006a1e <__ieee754_log+0x11e>
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	05db      	lsls	r3, r3, #23
 8006a68:	f7f9 fd0a 	bl	8000480 <__aeabi_dadd>
 8006a6c:	0002      	movs	r2, r0
 8006a6e:	000b      	movs	r3, r1
 8006a70:	0030      	movs	r0, r6
 8006a72:	0039      	movs	r1, r7
 8006a74:	f7fa f840 	bl	8000af8 <__aeabi_ddiv>
 8006a78:	9004      	str	r0, [sp, #16]
 8006a7a:	9105      	str	r1, [sp, #20]
 8006a7c:	9800      	ldr	r0, [sp, #0]
 8006a7e:	f7fb fa8f 	bl	8001fa0 <__aeabi_i2d>
 8006a82:	9a04      	ldr	r2, [sp, #16]
 8006a84:	9b05      	ldr	r3, [sp, #20]
 8006a86:	9006      	str	r0, [sp, #24]
 8006a88:	9107      	str	r1, [sp, #28]
 8006a8a:	0010      	movs	r0, r2
 8006a8c:	0019      	movs	r1, r3
 8006a8e:	f7fa fc35 	bl	80012fc <__aeabi_dmul>
 8006a92:	4a63      	ldr	r2, [pc, #396]	; (8006c20 <__ieee754_log+0x320>)
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	4694      	mov	ip, r2
 8006a98:	4463      	add	r3, ip
 8006a9a:	0002      	movs	r2, r0
 8006a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a9e:	000b      	movs	r3, r1
 8006aa0:	9008      	str	r0, [sp, #32]
 8006aa2:	9109      	str	r1, [sp, #36]	; 0x24
 8006aa4:	f7fa fc2a 	bl	80012fc <__aeabi_dmul>
 8006aa8:	0004      	movs	r4, r0
 8006aaa:	000d      	movs	r5, r1
 8006aac:	4a5d      	ldr	r2, [pc, #372]	; (8006c24 <__ieee754_log+0x324>)
 8006aae:	4b5e      	ldr	r3, [pc, #376]	; (8006c28 <__ieee754_log+0x328>)
 8006ab0:	f7fa fc24 	bl	80012fc <__aeabi_dmul>
 8006ab4:	4a5d      	ldr	r2, [pc, #372]	; (8006c2c <__ieee754_log+0x32c>)
 8006ab6:	4b5e      	ldr	r3, [pc, #376]	; (8006c30 <__ieee754_log+0x330>)
 8006ab8:	f7f9 fce2 	bl	8000480 <__aeabi_dadd>
 8006abc:	0022      	movs	r2, r4
 8006abe:	002b      	movs	r3, r5
 8006ac0:	f7fa fc1c 	bl	80012fc <__aeabi_dmul>
 8006ac4:	4a5b      	ldr	r2, [pc, #364]	; (8006c34 <__ieee754_log+0x334>)
 8006ac6:	4b5c      	ldr	r3, [pc, #368]	; (8006c38 <__ieee754_log+0x338>)
 8006ac8:	f7f9 fcda 	bl	8000480 <__aeabi_dadd>
 8006acc:	0022      	movs	r2, r4
 8006ace:	002b      	movs	r3, r5
 8006ad0:	f7fa fc14 	bl	80012fc <__aeabi_dmul>
 8006ad4:	4a59      	ldr	r2, [pc, #356]	; (8006c3c <__ieee754_log+0x33c>)
 8006ad6:	4b5a      	ldr	r3, [pc, #360]	; (8006c40 <__ieee754_log+0x340>)
 8006ad8:	f7f9 fcd2 	bl	8000480 <__aeabi_dadd>
 8006adc:	9a08      	ldr	r2, [sp, #32]
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	f7fa fc0c 	bl	80012fc <__aeabi_dmul>
 8006ae4:	4a57      	ldr	r2, [pc, #348]	; (8006c44 <__ieee754_log+0x344>)
 8006ae6:	9008      	str	r0, [sp, #32]
 8006ae8:	9109      	str	r1, [sp, #36]	; 0x24
 8006aea:	4b57      	ldr	r3, [pc, #348]	; (8006c48 <__ieee754_log+0x348>)
 8006aec:	0020      	movs	r0, r4
 8006aee:	0029      	movs	r1, r5
 8006af0:	f7fa fc04 	bl	80012fc <__aeabi_dmul>
 8006af4:	4a55      	ldr	r2, [pc, #340]	; (8006c4c <__ieee754_log+0x34c>)
 8006af6:	4b56      	ldr	r3, [pc, #344]	; (8006c50 <__ieee754_log+0x350>)
 8006af8:	f7f9 fcc2 	bl	8000480 <__aeabi_dadd>
 8006afc:	0022      	movs	r2, r4
 8006afe:	002b      	movs	r3, r5
 8006b00:	f7fa fbfc 	bl	80012fc <__aeabi_dmul>
 8006b04:	4a53      	ldr	r2, [pc, #332]	; (8006c54 <__ieee754_log+0x354>)
 8006b06:	4b54      	ldr	r3, [pc, #336]	; (8006c58 <__ieee754_log+0x358>)
 8006b08:	f7f9 fcba 	bl	8000480 <__aeabi_dadd>
 8006b0c:	0022      	movs	r2, r4
 8006b0e:	002b      	movs	r3, r5
 8006b10:	f7fa fbf4 	bl	80012fc <__aeabi_dmul>
 8006b14:	0002      	movs	r2, r0
 8006b16:	000b      	movs	r3, r1
 8006b18:	9808      	ldr	r0, [sp, #32]
 8006b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b1c:	f7f9 fcb0 	bl	8000480 <__aeabi_dadd>
 8006b20:	9a02      	ldr	r2, [sp, #8]
 8006b22:	4b4e      	ldr	r3, [pc, #312]	; (8006c5c <__ieee754_log+0x35c>)
 8006b24:	0004      	movs	r4, r0
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b2a:	000d      	movs	r5, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	dd34      	ble.n	8006b9c <__ieee754_log+0x29c>
 8006b32:	2200      	movs	r2, #0
 8006b34:	4b39      	ldr	r3, [pc, #228]	; (8006c1c <__ieee754_log+0x31c>)
 8006b36:	0030      	movs	r0, r6
 8006b38:	0039      	movs	r1, r7
 8006b3a:	f7fa fbdf 	bl	80012fc <__aeabi_dmul>
 8006b3e:	0032      	movs	r2, r6
 8006b40:	003b      	movs	r3, r7
 8006b42:	f7fa fbdb 	bl	80012fc <__aeabi_dmul>
 8006b46:	0002      	movs	r2, r0
 8006b48:	000b      	movs	r3, r1
 8006b4a:	9002      	str	r0, [sp, #8]
 8006b4c:	9103      	str	r1, [sp, #12]
 8006b4e:	0020      	movs	r0, r4
 8006b50:	0029      	movs	r1, r5
 8006b52:	f7f9 fc95 	bl	8000480 <__aeabi_dadd>
 8006b56:	9a04      	ldr	r2, [sp, #16]
 8006b58:	9b05      	ldr	r3, [sp, #20]
 8006b5a:	f7fa fbcf 	bl	80012fc <__aeabi_dmul>
 8006b5e:	9b00      	ldr	r3, [sp, #0]
 8006b60:	0004      	movs	r4, r0
 8006b62:	000d      	movs	r5, r1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <__ieee754_log+0x276>
 8006b68:	0002      	movs	r2, r0
 8006b6a:	000b      	movs	r3, r1
 8006b6c:	9802      	ldr	r0, [sp, #8]
 8006b6e:	9903      	ldr	r1, [sp, #12]
 8006b70:	f7fa fe30 	bl	80017d4 <__aeabi_dsub>
 8006b74:	e74f      	b.n	8006a16 <__ieee754_log+0x116>
 8006b76:	4a23      	ldr	r2, [pc, #140]	; (8006c04 <__ieee754_log+0x304>)
 8006b78:	4b23      	ldr	r3, [pc, #140]	; (8006c08 <__ieee754_log+0x308>)
 8006b7a:	9806      	ldr	r0, [sp, #24]
 8006b7c:	9907      	ldr	r1, [sp, #28]
 8006b7e:	f7fa fbbd 	bl	80012fc <__aeabi_dmul>
 8006b82:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <__ieee754_log+0x30c>)
 8006b84:	9000      	str	r0, [sp, #0]
 8006b86:	9101      	str	r1, [sp, #4]
 8006b88:	9806      	ldr	r0, [sp, #24]
 8006b8a:	9907      	ldr	r1, [sp, #28]
 8006b8c:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <__ieee754_log+0x310>)
 8006b8e:	f7fa fbb5 	bl	80012fc <__aeabi_dmul>
 8006b92:	0022      	movs	r2, r4
 8006b94:	002b      	movs	r3, r5
 8006b96:	f7f9 fc73 	bl	8000480 <__aeabi_dadd>
 8006b9a:	e754      	b.n	8006a46 <__ieee754_log+0x146>
 8006b9c:	0002      	movs	r2, r0
 8006b9e:	000b      	movs	r3, r1
 8006ba0:	0030      	movs	r0, r6
 8006ba2:	0039      	movs	r1, r7
 8006ba4:	f7fa fe16 	bl	80017d4 <__aeabi_dsub>
 8006ba8:	9a04      	ldr	r2, [sp, #16]
 8006baa:	9b05      	ldr	r3, [sp, #20]
 8006bac:	f7fa fba6 	bl	80012fc <__aeabi_dmul>
 8006bb0:	9b00      	ldr	r3, [sp, #0]
 8006bb2:	0004      	movs	r4, r0
 8006bb4:	000d      	movs	r5, r1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <__ieee754_log+0x2c0>
 8006bba:	0002      	movs	r2, r0
 8006bbc:	000b      	movs	r3, r1
 8006bbe:	e72c      	b.n	8006a1a <__ieee754_log+0x11a>
 8006bc0:	4a10      	ldr	r2, [pc, #64]	; (8006c04 <__ieee754_log+0x304>)
 8006bc2:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <__ieee754_log+0x308>)
 8006bc4:	9806      	ldr	r0, [sp, #24]
 8006bc6:	9907      	ldr	r1, [sp, #28]
 8006bc8:	f7fa fb98 	bl	80012fc <__aeabi_dmul>
 8006bcc:	4a0f      	ldr	r2, [pc, #60]	; (8006c0c <__ieee754_log+0x30c>)
 8006bce:	9000      	str	r0, [sp, #0]
 8006bd0:	9101      	str	r1, [sp, #4]
 8006bd2:	9806      	ldr	r0, [sp, #24]
 8006bd4:	9907      	ldr	r1, [sp, #28]
 8006bd6:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <__ieee754_log+0x310>)
 8006bd8:	f7fa fb90 	bl	80012fc <__aeabi_dmul>
 8006bdc:	0002      	movs	r2, r0
 8006bde:	000b      	movs	r3, r1
 8006be0:	0020      	movs	r0, r4
 8006be2:	0029      	movs	r1, r5
 8006be4:	e733      	b.n	8006a4e <__ieee754_log+0x14e>
 8006be6:	2000      	movs	r0, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	e69a      	b.n	8006922 <__ieee754_log+0x22>
 8006bec:	c3500000 	.word	0xc3500000
 8006bf0:	43500000 	.word	0x43500000
 8006bf4:	7fefffff 	.word	0x7fefffff
 8006bf8:	fffffc01 	.word	0xfffffc01
 8006bfc:	00095f64 	.word	0x00095f64
 8006c00:	3ff00000 	.word	0x3ff00000
 8006c04:	fee00000 	.word	0xfee00000
 8006c08:	3fe62e42 	.word	0x3fe62e42
 8006c0c:	35793c76 	.word	0x35793c76
 8006c10:	3dea39ef 	.word	0x3dea39ef
 8006c14:	55555555 	.word	0x55555555
 8006c18:	3fd55555 	.word	0x3fd55555
 8006c1c:	3fe00000 	.word	0x3fe00000
 8006c20:	fff9eb86 	.word	0xfff9eb86
 8006c24:	df3e5244 	.word	0xdf3e5244
 8006c28:	3fc2f112 	.word	0x3fc2f112
 8006c2c:	96cb03de 	.word	0x96cb03de
 8006c30:	3fc74664 	.word	0x3fc74664
 8006c34:	94229359 	.word	0x94229359
 8006c38:	3fd24924 	.word	0x3fd24924
 8006c3c:	55555593 	.word	0x55555593
 8006c40:	3fe55555 	.word	0x3fe55555
 8006c44:	d078c69f 	.word	0xd078c69f
 8006c48:	3fc39a09 	.word	0x3fc39a09
 8006c4c:	1d8e78af 	.word	0x1d8e78af
 8006c50:	3fcc71c5 	.word	0x3fcc71c5
 8006c54:	9997fa04 	.word	0x9997fa04
 8006c58:	3fd99999 	.word	0x3fd99999
 8006c5c:	0006b851 	.word	0x0006b851

08006c60 <__ieee754_pow>:
 8006c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c62:	b095      	sub	sp, #84	; 0x54
 8006c64:	9202      	str	r2, [sp, #8]
 8006c66:	9303      	str	r3, [sp, #12]
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	9a03      	ldr	r2, [sp, #12]
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	9b02      	ldr	r3, [sp, #8]
 8006c70:	0056      	lsls	r6, r2, #1
 8006c72:	001a      	movs	r2, r3
 8006c74:	0876      	lsrs	r6, r6, #1
 8006c76:	0007      	movs	r7, r0
 8006c78:	000d      	movs	r5, r1
 8006c7a:	4332      	orrs	r2, r6
 8006c7c:	d119      	bne.n	8006cb2 <__ieee754_pow+0x52>
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	0309      	lsls	r1, r1, #12
 8006c82:	4069      	eors	r1, r5
 8006c84:	0002      	movs	r2, r0
 8006c86:	000b      	movs	r3, r1
 8006c88:	1892      	adds	r2, r2, r2
 8006c8a:	415b      	adcs	r3, r3
 8006c8c:	4989      	ldr	r1, [pc, #548]	; (8006eb4 <__ieee754_pow+0x254>)
 8006c8e:	428b      	cmp	r3, r1
 8006c90:	d806      	bhi.n	8006ca0 <__ieee754_pow+0x40>
 8006c92:	d001      	beq.n	8006c98 <__ieee754_pow+0x38>
 8006c94:	f000 fcb6 	bl	8007604 <__ieee754_pow+0x9a4>
 8006c98:	2a00      	cmp	r2, #0
 8006c9a:	d101      	bne.n	8006ca0 <__ieee754_pow+0x40>
 8006c9c:	f000 fcb2 	bl	8007604 <__ieee754_pow+0x9a4>
 8006ca0:	9a02      	ldr	r2, [sp, #8]
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	0038      	movs	r0, r7
 8006ca6:	0029      	movs	r1, r5
 8006ca8:	f7f9 fbea 	bl	8000480 <__aeabi_dadd>
 8006cac:	9000      	str	r0, [sp, #0]
 8006cae:	9101      	str	r1, [sp, #4]
 8006cb0:	e0ad      	b.n	8006e0e <__ieee754_pow+0x1ae>
 8006cb2:	4a81      	ldr	r2, [pc, #516]	; (8006eb8 <__ieee754_pow+0x258>)
 8006cb4:	004c      	lsls	r4, r1, #1
 8006cb6:	9108      	str	r1, [sp, #32]
 8006cb8:	9000      	str	r0, [sp, #0]
 8006cba:	0864      	lsrs	r4, r4, #1
 8006cbc:	4294      	cmp	r4, r2
 8006cbe:	dc08      	bgt.n	8006cd2 <__ieee754_pow+0x72>
 8006cc0:	d101      	bne.n	8006cc6 <__ieee754_pow+0x66>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d1ec      	bne.n	8006ca0 <__ieee754_pow+0x40>
 8006cc6:	4a7c      	ldr	r2, [pc, #496]	; (8006eb8 <__ieee754_pow+0x258>)
 8006cc8:	4296      	cmp	r6, r2
 8006cca:	dc02      	bgt.n	8006cd2 <__ieee754_pow+0x72>
 8006ccc:	d10c      	bne.n	8006ce8 <__ieee754_pow+0x88>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <__ieee754_pow+0x88>
 8006cd2:	4b7a      	ldr	r3, [pc, #488]	; (8006ebc <__ieee754_pow+0x25c>)
 8006cd4:	18eb      	adds	r3, r5, r3
 8006cd6:	433b      	orrs	r3, r7
 8006cd8:	d1e2      	bne.n	8006ca0 <__ieee754_pow+0x40>
 8006cda:	2180      	movs	r1, #128	; 0x80
 8006cdc:	9803      	ldr	r0, [sp, #12]
 8006cde:	0309      	lsls	r1, r1, #12
 8006ce0:	4048      	eors	r0, r1
 8006ce2:	0003      	movs	r3, r0
 8006ce4:	9a02      	ldr	r2, [sp, #8]
 8006ce6:	e7cf      	b.n	8006c88 <__ieee754_pow+0x28>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	9206      	str	r2, [sp, #24]
 8006cec:	2d00      	cmp	r5, #0
 8006cee:	da69      	bge.n	8006dc4 <__ieee754_pow+0x164>
 8006cf0:	4a73      	ldr	r2, [pc, #460]	; (8006ec0 <__ieee754_pow+0x260>)
 8006cf2:	4296      	cmp	r6, r2
 8006cf4:	dc64      	bgt.n	8006dc0 <__ieee754_pow+0x160>
 8006cf6:	4a73      	ldr	r2, [pc, #460]	; (8006ec4 <__ieee754_pow+0x264>)
 8006cf8:	4296      	cmp	r6, r2
 8006cfa:	dd11      	ble.n	8006d20 <__ieee754_pow+0xc0>
 8006cfc:	4972      	ldr	r1, [pc, #456]	; (8006ec8 <__ieee754_pow+0x268>)
 8006cfe:	1532      	asrs	r2, r6, #20
 8006d00:	1852      	adds	r2, r2, r1
 8006d02:	2a14      	cmp	r2, #20
 8006d04:	dd3c      	ble.n	8006d80 <__ieee754_pow+0x120>
 8006d06:	2134      	movs	r1, #52	; 0x34
 8006d08:	1a8a      	subs	r2, r1, r2
 8006d0a:	9902      	ldr	r1, [sp, #8]
 8006d0c:	40d1      	lsrs	r1, r2
 8006d0e:	0008      	movs	r0, r1
 8006d10:	4090      	lsls	r0, r2
 8006d12:	4298      	cmp	r0, r3
 8006d14:	d104      	bne.n	8006d20 <__ieee754_pow+0xc0>
 8006d16:	2201      	movs	r2, #1
 8006d18:	4011      	ands	r1, r2
 8006d1a:	1892      	adds	r2, r2, r2
 8006d1c:	1a52      	subs	r2, r2, r1
 8006d1e:	9206      	str	r2, [sp, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d03c      	beq.n	8006d9e <__ieee754_pow+0x13e>
 8006d24:	0038      	movs	r0, r7
 8006d26:	0029      	movs	r1, r5
 8006d28:	f000 fd8b 	bl	8007842 <fabs>
 8006d2c:	9000      	str	r0, [sp, #0]
 8006d2e:	9101      	str	r1, [sp, #4]
 8006d30:	2f00      	cmp	r7, #0
 8006d32:	d000      	beq.n	8006d36 <__ieee754_pow+0xd6>
 8006d34:	e094      	b.n	8006e60 <__ieee754_pow+0x200>
 8006d36:	2c00      	cmp	r4, #0
 8006d38:	d005      	beq.n	8006d46 <__ieee754_pow+0xe6>
 8006d3a:	4a64      	ldr	r2, [pc, #400]	; (8006ecc <__ieee754_pow+0x26c>)
 8006d3c:	00ab      	lsls	r3, r5, #2
 8006d3e:	089b      	lsrs	r3, r3, #2
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d000      	beq.n	8006d46 <__ieee754_pow+0xe6>
 8006d44:	e08c      	b.n	8006e60 <__ieee754_pow+0x200>
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da07      	bge.n	8006d5c <__ieee754_pow+0xfc>
 8006d4c:	9a00      	ldr	r2, [sp, #0]
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	2000      	movs	r0, #0
 8006d52:	495e      	ldr	r1, [pc, #376]	; (8006ecc <__ieee754_pow+0x26c>)
 8006d54:	f7f9 fed0 	bl	8000af8 <__aeabi_ddiv>
 8006d58:	9000      	str	r0, [sp, #0]
 8006d5a:	9101      	str	r1, [sp, #4]
 8006d5c:	9b08      	ldr	r3, [sp, #32]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	da55      	bge.n	8006e0e <__ieee754_pow+0x1ae>
 8006d62:	4b56      	ldr	r3, [pc, #344]	; (8006ebc <__ieee754_pow+0x25c>)
 8006d64:	18e4      	adds	r4, r4, r3
 8006d66:	9b06      	ldr	r3, [sp, #24]
 8006d68:	431c      	orrs	r4, r3
 8006d6a:	d000      	beq.n	8006d6e <__ieee754_pow+0x10e>
 8006d6c:	e06c      	b.n	8006e48 <__ieee754_pow+0x1e8>
 8006d6e:	9a00      	ldr	r2, [sp, #0]
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	0010      	movs	r0, r2
 8006d74:	0019      	movs	r1, r3
 8006d76:	f7fa fd2d 	bl	80017d4 <__aeabi_dsub>
 8006d7a:	0002      	movs	r2, r0
 8006d7c:	000b      	movs	r3, r1
 8006d7e:	e01c      	b.n	8006dba <__ieee754_pow+0x15a>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1cf      	bne.n	8006d24 <__ieee754_pow+0xc4>
 8006d84:	3314      	adds	r3, #20
 8006d86:	1a9a      	subs	r2, r3, r2
 8006d88:	0033      	movs	r3, r6
 8006d8a:	4113      	asrs	r3, r2
 8006d8c:	0019      	movs	r1, r3
 8006d8e:	4091      	lsls	r1, r2
 8006d90:	42b1      	cmp	r1, r6
 8006d92:	d104      	bne.n	8006d9e <__ieee754_pow+0x13e>
 8006d94:	2201      	movs	r2, #1
 8006d96:	4013      	ands	r3, r2
 8006d98:	1892      	adds	r2, r2, r2
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	9306      	str	r3, [sp, #24]
 8006d9e:	4b4b      	ldr	r3, [pc, #300]	; (8006ecc <__ieee754_pow+0x26c>)
 8006da0:	429e      	cmp	r6, r3
 8006da2:	d138      	bne.n	8006e16 <__ieee754_pow+0x1b6>
 8006da4:	0038      	movs	r0, r7
 8006da6:	0029      	movs	r1, r5
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	9000      	str	r0, [sp, #0]
 8006dac:	9101      	str	r1, [sp, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	da2d      	bge.n	8006e0e <__ieee754_pow+0x1ae>
 8006db2:	003a      	movs	r2, r7
 8006db4:	002b      	movs	r3, r5
 8006db6:	2000      	movs	r0, #0
 8006db8:	4944      	ldr	r1, [pc, #272]	; (8006ecc <__ieee754_pow+0x26c>)
 8006dba:	f7f9 fe9d 	bl	8000af8 <__aeabi_ddiv>
 8006dbe:	e775      	b.n	8006cac <__ieee754_pow+0x4c>
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	9206      	str	r2, [sp, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1ad      	bne.n	8006d24 <__ieee754_pow+0xc4>
 8006dc8:	4b3b      	ldr	r3, [pc, #236]	; (8006eb8 <__ieee754_pow+0x258>)
 8006dca:	429e      	cmp	r6, r3
 8006dcc:	d1e7      	bne.n	8006d9e <__ieee754_pow+0x13e>
 8006dce:	4b3b      	ldr	r3, [pc, #236]	; (8006ebc <__ieee754_pow+0x25c>)
 8006dd0:	18e3      	adds	r3, r4, r3
 8006dd2:	431f      	orrs	r7, r3
 8006dd4:	d101      	bne.n	8006dda <__ieee754_pow+0x17a>
 8006dd6:	f000 fc15 	bl	8007604 <__ieee754_pow+0x9a4>
 8006dda:	4b3a      	ldr	r3, [pc, #232]	; (8006ec4 <__ieee754_pow+0x264>)
 8006ddc:	429c      	cmp	r4, r3
 8006dde:	dd09      	ble.n	8006df4 <__ieee754_pow+0x194>
 8006de0:	9b04      	ldr	r3, [sp, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	da01      	bge.n	8006dea <__ieee754_pow+0x18a>
 8006de6:	f000 fc11 	bl	800760c <__ieee754_pow+0x9ac>
 8006dea:	9b02      	ldr	r3, [sp, #8]
 8006dec:	9c03      	ldr	r4, [sp, #12]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	9401      	str	r4, [sp, #4]
 8006df2:	e00c      	b.n	8006e0e <__ieee754_pow+0x1ae>
 8006df4:	9b04      	ldr	r3, [sp, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	db01      	blt.n	8006dfe <__ieee754_pow+0x19e>
 8006dfa:	f000 fc07 	bl	800760c <__ieee754_pow+0x9ac>
 8006dfe:	2280      	movs	r2, #128	; 0x80
 8006e00:	0612      	lsls	r2, r2, #24
 8006e02:	4694      	mov	ip, r2
 8006e04:	9b02      	ldr	r3, [sp, #8]
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	4463      	add	r3, ip
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	9800      	ldr	r0, [sp, #0]
 8006e10:	9901      	ldr	r1, [sp, #4]
 8006e12:	b015      	add	sp, #84	; 0x54
 8006e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e16:	2380      	movs	r3, #128	; 0x80
 8006e18:	9a04      	ldr	r2, [sp, #16]
 8006e1a:	05db      	lsls	r3, r3, #23
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d106      	bne.n	8006e2e <__ieee754_pow+0x1ce>
 8006e20:	003a      	movs	r2, r7
 8006e22:	002b      	movs	r3, r5
 8006e24:	0038      	movs	r0, r7
 8006e26:	0029      	movs	r1, r5
 8006e28:	f7fa fa68 	bl	80012fc <__aeabi_dmul>
 8006e2c:	e73e      	b.n	8006cac <__ieee754_pow+0x4c>
 8006e2e:	4b28      	ldr	r3, [pc, #160]	; (8006ed0 <__ieee754_pow+0x270>)
 8006e30:	9a04      	ldr	r2, [sp, #16]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d000      	beq.n	8006e38 <__ieee754_pow+0x1d8>
 8006e36:	e775      	b.n	8006d24 <__ieee754_pow+0xc4>
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	da00      	bge.n	8006e3e <__ieee754_pow+0x1de>
 8006e3c:	e772      	b.n	8006d24 <__ieee754_pow+0xc4>
 8006e3e:	0038      	movs	r0, r7
 8006e40:	0029      	movs	r1, r5
 8006e42:	f000 fc17 	bl	8007674 <__ieee754_sqrt>
 8006e46:	e731      	b.n	8006cac <__ieee754_pow+0x4c>
 8006e48:	9b06      	ldr	r3, [sp, #24]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d1df      	bne.n	8006e0e <__ieee754_pow+0x1ae>
 8006e4e:	9800      	ldr	r0, [sp, #0]
 8006e50:	2180      	movs	r1, #128	; 0x80
 8006e52:	0002      	movs	r2, r0
 8006e54:	9801      	ldr	r0, [sp, #4]
 8006e56:	0609      	lsls	r1, r1, #24
 8006e58:	1843      	adds	r3, r0, r1
 8006e5a:	9200      	str	r2, [sp, #0]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	e7d6      	b.n	8006e0e <__ieee754_pow+0x1ae>
 8006e60:	0feb      	lsrs	r3, r5, #31
 8006e62:	3b01      	subs	r3, #1
 8006e64:	930e      	str	r3, [sp, #56]	; 0x38
 8006e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e68:	9b06      	ldr	r3, [sp, #24]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	d104      	bne.n	8006e78 <__ieee754_pow+0x218>
 8006e6e:	003a      	movs	r2, r7
 8006e70:	002b      	movs	r3, r5
 8006e72:	0038      	movs	r0, r7
 8006e74:	0029      	movs	r1, r5
 8006e76:	e77e      	b.n	8006d76 <__ieee754_pow+0x116>
 8006e78:	4b16      	ldr	r3, [pc, #88]	; (8006ed4 <__ieee754_pow+0x274>)
 8006e7a:	429e      	cmp	r6, r3
 8006e7c:	dc00      	bgt.n	8006e80 <__ieee754_pow+0x220>
 8006e7e:	e0ef      	b.n	8007060 <__ieee754_pow+0x400>
 8006e80:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <__ieee754_pow+0x278>)
 8006e82:	429e      	cmp	r6, r3
 8006e84:	dd09      	ble.n	8006e9a <__ieee754_pow+0x23a>
 8006e86:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <__ieee754_pow+0x264>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	dc0c      	bgt.n	8006ea6 <__ieee754_pow+0x246>
 8006e8c:	9b04      	ldr	r3, [sp, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da0c      	bge.n	8006eac <__ieee754_pow+0x24c>
 8006e92:	2000      	movs	r0, #0
 8006e94:	f000 fcce 	bl	8007834 <__math_oflow>
 8006e98:	e708      	b.n	8006cac <__ieee754_pow+0x4c>
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <__ieee754_pow+0x27c>)
 8006e9c:	429c      	cmp	r4, r3
 8006e9e:	ddf5      	ble.n	8006e8c <__ieee754_pow+0x22c>
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <__ieee754_pow+0x26c>)
 8006ea2:	429c      	cmp	r4, r3
 8006ea4:	dd1c      	ble.n	8006ee0 <__ieee754_pow+0x280>
 8006ea6:	9b04      	ldr	r3, [sp, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	dcf2      	bgt.n	8006e92 <__ieee754_pow+0x232>
 8006eac:	2000      	movs	r0, #0
 8006eae:	f000 fcba 	bl	8007826 <__math_uflow>
 8006eb2:	e6fb      	b.n	8006cac <__ieee754_pow+0x4c>
 8006eb4:	fff00000 	.word	0xfff00000
 8006eb8:	7ff00000 	.word	0x7ff00000
 8006ebc:	c0100000 	.word	0xc0100000
 8006ec0:	433fffff 	.word	0x433fffff
 8006ec4:	3fefffff 	.word	0x3fefffff
 8006ec8:	fffffc01 	.word	0xfffffc01
 8006ecc:	3ff00000 	.word	0x3ff00000
 8006ed0:	3fe00000 	.word	0x3fe00000
 8006ed4:	41e00000 	.word	0x41e00000
 8006ed8:	43f00000 	.word	0x43f00000
 8006edc:	3feffffe 	.word	0x3feffffe
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	9800      	ldr	r0, [sp, #0]
 8006ee4:	9901      	ldr	r1, [sp, #4]
 8006ee6:	4b52      	ldr	r3, [pc, #328]	; (8007030 <__ieee754_pow+0x3d0>)
 8006ee8:	f7fa fc74 	bl	80017d4 <__aeabi_dsub>
 8006eec:	22c0      	movs	r2, #192	; 0xc0
 8006eee:	4b51      	ldr	r3, [pc, #324]	; (8007034 <__ieee754_pow+0x3d4>)
 8006ef0:	05d2      	lsls	r2, r2, #23
 8006ef2:	0004      	movs	r4, r0
 8006ef4:	000d      	movs	r5, r1
 8006ef6:	f7fa fa01 	bl	80012fc <__aeabi_dmul>
 8006efa:	4a4f      	ldr	r2, [pc, #316]	; (8007038 <__ieee754_pow+0x3d8>)
 8006efc:	9000      	str	r0, [sp, #0]
 8006efe:	9101      	str	r1, [sp, #4]
 8006f00:	4b4e      	ldr	r3, [pc, #312]	; (800703c <__ieee754_pow+0x3dc>)
 8006f02:	0020      	movs	r0, r4
 8006f04:	0029      	movs	r1, r5
 8006f06:	f7fa f9f9 	bl	80012fc <__aeabi_dmul>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	9004      	str	r0, [sp, #16]
 8006f0e:	9105      	str	r1, [sp, #20]
 8006f10:	4b4b      	ldr	r3, [pc, #300]	; (8007040 <__ieee754_pow+0x3e0>)
 8006f12:	0020      	movs	r0, r4
 8006f14:	0029      	movs	r1, r5
 8006f16:	f7fa f9f1 	bl	80012fc <__aeabi_dmul>
 8006f1a:	0002      	movs	r2, r0
 8006f1c:	000b      	movs	r3, r1
 8006f1e:	4849      	ldr	r0, [pc, #292]	; (8007044 <__ieee754_pow+0x3e4>)
 8006f20:	4949      	ldr	r1, [pc, #292]	; (8007048 <__ieee754_pow+0x3e8>)
 8006f22:	f7fa fc57 	bl	80017d4 <__aeabi_dsub>
 8006f26:	0022      	movs	r2, r4
 8006f28:	002b      	movs	r3, r5
 8006f2a:	f7fa f9e7 	bl	80012fc <__aeabi_dmul>
 8006f2e:	0002      	movs	r2, r0
 8006f30:	000b      	movs	r3, r1
 8006f32:	2000      	movs	r0, #0
 8006f34:	4945      	ldr	r1, [pc, #276]	; (800704c <__ieee754_pow+0x3ec>)
 8006f36:	f7fa fc4d 	bl	80017d4 <__aeabi_dsub>
 8006f3a:	0022      	movs	r2, r4
 8006f3c:	0006      	movs	r6, r0
 8006f3e:	000f      	movs	r7, r1
 8006f40:	002b      	movs	r3, r5
 8006f42:	0020      	movs	r0, r4
 8006f44:	0029      	movs	r1, r5
 8006f46:	f7fa f9d9 	bl	80012fc <__aeabi_dmul>
 8006f4a:	0002      	movs	r2, r0
 8006f4c:	000b      	movs	r3, r1
 8006f4e:	0030      	movs	r0, r6
 8006f50:	0039      	movs	r1, r7
 8006f52:	f7fa f9d3 	bl	80012fc <__aeabi_dmul>
 8006f56:	4a3e      	ldr	r2, [pc, #248]	; (8007050 <__ieee754_pow+0x3f0>)
 8006f58:	4b36      	ldr	r3, [pc, #216]	; (8007034 <__ieee754_pow+0x3d4>)
 8006f5a:	f7fa f9cf 	bl	80012fc <__aeabi_dmul>
 8006f5e:	0002      	movs	r2, r0
 8006f60:	000b      	movs	r3, r1
 8006f62:	9804      	ldr	r0, [sp, #16]
 8006f64:	9905      	ldr	r1, [sp, #20]
 8006f66:	f7fa fc35 	bl	80017d4 <__aeabi_dsub>
 8006f6a:	0002      	movs	r2, r0
 8006f6c:	000b      	movs	r3, r1
 8006f6e:	0004      	movs	r4, r0
 8006f70:	000d      	movs	r5, r1
 8006f72:	9800      	ldr	r0, [sp, #0]
 8006f74:	9901      	ldr	r1, [sp, #4]
 8006f76:	f7f9 fa83 	bl	8000480 <__aeabi_dadd>
 8006f7a:	9a00      	ldr	r2, [sp, #0]
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	2000      	movs	r0, #0
 8006f80:	000f      	movs	r7, r1
 8006f82:	0006      	movs	r6, r0
 8006f84:	f7fa fc26 	bl	80017d4 <__aeabi_dsub>
 8006f88:	0002      	movs	r2, r0
 8006f8a:	000b      	movs	r3, r1
 8006f8c:	0020      	movs	r0, r4
 8006f8e:	0029      	movs	r1, r5
 8006f90:	f7fa fc20 	bl	80017d4 <__aeabi_dsub>
 8006f94:	9b06      	ldr	r3, [sp, #24]
 8006f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	9004      	str	r0, [sp, #16]
 8006f9c:	9105      	str	r1, [sp, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	d000      	beq.n	8006fa4 <__ieee754_pow+0x344>
 8006fa2:	e1db      	b.n	800735c <__ieee754_pow+0x6fc>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4c2b      	ldr	r4, [pc, #172]	; (8007054 <__ieee754_pow+0x3f4>)
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	9401      	str	r4, [sp, #4]
 8006fac:	9c02      	ldr	r4, [sp, #8]
 8006fae:	9d03      	ldr	r5, [sp, #12]
 8006fb0:	9802      	ldr	r0, [sp, #8]
 8006fb2:	9903      	ldr	r1, [sp, #12]
 8006fb4:	2400      	movs	r4, #0
 8006fb6:	002b      	movs	r3, r5
 8006fb8:	0022      	movs	r2, r4
 8006fba:	f7fa fc0b 	bl	80017d4 <__aeabi_dsub>
 8006fbe:	0032      	movs	r2, r6
 8006fc0:	003b      	movs	r3, r7
 8006fc2:	f7fa f99b 	bl	80012fc <__aeabi_dmul>
 8006fc6:	9a02      	ldr	r2, [sp, #8]
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	9006      	str	r0, [sp, #24]
 8006fcc:	9107      	str	r1, [sp, #28]
 8006fce:	9804      	ldr	r0, [sp, #16]
 8006fd0:	9905      	ldr	r1, [sp, #20]
 8006fd2:	f7fa f993 	bl	80012fc <__aeabi_dmul>
 8006fd6:	0002      	movs	r2, r0
 8006fd8:	000b      	movs	r3, r1
 8006fda:	9806      	ldr	r0, [sp, #24]
 8006fdc:	9907      	ldr	r1, [sp, #28]
 8006fde:	f7f9 fa4f 	bl	8000480 <__aeabi_dadd>
 8006fe2:	0022      	movs	r2, r4
 8006fe4:	002b      	movs	r3, r5
 8006fe6:	9004      	str	r0, [sp, #16]
 8006fe8:	9105      	str	r1, [sp, #20]
 8006fea:	0030      	movs	r0, r6
 8006fec:	0039      	movs	r1, r7
 8006fee:	f7fa f985 	bl	80012fc <__aeabi_dmul>
 8006ff2:	0006      	movs	r6, r0
 8006ff4:	000f      	movs	r7, r1
 8006ff6:	000b      	movs	r3, r1
 8006ff8:	0002      	movs	r2, r0
 8006ffa:	9804      	ldr	r0, [sp, #16]
 8006ffc:	9905      	ldr	r1, [sp, #20]
 8006ffe:	9606      	str	r6, [sp, #24]
 8007000:	9707      	str	r7, [sp, #28]
 8007002:	f7f9 fa3d 	bl	8000480 <__aeabi_dadd>
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <__ieee754_pow+0x3f8>)
 8007008:	0005      	movs	r5, r0
 800700a:	000c      	movs	r4, r1
 800700c:	9108      	str	r1, [sp, #32]
 800700e:	4299      	cmp	r1, r3
 8007010:	dc00      	bgt.n	8007014 <__ieee754_pow+0x3b4>
 8007012:	e2d6      	b.n	80075c2 <__ieee754_pow+0x962>
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <__ieee754_pow+0x3fc>)
 8007016:	18cb      	adds	r3, r1, r3
 8007018:	4303      	orrs	r3, r0
 800701a:	d100      	bne.n	800701e <__ieee754_pow+0x3be>
 800701c:	e1d8      	b.n	80073d0 <__ieee754_pow+0x770>
 800701e:	9800      	ldr	r0, [sp, #0]
 8007020:	9901      	ldr	r1, [sp, #4]
 8007022:	2300      	movs	r3, #0
 8007024:	2200      	movs	r2, #0
 8007026:	f7f9 fa03 	bl	8000430 <__aeabi_dcmplt>
 800702a:	1e43      	subs	r3, r0, #1
 800702c:	4198      	sbcs	r0, r3
 800702e:	e731      	b.n	8006e94 <__ieee754_pow+0x234>
 8007030:	3ff00000 	.word	0x3ff00000
 8007034:	3ff71547 	.word	0x3ff71547
 8007038:	f85ddf44 	.word	0xf85ddf44
 800703c:	3e54ae0b 	.word	0x3e54ae0b
 8007040:	3fd00000 	.word	0x3fd00000
 8007044:	55555555 	.word	0x55555555
 8007048:	3fd55555 	.word	0x3fd55555
 800704c:	3fe00000 	.word	0x3fe00000
 8007050:	652b82fe 	.word	0x652b82fe
 8007054:	bff00000 	.word	0xbff00000
 8007058:	408fffff 	.word	0x408fffff
 800705c:	bf700000 	.word	0xbf700000
 8007060:	4bc0      	ldr	r3, [pc, #768]	; (8007364 <__ieee754_pow+0x704>)
 8007062:	2200      	movs	r2, #0
 8007064:	422b      	tst	r3, r5
 8007066:	d10a      	bne.n	800707e <__ieee754_pow+0x41e>
 8007068:	9800      	ldr	r0, [sp, #0]
 800706a:	9901      	ldr	r1, [sp, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	4bbe      	ldr	r3, [pc, #760]	; (8007368 <__ieee754_pow+0x708>)
 8007070:	f7fa f944 	bl	80012fc <__aeabi_dmul>
 8007074:	2235      	movs	r2, #53	; 0x35
 8007076:	9000      	str	r0, [sp, #0]
 8007078:	9101      	str	r1, [sp, #4]
 800707a:	9c01      	ldr	r4, [sp, #4]
 800707c:	4252      	negs	r2, r2
 800707e:	49bb      	ldr	r1, [pc, #748]	; (800736c <__ieee754_pow+0x70c>)
 8007080:	1523      	asrs	r3, r4, #20
 8007082:	185b      	adds	r3, r3, r1
 8007084:	189b      	adds	r3, r3, r2
 8007086:	0324      	lsls	r4, r4, #12
 8007088:	4db9      	ldr	r5, [pc, #740]	; (8007370 <__ieee754_pow+0x710>)
 800708a:	930d      	str	r3, [sp, #52]	; 0x34
 800708c:	4bb9      	ldr	r3, [pc, #740]	; (8007374 <__ieee754_pow+0x714>)
 800708e:	0b22      	lsrs	r2, r4, #12
 8007090:	4315      	orrs	r5, r2
 8007092:	2400      	movs	r4, #0
 8007094:	429a      	cmp	r2, r3
 8007096:	dd09      	ble.n	80070ac <__ieee754_pow+0x44c>
 8007098:	4bb7      	ldr	r3, [pc, #732]	; (8007378 <__ieee754_pow+0x718>)
 800709a:	3401      	adds	r4, #1
 800709c:	429a      	cmp	r2, r3
 800709e:	dd05      	ble.n	80070ac <__ieee754_pow+0x44c>
 80070a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a2:	191b      	adds	r3, r3, r4
 80070a4:	2400      	movs	r4, #0
 80070a6:	930d      	str	r3, [sp, #52]	; 0x34
 80070a8:	4bb4      	ldr	r3, [pc, #720]	; (800737c <__ieee754_pow+0x71c>)
 80070aa:	18ed      	adds	r5, r5, r3
 80070ac:	00e3      	lsls	r3, r4, #3
 80070ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b0:	4bb3      	ldr	r3, [pc, #716]	; (8007380 <__ieee754_pow+0x720>)
 80070b2:	00e2      	lsls	r2, r4, #3
 80070b4:	189b      	adds	r3, r3, r2
 80070b6:	9800      	ldr	r0, [sp, #0]
 80070b8:	9901      	ldr	r1, [sp, #4]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	0029      	movs	r1, r5
 80070c0:	0006      	movs	r6, r0
 80070c2:	920a      	str	r2, [sp, #40]	; 0x28
 80070c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80070c6:	f7fa fb85 	bl	80017d4 <__aeabi_dsub>
 80070ca:	0032      	movs	r2, r6
 80070cc:	002b      	movs	r3, r5
 80070ce:	9010      	str	r0, [sp, #64]	; 0x40
 80070d0:	9111      	str	r1, [sp, #68]	; 0x44
 80070d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070d6:	f7f9 f9d3 	bl	8000480 <__aeabi_dadd>
 80070da:	0002      	movs	r2, r0
 80070dc:	000b      	movs	r3, r1
 80070de:	2000      	movs	r0, #0
 80070e0:	49a3      	ldr	r1, [pc, #652]	; (8007370 <__ieee754_pow+0x710>)
 80070e2:	f7f9 fd09 	bl	8000af8 <__aeabi_ddiv>
 80070e6:	0002      	movs	r2, r0
 80070e8:	000b      	movs	r3, r1
 80070ea:	9012      	str	r0, [sp, #72]	; 0x48
 80070ec:	9113      	str	r1, [sp, #76]	; 0x4c
 80070ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80070f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80070f2:	f7fa f903 	bl	80012fc <__aeabi_dmul>
 80070f6:	9008      	str	r0, [sp, #32]
 80070f8:	9109      	str	r1, [sp, #36]	; 0x24
 80070fa:	9a08      	ldr	r2, [sp, #32]
 80070fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fe:	2180      	movs	r1, #128	; 0x80
 8007100:	9204      	str	r2, [sp, #16]
 8007102:	9305      	str	r3, [sp, #20]
 8007104:	2300      	movs	r3, #0
 8007106:	002f      	movs	r7, r5
 8007108:	0589      	lsls	r1, r1, #22
 800710a:	106d      	asrs	r5, r5, #1
 800710c:	430d      	orrs	r5, r1
 800710e:	2180      	movs	r1, #128	; 0x80
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	9a04      	ldr	r2, [sp, #16]
 8007114:	9b05      	ldr	r3, [sp, #20]
 8007116:	9200      	str	r2, [sp, #0]
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	0309      	lsls	r1, r1, #12
 800711e:	186d      	adds	r5, r5, r1
 8007120:	04a1      	lsls	r1, r4, #18
 8007122:	186b      	adds	r3, r5, r1
 8007124:	9800      	ldr	r0, [sp, #0]
 8007126:	9901      	ldr	r1, [sp, #4]
 8007128:	0014      	movs	r4, r2
 800712a:	001d      	movs	r5, r3
 800712c:	f7fa f8e6 	bl	80012fc <__aeabi_dmul>
 8007130:	0002      	movs	r2, r0
 8007132:	000b      	movs	r3, r1
 8007134:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007136:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007138:	f7fa fb4c 	bl	80017d4 <__aeabi_dsub>
 800713c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800713e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007140:	9010      	str	r0, [sp, #64]	; 0x40
 8007142:	9111      	str	r1, [sp, #68]	; 0x44
 8007144:	0020      	movs	r0, r4
 8007146:	0029      	movs	r1, r5
 8007148:	f7fa fb44 	bl	80017d4 <__aeabi_dsub>
 800714c:	0002      	movs	r2, r0
 800714e:	000b      	movs	r3, r1
 8007150:	0030      	movs	r0, r6
 8007152:	0039      	movs	r1, r7
 8007154:	f7fa fb3e 	bl	80017d4 <__aeabi_dsub>
 8007158:	9a00      	ldr	r2, [sp, #0]
 800715a:	9b01      	ldr	r3, [sp, #4]
 800715c:	f7fa f8ce 	bl	80012fc <__aeabi_dmul>
 8007160:	0002      	movs	r2, r0
 8007162:	000b      	movs	r3, r1
 8007164:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007166:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007168:	f7fa fb34 	bl	80017d4 <__aeabi_dsub>
 800716c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800716e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007170:	f7fa f8c4 	bl	80012fc <__aeabi_dmul>
 8007174:	9a08      	ldr	r2, [sp, #32]
 8007176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007178:	900a      	str	r0, [sp, #40]	; 0x28
 800717a:	910b      	str	r1, [sp, #44]	; 0x2c
 800717c:	0010      	movs	r0, r2
 800717e:	0019      	movs	r1, r3
 8007180:	f7fa f8bc 	bl	80012fc <__aeabi_dmul>
 8007184:	0006      	movs	r6, r0
 8007186:	000f      	movs	r7, r1
 8007188:	4a7e      	ldr	r2, [pc, #504]	; (8007384 <__ieee754_pow+0x724>)
 800718a:	4b7f      	ldr	r3, [pc, #508]	; (8007388 <__ieee754_pow+0x728>)
 800718c:	f7fa f8b6 	bl	80012fc <__aeabi_dmul>
 8007190:	4a7e      	ldr	r2, [pc, #504]	; (800738c <__ieee754_pow+0x72c>)
 8007192:	4b7f      	ldr	r3, [pc, #508]	; (8007390 <__ieee754_pow+0x730>)
 8007194:	f7f9 f974 	bl	8000480 <__aeabi_dadd>
 8007198:	0032      	movs	r2, r6
 800719a:	003b      	movs	r3, r7
 800719c:	f7fa f8ae 	bl	80012fc <__aeabi_dmul>
 80071a0:	4a7c      	ldr	r2, [pc, #496]	; (8007394 <__ieee754_pow+0x734>)
 80071a2:	4b7d      	ldr	r3, [pc, #500]	; (8007398 <__ieee754_pow+0x738>)
 80071a4:	f7f9 f96c 	bl	8000480 <__aeabi_dadd>
 80071a8:	0032      	movs	r2, r6
 80071aa:	003b      	movs	r3, r7
 80071ac:	f7fa f8a6 	bl	80012fc <__aeabi_dmul>
 80071b0:	4a7a      	ldr	r2, [pc, #488]	; (800739c <__ieee754_pow+0x73c>)
 80071b2:	4b7b      	ldr	r3, [pc, #492]	; (80073a0 <__ieee754_pow+0x740>)
 80071b4:	f7f9 f964 	bl	8000480 <__aeabi_dadd>
 80071b8:	0032      	movs	r2, r6
 80071ba:	003b      	movs	r3, r7
 80071bc:	f7fa f89e 	bl	80012fc <__aeabi_dmul>
 80071c0:	4a78      	ldr	r2, [pc, #480]	; (80073a4 <__ieee754_pow+0x744>)
 80071c2:	4b79      	ldr	r3, [pc, #484]	; (80073a8 <__ieee754_pow+0x748>)
 80071c4:	f7f9 f95c 	bl	8000480 <__aeabi_dadd>
 80071c8:	0032      	movs	r2, r6
 80071ca:	003b      	movs	r3, r7
 80071cc:	f7fa f896 	bl	80012fc <__aeabi_dmul>
 80071d0:	4a76      	ldr	r2, [pc, #472]	; (80073ac <__ieee754_pow+0x74c>)
 80071d2:	4b77      	ldr	r3, [pc, #476]	; (80073b0 <__ieee754_pow+0x750>)
 80071d4:	f7f9 f954 	bl	8000480 <__aeabi_dadd>
 80071d8:	0032      	movs	r2, r6
 80071da:	0004      	movs	r4, r0
 80071dc:	000d      	movs	r5, r1
 80071de:	003b      	movs	r3, r7
 80071e0:	0030      	movs	r0, r6
 80071e2:	0039      	movs	r1, r7
 80071e4:	f7fa f88a 	bl	80012fc <__aeabi_dmul>
 80071e8:	0002      	movs	r2, r0
 80071ea:	000b      	movs	r3, r1
 80071ec:	0020      	movs	r0, r4
 80071ee:	0029      	movs	r1, r5
 80071f0:	f7fa f884 	bl	80012fc <__aeabi_dmul>
 80071f4:	9a00      	ldr	r2, [sp, #0]
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	0004      	movs	r4, r0
 80071fa:	000d      	movs	r5, r1
 80071fc:	9808      	ldr	r0, [sp, #32]
 80071fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007200:	f7f9 f93e 	bl	8000480 <__aeabi_dadd>
 8007204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007208:	f7fa f878 	bl	80012fc <__aeabi_dmul>
 800720c:	0022      	movs	r2, r4
 800720e:	002b      	movs	r3, r5
 8007210:	f7f9 f936 	bl	8000480 <__aeabi_dadd>
 8007214:	9a00      	ldr	r2, [sp, #0]
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	9010      	str	r0, [sp, #64]	; 0x40
 800721a:	9111      	str	r1, [sp, #68]	; 0x44
 800721c:	0010      	movs	r0, r2
 800721e:	0019      	movs	r1, r3
 8007220:	f7fa f86c 	bl	80012fc <__aeabi_dmul>
 8007224:	2200      	movs	r2, #0
 8007226:	4b63      	ldr	r3, [pc, #396]	; (80073b4 <__ieee754_pow+0x754>)
 8007228:	0004      	movs	r4, r0
 800722a:	000d      	movs	r5, r1
 800722c:	f7f9 f928 	bl	8000480 <__aeabi_dadd>
 8007230:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007234:	f7f9 f924 	bl	8000480 <__aeabi_dadd>
 8007238:	2600      	movs	r6, #0
 800723a:	000f      	movs	r7, r1
 800723c:	0032      	movs	r2, r6
 800723e:	000b      	movs	r3, r1
 8007240:	9800      	ldr	r0, [sp, #0]
 8007242:	9901      	ldr	r1, [sp, #4]
 8007244:	f7fa f85a 	bl	80012fc <__aeabi_dmul>
 8007248:	2200      	movs	r2, #0
 800724a:	9000      	str	r0, [sp, #0]
 800724c:	9101      	str	r1, [sp, #4]
 800724e:	4b59      	ldr	r3, [pc, #356]	; (80073b4 <__ieee754_pow+0x754>)
 8007250:	0030      	movs	r0, r6
 8007252:	0039      	movs	r1, r7
 8007254:	f7fa fabe 	bl	80017d4 <__aeabi_dsub>
 8007258:	0022      	movs	r2, r4
 800725a:	002b      	movs	r3, r5
 800725c:	f7fa faba 	bl	80017d4 <__aeabi_dsub>
 8007260:	0002      	movs	r2, r0
 8007262:	000b      	movs	r3, r1
 8007264:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007266:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007268:	f7fa fab4 	bl	80017d4 <__aeabi_dsub>
 800726c:	9a08      	ldr	r2, [sp, #32]
 800726e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007270:	f7fa f844 	bl	80012fc <__aeabi_dmul>
 8007274:	0032      	movs	r2, r6
 8007276:	0004      	movs	r4, r0
 8007278:	000d      	movs	r5, r1
 800727a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800727c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800727e:	003b      	movs	r3, r7
 8007280:	f7fa f83c 	bl	80012fc <__aeabi_dmul>
 8007284:	0002      	movs	r2, r0
 8007286:	000b      	movs	r3, r1
 8007288:	0020      	movs	r0, r4
 800728a:	0029      	movs	r1, r5
 800728c:	f7f9 f8f8 	bl	8000480 <__aeabi_dadd>
 8007290:	0004      	movs	r4, r0
 8007292:	000d      	movs	r5, r1
 8007294:	0002      	movs	r2, r0
 8007296:	000b      	movs	r3, r1
 8007298:	9800      	ldr	r0, [sp, #0]
 800729a:	9901      	ldr	r1, [sp, #4]
 800729c:	f7f9 f8f0 	bl	8000480 <__aeabi_dadd>
 80072a0:	2600      	movs	r6, #0
 80072a2:	22e0      	movs	r2, #224	; 0xe0
 80072a4:	4b44      	ldr	r3, [pc, #272]	; (80073b8 <__ieee754_pow+0x758>)
 80072a6:	0612      	lsls	r2, r2, #24
 80072a8:	0030      	movs	r0, r6
 80072aa:	000f      	movs	r7, r1
 80072ac:	f7fa f826 	bl	80012fc <__aeabi_dmul>
 80072b0:	9008      	str	r0, [sp, #32]
 80072b2:	9109      	str	r1, [sp, #36]	; 0x24
 80072b4:	9a00      	ldr	r2, [sp, #0]
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	0039      	movs	r1, r7
 80072ba:	0030      	movs	r0, r6
 80072bc:	f7fa fa8a 	bl	80017d4 <__aeabi_dsub>
 80072c0:	0002      	movs	r2, r0
 80072c2:	000b      	movs	r3, r1
 80072c4:	0020      	movs	r0, r4
 80072c6:	0029      	movs	r1, r5
 80072c8:	f7fa fa84 	bl	80017d4 <__aeabi_dsub>
 80072cc:	4a3b      	ldr	r2, [pc, #236]	; (80073bc <__ieee754_pow+0x75c>)
 80072ce:	4b3a      	ldr	r3, [pc, #232]	; (80073b8 <__ieee754_pow+0x758>)
 80072d0:	f7fa f814 	bl	80012fc <__aeabi_dmul>
 80072d4:	4a3a      	ldr	r2, [pc, #232]	; (80073c0 <__ieee754_pow+0x760>)
 80072d6:	0004      	movs	r4, r0
 80072d8:	000d      	movs	r5, r1
 80072da:	4b3a      	ldr	r3, [pc, #232]	; (80073c4 <__ieee754_pow+0x764>)
 80072dc:	0039      	movs	r1, r7
 80072de:	0030      	movs	r0, r6
 80072e0:	f7fa f80c 	bl	80012fc <__aeabi_dmul>
 80072e4:	0002      	movs	r2, r0
 80072e6:	000b      	movs	r3, r1
 80072e8:	0020      	movs	r0, r4
 80072ea:	0029      	movs	r1, r5
 80072ec:	f7f9 f8c8 	bl	8000480 <__aeabi_dadd>
 80072f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072f2:	4b35      	ldr	r3, [pc, #212]	; (80073c8 <__ieee754_pow+0x768>)
 80072f4:	189b      	adds	r3, r3, r2
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f7f9 f8c1 	bl	8000480 <__aeabi_dadd>
 80072fe:	900a      	str	r0, [sp, #40]	; 0x28
 8007300:	910b      	str	r1, [sp, #44]	; 0x2c
 8007302:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007304:	f7fa fe4c 	bl	8001fa0 <__aeabi_i2d>
 8007308:	0004      	movs	r4, r0
 800730a:	000d      	movs	r5, r1
 800730c:	9808      	ldr	r0, [sp, #32]
 800730e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007312:	4b2e      	ldr	r3, [pc, #184]	; (80073cc <__ieee754_pow+0x76c>)
 8007314:	189b      	adds	r3, r3, r2
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	9200      	str	r2, [sp, #0]
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007322:	f7f9 f8ad 	bl	8000480 <__aeabi_dadd>
 8007326:	9a00      	ldr	r2, [sp, #0]
 8007328:	9b01      	ldr	r3, [sp, #4]
 800732a:	f7f9 f8a9 	bl	8000480 <__aeabi_dadd>
 800732e:	0022      	movs	r2, r4
 8007330:	002b      	movs	r3, r5
 8007332:	f7f9 f8a5 	bl	8000480 <__aeabi_dadd>
 8007336:	0022      	movs	r2, r4
 8007338:	002b      	movs	r3, r5
 800733a:	0030      	movs	r0, r6
 800733c:	000f      	movs	r7, r1
 800733e:	f7fa fa49 	bl	80017d4 <__aeabi_dsub>
 8007342:	9a00      	ldr	r2, [sp, #0]
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	f7fa fa45 	bl	80017d4 <__aeabi_dsub>
 800734a:	9a08      	ldr	r2, [sp, #32]
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734e:	f7fa fa41 	bl	80017d4 <__aeabi_dsub>
 8007352:	0002      	movs	r2, r0
 8007354:	000b      	movs	r3, r1
 8007356:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800735a:	e619      	b.n	8006f90 <__ieee754_pow+0x330>
 800735c:	2300      	movs	r3, #0
 800735e:	4c04      	ldr	r4, [pc, #16]	; (8007370 <__ieee754_pow+0x710>)
 8007360:	e622      	b.n	8006fa8 <__ieee754_pow+0x348>
 8007362:	46c0      	nop			; (mov r8, r8)
 8007364:	7ff00000 	.word	0x7ff00000
 8007368:	43400000 	.word	0x43400000
 800736c:	fffffc01 	.word	0xfffffc01
 8007370:	3ff00000 	.word	0x3ff00000
 8007374:	0003988e 	.word	0x0003988e
 8007378:	000bb679 	.word	0x000bb679
 800737c:	fff00000 	.word	0xfff00000
 8007380:	08007dd0 	.word	0x08007dd0
 8007384:	4a454eef 	.word	0x4a454eef
 8007388:	3fca7e28 	.word	0x3fca7e28
 800738c:	93c9db65 	.word	0x93c9db65
 8007390:	3fcd864a 	.word	0x3fcd864a
 8007394:	a91d4101 	.word	0xa91d4101
 8007398:	3fd17460 	.word	0x3fd17460
 800739c:	518f264d 	.word	0x518f264d
 80073a0:	3fd55555 	.word	0x3fd55555
 80073a4:	db6fabff 	.word	0xdb6fabff
 80073a8:	3fdb6db6 	.word	0x3fdb6db6
 80073ac:	33333303 	.word	0x33333303
 80073b0:	3fe33333 	.word	0x3fe33333
 80073b4:	40080000 	.word	0x40080000
 80073b8:	3feec709 	.word	0x3feec709
 80073bc:	dc3a03fd 	.word	0xdc3a03fd
 80073c0:	145b01f5 	.word	0x145b01f5
 80073c4:	be3e2fe0 	.word	0xbe3e2fe0
 80073c8:	08007df0 	.word	0x08007df0
 80073cc:	08007de0 	.word	0x08007de0
 80073d0:	4a90      	ldr	r2, [pc, #576]	; (8007614 <__ieee754_pow+0x9b4>)
 80073d2:	4b91      	ldr	r3, [pc, #580]	; (8007618 <__ieee754_pow+0x9b8>)
 80073d4:	9804      	ldr	r0, [sp, #16]
 80073d6:	9905      	ldr	r1, [sp, #20]
 80073d8:	f7f9 f852 	bl	8000480 <__aeabi_dadd>
 80073dc:	0032      	movs	r2, r6
 80073de:	9002      	str	r0, [sp, #8]
 80073e0:	9103      	str	r1, [sp, #12]
 80073e2:	003b      	movs	r3, r7
 80073e4:	0028      	movs	r0, r5
 80073e6:	0021      	movs	r1, r4
 80073e8:	f7fa f9f4 	bl	80017d4 <__aeabi_dsub>
 80073ec:	0002      	movs	r2, r0
 80073ee:	000b      	movs	r3, r1
 80073f0:	9802      	ldr	r0, [sp, #8]
 80073f2:	9903      	ldr	r1, [sp, #12]
 80073f4:	f7f9 f830 	bl	8000458 <__aeabi_dcmpgt>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d000      	beq.n	80073fe <__ieee754_pow+0x79e>
 80073fc:	e60f      	b.n	800701e <__ieee754_pow+0x3be>
 80073fe:	2100      	movs	r1, #0
 8007400:	4a86      	ldr	r2, [pc, #536]	; (800761c <__ieee754_pow+0x9bc>)
 8007402:	0063      	lsls	r3, r4, #1
 8007404:	085b      	lsrs	r3, r3, #1
 8007406:	9102      	str	r1, [sp, #8]
 8007408:	4293      	cmp	r3, r2
 800740a:	dd25      	ble.n	8007458 <__ieee754_pow+0x7f8>
 800740c:	4a84      	ldr	r2, [pc, #528]	; (8007620 <__ieee754_pow+0x9c0>)
 800740e:	151b      	asrs	r3, r3, #20
 8007410:	189b      	adds	r3, r3, r2
 8007412:	2280      	movs	r2, #128	; 0x80
 8007414:	0352      	lsls	r2, r2, #13
 8007416:	4694      	mov	ip, r2
 8007418:	411a      	asrs	r2, r3
 800741a:	1914      	adds	r4, r2, r4
 800741c:	4b81      	ldr	r3, [pc, #516]	; (8007624 <__ieee754_pow+0x9c4>)
 800741e:	0060      	lsls	r0, r4, #1
 8007420:	4d81      	ldr	r5, [pc, #516]	; (8007628 <__ieee754_pow+0x9c8>)
 8007422:	0d40      	lsrs	r0, r0, #21
 8007424:	18c0      	adds	r0, r0, r3
 8007426:	4105      	asrs	r5, r0
 8007428:	0021      	movs	r1, r4
 800742a:	43a9      	bics	r1, r5
 800742c:	000b      	movs	r3, r1
 800742e:	4661      	mov	r1, ip
 8007430:	0324      	lsls	r4, r4, #12
 8007432:	0b24      	lsrs	r4, r4, #12
 8007434:	4321      	orrs	r1, r4
 8007436:	2414      	movs	r4, #20
 8007438:	1a20      	subs	r0, r4, r0
 800743a:	4101      	asrs	r1, r0
 800743c:	9102      	str	r1, [sp, #8]
 800743e:	9908      	ldr	r1, [sp, #32]
 8007440:	2200      	movs	r2, #0
 8007442:	2900      	cmp	r1, #0
 8007444:	da02      	bge.n	800744c <__ieee754_pow+0x7ec>
 8007446:	9902      	ldr	r1, [sp, #8]
 8007448:	4249      	negs	r1, r1
 800744a:	9102      	str	r1, [sp, #8]
 800744c:	0030      	movs	r0, r6
 800744e:	0039      	movs	r1, r7
 8007450:	f7fa f9c0 	bl	80017d4 <__aeabi_dsub>
 8007454:	9006      	str	r0, [sp, #24]
 8007456:	9107      	str	r1, [sp, #28]
 8007458:	9a04      	ldr	r2, [sp, #16]
 800745a:	9b05      	ldr	r3, [sp, #20]
 800745c:	9806      	ldr	r0, [sp, #24]
 800745e:	9907      	ldr	r1, [sp, #28]
 8007460:	2600      	movs	r6, #0
 8007462:	f7f9 f80d 	bl	8000480 <__aeabi_dadd>
 8007466:	2200      	movs	r2, #0
 8007468:	0030      	movs	r0, r6
 800746a:	4b70      	ldr	r3, [pc, #448]	; (800762c <__ieee754_pow+0x9cc>)
 800746c:	000f      	movs	r7, r1
 800746e:	f7f9 ff45 	bl	80012fc <__aeabi_dmul>
 8007472:	9a06      	ldr	r2, [sp, #24]
 8007474:	9b07      	ldr	r3, [sp, #28]
 8007476:	9008      	str	r0, [sp, #32]
 8007478:	9109      	str	r1, [sp, #36]	; 0x24
 800747a:	0030      	movs	r0, r6
 800747c:	0039      	movs	r1, r7
 800747e:	f7fa f9a9 	bl	80017d4 <__aeabi_dsub>
 8007482:	0002      	movs	r2, r0
 8007484:	000b      	movs	r3, r1
 8007486:	9804      	ldr	r0, [sp, #16]
 8007488:	9905      	ldr	r1, [sp, #20]
 800748a:	f7fa f9a3 	bl	80017d4 <__aeabi_dsub>
 800748e:	4a68      	ldr	r2, [pc, #416]	; (8007630 <__ieee754_pow+0x9d0>)
 8007490:	4b68      	ldr	r3, [pc, #416]	; (8007634 <__ieee754_pow+0x9d4>)
 8007492:	f7f9 ff33 	bl	80012fc <__aeabi_dmul>
 8007496:	4a68      	ldr	r2, [pc, #416]	; (8007638 <__ieee754_pow+0x9d8>)
 8007498:	0004      	movs	r4, r0
 800749a:	000d      	movs	r5, r1
 800749c:	0030      	movs	r0, r6
 800749e:	0039      	movs	r1, r7
 80074a0:	4b66      	ldr	r3, [pc, #408]	; (800763c <__ieee754_pow+0x9dc>)
 80074a2:	f7f9 ff2b 	bl	80012fc <__aeabi_dmul>
 80074a6:	0002      	movs	r2, r0
 80074a8:	000b      	movs	r3, r1
 80074aa:	0020      	movs	r0, r4
 80074ac:	0029      	movs	r1, r5
 80074ae:	f7f8 ffe7 	bl	8000480 <__aeabi_dadd>
 80074b2:	0004      	movs	r4, r0
 80074b4:	000d      	movs	r5, r1
 80074b6:	0002      	movs	r2, r0
 80074b8:	000b      	movs	r3, r1
 80074ba:	9808      	ldr	r0, [sp, #32]
 80074bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074be:	f7f8 ffdf 	bl	8000480 <__aeabi_dadd>
 80074c2:	9a08      	ldr	r2, [sp, #32]
 80074c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c6:	0006      	movs	r6, r0
 80074c8:	000f      	movs	r7, r1
 80074ca:	f7fa f983 	bl	80017d4 <__aeabi_dsub>
 80074ce:	0002      	movs	r2, r0
 80074d0:	000b      	movs	r3, r1
 80074d2:	0020      	movs	r0, r4
 80074d4:	0029      	movs	r1, r5
 80074d6:	f7fa f97d 	bl	80017d4 <__aeabi_dsub>
 80074da:	0032      	movs	r2, r6
 80074dc:	9004      	str	r0, [sp, #16]
 80074de:	9105      	str	r1, [sp, #20]
 80074e0:	003b      	movs	r3, r7
 80074e2:	0030      	movs	r0, r6
 80074e4:	0039      	movs	r1, r7
 80074e6:	f7f9 ff09 	bl	80012fc <__aeabi_dmul>
 80074ea:	0004      	movs	r4, r0
 80074ec:	000d      	movs	r5, r1
 80074ee:	4a54      	ldr	r2, [pc, #336]	; (8007640 <__ieee754_pow+0x9e0>)
 80074f0:	4b54      	ldr	r3, [pc, #336]	; (8007644 <__ieee754_pow+0x9e4>)
 80074f2:	f7f9 ff03 	bl	80012fc <__aeabi_dmul>
 80074f6:	4a54      	ldr	r2, [pc, #336]	; (8007648 <__ieee754_pow+0x9e8>)
 80074f8:	4b54      	ldr	r3, [pc, #336]	; (800764c <__ieee754_pow+0x9ec>)
 80074fa:	f7fa f96b 	bl	80017d4 <__aeabi_dsub>
 80074fe:	0022      	movs	r2, r4
 8007500:	002b      	movs	r3, r5
 8007502:	f7f9 fefb 	bl	80012fc <__aeabi_dmul>
 8007506:	4a52      	ldr	r2, [pc, #328]	; (8007650 <__ieee754_pow+0x9f0>)
 8007508:	4b52      	ldr	r3, [pc, #328]	; (8007654 <__ieee754_pow+0x9f4>)
 800750a:	f7f8 ffb9 	bl	8000480 <__aeabi_dadd>
 800750e:	0022      	movs	r2, r4
 8007510:	002b      	movs	r3, r5
 8007512:	f7f9 fef3 	bl	80012fc <__aeabi_dmul>
 8007516:	4a50      	ldr	r2, [pc, #320]	; (8007658 <__ieee754_pow+0x9f8>)
 8007518:	4b50      	ldr	r3, [pc, #320]	; (800765c <__ieee754_pow+0x9fc>)
 800751a:	f7fa f95b 	bl	80017d4 <__aeabi_dsub>
 800751e:	0022      	movs	r2, r4
 8007520:	002b      	movs	r3, r5
 8007522:	f7f9 feeb 	bl	80012fc <__aeabi_dmul>
 8007526:	4a4e      	ldr	r2, [pc, #312]	; (8007660 <__ieee754_pow+0xa00>)
 8007528:	4b4e      	ldr	r3, [pc, #312]	; (8007664 <__ieee754_pow+0xa04>)
 800752a:	f7f8 ffa9 	bl	8000480 <__aeabi_dadd>
 800752e:	0022      	movs	r2, r4
 8007530:	002b      	movs	r3, r5
 8007532:	f7f9 fee3 	bl	80012fc <__aeabi_dmul>
 8007536:	0002      	movs	r2, r0
 8007538:	000b      	movs	r3, r1
 800753a:	0030      	movs	r0, r6
 800753c:	0039      	movs	r1, r7
 800753e:	f7fa f949 	bl	80017d4 <__aeabi_dsub>
 8007542:	0004      	movs	r4, r0
 8007544:	000d      	movs	r5, r1
 8007546:	0002      	movs	r2, r0
 8007548:	000b      	movs	r3, r1
 800754a:	0030      	movs	r0, r6
 800754c:	0039      	movs	r1, r7
 800754e:	f7f9 fed5 	bl	80012fc <__aeabi_dmul>
 8007552:	2380      	movs	r3, #128	; 0x80
 8007554:	9006      	str	r0, [sp, #24]
 8007556:	9107      	str	r1, [sp, #28]
 8007558:	2200      	movs	r2, #0
 800755a:	0020      	movs	r0, r4
 800755c:	0029      	movs	r1, r5
 800755e:	05db      	lsls	r3, r3, #23
 8007560:	f7fa f938 	bl	80017d4 <__aeabi_dsub>
 8007564:	0002      	movs	r2, r0
 8007566:	000b      	movs	r3, r1
 8007568:	9806      	ldr	r0, [sp, #24]
 800756a:	9907      	ldr	r1, [sp, #28]
 800756c:	f7f9 fac4 	bl	8000af8 <__aeabi_ddiv>
 8007570:	9a04      	ldr	r2, [sp, #16]
 8007572:	9b05      	ldr	r3, [sp, #20]
 8007574:	0004      	movs	r4, r0
 8007576:	000d      	movs	r5, r1
 8007578:	0030      	movs	r0, r6
 800757a:	0039      	movs	r1, r7
 800757c:	f7f9 febe 	bl	80012fc <__aeabi_dmul>
 8007580:	9a04      	ldr	r2, [sp, #16]
 8007582:	9b05      	ldr	r3, [sp, #20]
 8007584:	f7f8 ff7c 	bl	8000480 <__aeabi_dadd>
 8007588:	0002      	movs	r2, r0
 800758a:	000b      	movs	r3, r1
 800758c:	0020      	movs	r0, r4
 800758e:	0029      	movs	r1, r5
 8007590:	f7fa f920 	bl	80017d4 <__aeabi_dsub>
 8007594:	0032      	movs	r2, r6
 8007596:	003b      	movs	r3, r7
 8007598:	f7fa f91c 	bl	80017d4 <__aeabi_dsub>
 800759c:	0002      	movs	r2, r0
 800759e:	000b      	movs	r3, r1
 80075a0:	2000      	movs	r0, #0
 80075a2:	4931      	ldr	r1, [pc, #196]	; (8007668 <__ieee754_pow+0xa08>)
 80075a4:	f7fa f916 	bl	80017d4 <__aeabi_dsub>
 80075a8:	9b02      	ldr	r3, [sp, #8]
 80075aa:	051b      	lsls	r3, r3, #20
 80075ac:	185b      	adds	r3, r3, r1
 80075ae:	151a      	asrs	r2, r3, #20
 80075b0:	2a00      	cmp	r2, #0
 80075b2:	dc25      	bgt.n	8007600 <__ieee754_pow+0x9a0>
 80075b4:	9a02      	ldr	r2, [sp, #8]
 80075b6:	f000 f955 	bl	8007864 <scalbn>
 80075ba:	9a00      	ldr	r2, [sp, #0]
 80075bc:	9b01      	ldr	r3, [sp, #4]
 80075be:	f7ff fc33 	bl	8006e28 <__ieee754_pow+0x1c8>
 80075c2:	4a2a      	ldr	r2, [pc, #168]	; (800766c <__ieee754_pow+0xa0c>)
 80075c4:	004b      	lsls	r3, r1, #1
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	4293      	cmp	r3, r2
 80075ca:	dc00      	bgt.n	80075ce <__ieee754_pow+0x96e>
 80075cc:	e717      	b.n	80073fe <__ieee754_pow+0x79e>
 80075ce:	4b28      	ldr	r3, [pc, #160]	; (8007670 <__ieee754_pow+0xa10>)
 80075d0:	18cb      	adds	r3, r1, r3
 80075d2:	4303      	orrs	r3, r0
 80075d4:	d008      	beq.n	80075e8 <__ieee754_pow+0x988>
 80075d6:	9800      	ldr	r0, [sp, #0]
 80075d8:	9901      	ldr	r1, [sp, #4]
 80075da:	2300      	movs	r3, #0
 80075dc:	2200      	movs	r2, #0
 80075de:	f7f8 ff27 	bl	8000430 <__aeabi_dcmplt>
 80075e2:	1e43      	subs	r3, r0, #1
 80075e4:	4198      	sbcs	r0, r3
 80075e6:	e462      	b.n	8006eae <__ieee754_pow+0x24e>
 80075e8:	0032      	movs	r2, r6
 80075ea:	003b      	movs	r3, r7
 80075ec:	f7fa f8f2 	bl	80017d4 <__aeabi_dsub>
 80075f0:	9a04      	ldr	r2, [sp, #16]
 80075f2:	9b05      	ldr	r3, [sp, #20]
 80075f4:	f7f8 ff3a 	bl	800046c <__aeabi_dcmpge>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d100      	bne.n	80075fe <__ieee754_pow+0x99e>
 80075fc:	e6ff      	b.n	80073fe <__ieee754_pow+0x79e>
 80075fe:	e7ea      	b.n	80075d6 <__ieee754_pow+0x976>
 8007600:	0019      	movs	r1, r3
 8007602:	e7da      	b.n	80075ba <__ieee754_pow+0x95a>
 8007604:	2300      	movs	r3, #0
 8007606:	4c18      	ldr	r4, [pc, #96]	; (8007668 <__ieee754_pow+0xa08>)
 8007608:	f7ff fbf1 	bl	8006dee <__ieee754_pow+0x18e>
 800760c:	2300      	movs	r3, #0
 800760e:	2400      	movs	r4, #0
 8007610:	f7ff fbed 	bl	8006dee <__ieee754_pow+0x18e>
 8007614:	652b82fe 	.word	0x652b82fe
 8007618:	3c971547 	.word	0x3c971547
 800761c:	3fe00000 	.word	0x3fe00000
 8007620:	fffffc02 	.word	0xfffffc02
 8007624:	fffffc01 	.word	0xfffffc01
 8007628:	000fffff 	.word	0x000fffff
 800762c:	3fe62e43 	.word	0x3fe62e43
 8007630:	fefa39ef 	.word	0xfefa39ef
 8007634:	3fe62e42 	.word	0x3fe62e42
 8007638:	0ca86c39 	.word	0x0ca86c39
 800763c:	be205c61 	.word	0xbe205c61
 8007640:	72bea4d0 	.word	0x72bea4d0
 8007644:	3e663769 	.word	0x3e663769
 8007648:	c5d26bf1 	.word	0xc5d26bf1
 800764c:	3ebbbd41 	.word	0x3ebbbd41
 8007650:	af25de2c 	.word	0xaf25de2c
 8007654:	3f11566a 	.word	0x3f11566a
 8007658:	16bebd93 	.word	0x16bebd93
 800765c:	3f66c16c 	.word	0x3f66c16c
 8007660:	5555553e 	.word	0x5555553e
 8007664:	3fc55555 	.word	0x3fc55555
 8007668:	3ff00000 	.word	0x3ff00000
 800766c:	4090cbff 	.word	0x4090cbff
 8007670:	3f6f3400 	.word	0x3f6f3400

08007674 <__ieee754_sqrt>:
 8007674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007676:	000b      	movs	r3, r1
 8007678:	000c      	movs	r4, r1
 800767a:	4956      	ldr	r1, [pc, #344]	; (80077d4 <__ieee754_sqrt+0x160>)
 800767c:	0005      	movs	r5, r0
 800767e:	0002      	movs	r2, r0
 8007680:	0008      	movs	r0, r1
 8007682:	b085      	sub	sp, #20
 8007684:	4020      	ands	r0, r4
 8007686:	4288      	cmp	r0, r1
 8007688:	d10f      	bne.n	80076aa <__ieee754_sqrt+0x36>
 800768a:	0028      	movs	r0, r5
 800768c:	0021      	movs	r1, r4
 800768e:	f7f9 fe35 	bl	80012fc <__aeabi_dmul>
 8007692:	0002      	movs	r2, r0
 8007694:	000b      	movs	r3, r1
 8007696:	0028      	movs	r0, r5
 8007698:	0021      	movs	r1, r4
 800769a:	f7f8 fef1 	bl	8000480 <__aeabi_dadd>
 800769e:	0005      	movs	r5, r0
 80076a0:	000c      	movs	r4, r1
 80076a2:	0028      	movs	r0, r5
 80076a4:	0021      	movs	r1, r4
 80076a6:	b005      	add	sp, #20
 80076a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076aa:	2c00      	cmp	r4, #0
 80076ac:	dc10      	bgt.n	80076d0 <__ieee754_sqrt+0x5c>
 80076ae:	0061      	lsls	r1, r4, #1
 80076b0:	0849      	lsrs	r1, r1, #1
 80076b2:	4329      	orrs	r1, r5
 80076b4:	d0f5      	beq.n	80076a2 <__ieee754_sqrt+0x2e>
 80076b6:	2100      	movs	r1, #0
 80076b8:	428c      	cmp	r4, r1
 80076ba:	d100      	bne.n	80076be <__ieee754_sqrt+0x4a>
 80076bc:	e080      	b.n	80077c0 <__ieee754_sqrt+0x14c>
 80076be:	0028      	movs	r0, r5
 80076c0:	0021      	movs	r1, r4
 80076c2:	f7fa f887 	bl	80017d4 <__aeabi_dsub>
 80076c6:	0002      	movs	r2, r0
 80076c8:	000b      	movs	r3, r1
 80076ca:	f7f9 fa15 	bl	8000af8 <__aeabi_ddiv>
 80076ce:	e7e6      	b.n	800769e <__ieee754_sqrt+0x2a>
 80076d0:	1521      	asrs	r1, r4, #20
 80076d2:	d075      	beq.n	80077c0 <__ieee754_sqrt+0x14c>
 80076d4:	4840      	ldr	r0, [pc, #256]	; (80077d8 <__ieee754_sqrt+0x164>)
 80076d6:	031b      	lsls	r3, r3, #12
 80076d8:	180c      	adds	r4, r1, r0
 80076da:	2080      	movs	r0, #128	; 0x80
 80076dc:	0b1b      	lsrs	r3, r3, #12
 80076de:	0340      	lsls	r0, r0, #13
 80076e0:	4303      	orrs	r3, r0
 80076e2:	07c9      	lsls	r1, r1, #31
 80076e4:	d403      	bmi.n	80076ee <__ieee754_sqrt+0x7a>
 80076e6:	0fd1      	lsrs	r1, r2, #31
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	185b      	adds	r3, r3, r1
 80076ec:	0052      	lsls	r2, r2, #1
 80076ee:	1061      	asrs	r1, r4, #1
 80076f0:	2400      	movs	r4, #0
 80076f2:	9103      	str	r1, [sp, #12]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	0fd1      	lsrs	r1, r2, #31
 80076f8:	185b      	adds	r3, r3, r1
 80076fa:	2180      	movs	r1, #128	; 0x80
 80076fc:	2516      	movs	r5, #22
 80076fe:	0020      	movs	r0, r4
 8007700:	0052      	lsls	r2, r2, #1
 8007702:	0389      	lsls	r1, r1, #14
 8007704:	1846      	adds	r6, r0, r1
 8007706:	429e      	cmp	r6, r3
 8007708:	dc02      	bgt.n	8007710 <__ieee754_sqrt+0x9c>
 800770a:	1870      	adds	r0, r6, r1
 800770c:	1b9b      	subs	r3, r3, r6
 800770e:	1864      	adds	r4, r4, r1
 8007710:	0fd6      	lsrs	r6, r2, #31
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	3d01      	subs	r5, #1
 8007716:	18f3      	adds	r3, r6, r3
 8007718:	0052      	lsls	r2, r2, #1
 800771a:	0849      	lsrs	r1, r1, #1
 800771c:	2d00      	cmp	r5, #0
 800771e:	d1f1      	bne.n	8007704 <__ieee754_sqrt+0x90>
 8007720:	2620      	movs	r6, #32
 8007722:	2780      	movs	r7, #128	; 0x80
 8007724:	0029      	movs	r1, r5
 8007726:	9601      	str	r6, [sp, #4]
 8007728:	063f      	lsls	r7, r7, #24
 800772a:	197e      	adds	r6, r7, r5
 800772c:	46b4      	mov	ip, r6
 800772e:	4283      	cmp	r3, r0
 8007730:	dc02      	bgt.n	8007738 <__ieee754_sqrt+0xc4>
 8007732:	d114      	bne.n	800775e <__ieee754_sqrt+0xea>
 8007734:	4296      	cmp	r6, r2
 8007736:	d812      	bhi.n	800775e <__ieee754_sqrt+0xea>
 8007738:	4665      	mov	r5, ip
 800773a:	4666      	mov	r6, ip
 800773c:	19ed      	adds	r5, r5, r7
 800773e:	9002      	str	r0, [sp, #8]
 8007740:	2e00      	cmp	r6, #0
 8007742:	da03      	bge.n	800774c <__ieee754_sqrt+0xd8>
 8007744:	43ee      	mvns	r6, r5
 8007746:	0ff6      	lsrs	r6, r6, #31
 8007748:	1986      	adds	r6, r0, r6
 800774a:	9602      	str	r6, [sp, #8]
 800774c:	1a1b      	subs	r3, r3, r0
 800774e:	4562      	cmp	r2, ip
 8007750:	4180      	sbcs	r0, r0
 8007752:	4240      	negs	r0, r0
 8007754:	1a1b      	subs	r3, r3, r0
 8007756:	4660      	mov	r0, ip
 8007758:	1a12      	subs	r2, r2, r0
 800775a:	9802      	ldr	r0, [sp, #8]
 800775c:	19c9      	adds	r1, r1, r7
 800775e:	0fd6      	lsrs	r6, r2, #31
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	199b      	adds	r3, r3, r6
 8007764:	9e01      	ldr	r6, [sp, #4]
 8007766:	0052      	lsls	r2, r2, #1
 8007768:	3e01      	subs	r6, #1
 800776a:	087f      	lsrs	r7, r7, #1
 800776c:	9601      	str	r6, [sp, #4]
 800776e:	2e00      	cmp	r6, #0
 8007770:	d1db      	bne.n	800772a <__ieee754_sqrt+0xb6>
 8007772:	4313      	orrs	r3, r2
 8007774:	d003      	beq.n	800777e <__ieee754_sqrt+0x10a>
 8007776:	1c4b      	adds	r3, r1, #1
 8007778:	d127      	bne.n	80077ca <__ieee754_sqrt+0x156>
 800777a:	0031      	movs	r1, r6
 800777c:	3401      	adds	r4, #1
 800777e:	4b17      	ldr	r3, [pc, #92]	; (80077dc <__ieee754_sqrt+0x168>)
 8007780:	1060      	asrs	r0, r4, #1
 8007782:	18c0      	adds	r0, r0, r3
 8007784:	0849      	lsrs	r1, r1, #1
 8007786:	07e3      	lsls	r3, r4, #31
 8007788:	d502      	bpl.n	8007790 <__ieee754_sqrt+0x11c>
 800778a:	2380      	movs	r3, #128	; 0x80
 800778c:	061b      	lsls	r3, r3, #24
 800778e:	4319      	orrs	r1, r3
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	000d      	movs	r5, r1
 8007794:	051c      	lsls	r4, r3, #20
 8007796:	1823      	adds	r3, r4, r0
 8007798:	001c      	movs	r4, r3
 800779a:	e782      	b.n	80076a2 <__ieee754_sqrt+0x2e>
 800779c:	0ad3      	lsrs	r3, r2, #11
 800779e:	3815      	subs	r0, #21
 80077a0:	0552      	lsls	r2, r2, #21
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0fa      	beq.n	800779c <__ieee754_sqrt+0x128>
 80077a6:	2480      	movs	r4, #128	; 0x80
 80077a8:	0364      	lsls	r4, r4, #13
 80077aa:	4223      	tst	r3, r4
 80077ac:	d00a      	beq.n	80077c4 <__ieee754_sqrt+0x150>
 80077ae:	2420      	movs	r4, #32
 80077b0:	0016      	movs	r6, r2
 80077b2:	1a64      	subs	r4, r4, r1
 80077b4:	40e6      	lsrs	r6, r4
 80077b6:	1e4d      	subs	r5, r1, #1
 80077b8:	408a      	lsls	r2, r1
 80077ba:	4333      	orrs	r3, r6
 80077bc:	1b41      	subs	r1, r0, r5
 80077be:	e789      	b.n	80076d4 <__ieee754_sqrt+0x60>
 80077c0:	2000      	movs	r0, #0
 80077c2:	e7ee      	b.n	80077a2 <__ieee754_sqrt+0x12e>
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	3101      	adds	r1, #1
 80077c8:	e7ef      	b.n	80077aa <__ieee754_sqrt+0x136>
 80077ca:	2301      	movs	r3, #1
 80077cc:	3101      	adds	r1, #1
 80077ce:	4399      	bics	r1, r3
 80077d0:	e7d5      	b.n	800777e <__ieee754_sqrt+0x10a>
 80077d2:	46c0      	nop			; (mov r8, r8)
 80077d4:	7ff00000 	.word	0x7ff00000
 80077d8:	fffffc01 	.word	0xfffffc01
 80077dc:	3fe00000 	.word	0x3fe00000

080077e0 <with_errno>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	000d      	movs	r5, r1
 80077e4:	0016      	movs	r6, r2
 80077e6:	0004      	movs	r4, r0
 80077e8:	f7fe fdfc 	bl	80063e4 <__errno>
 80077ec:	0029      	movs	r1, r5
 80077ee:	6006      	str	r6, [r0, #0]
 80077f0:	0020      	movs	r0, r4
 80077f2:	bd70      	pop	{r4, r5, r6, pc}

080077f4 <xflow>:
 80077f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077f6:	0015      	movs	r5, r2
 80077f8:	001c      	movs	r4, r3
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d010      	beq.n	8007820 <xflow+0x2c>
 80077fe:	2380      	movs	r3, #128	; 0x80
 8007800:	0010      	movs	r0, r2
 8007802:	061b      	lsls	r3, r3, #24
 8007804:	18e1      	adds	r1, r4, r3
 8007806:	9000      	str	r0, [sp, #0]
 8007808:	9101      	str	r1, [sp, #4]
 800780a:	9a00      	ldr	r2, [sp, #0]
 800780c:	9b01      	ldr	r3, [sp, #4]
 800780e:	0028      	movs	r0, r5
 8007810:	0021      	movs	r1, r4
 8007812:	f7f9 fd73 	bl	80012fc <__aeabi_dmul>
 8007816:	2222      	movs	r2, #34	; 0x22
 8007818:	f7ff ffe2 	bl	80077e0 <with_errno>
 800781c:	b003      	add	sp, #12
 800781e:	bd30      	pop	{r4, r5, pc}
 8007820:	0010      	movs	r0, r2
 8007822:	0019      	movs	r1, r3
 8007824:	e7ef      	b.n	8007806 <xflow+0x12>

08007826 <__math_uflow>:
 8007826:	2380      	movs	r3, #128	; 0x80
 8007828:	b510      	push	{r4, lr}
 800782a:	2200      	movs	r2, #0
 800782c:	055b      	lsls	r3, r3, #21
 800782e:	f7ff ffe1 	bl	80077f4 <xflow>
 8007832:	bd10      	pop	{r4, pc}

08007834 <__math_oflow>:
 8007834:	23e0      	movs	r3, #224	; 0xe0
 8007836:	b510      	push	{r4, lr}
 8007838:	2200      	movs	r2, #0
 800783a:	05db      	lsls	r3, r3, #23
 800783c:	f7ff ffda 	bl	80077f4 <xflow>
 8007840:	bd10      	pop	{r4, pc}

08007842 <fabs>:
 8007842:	004b      	lsls	r3, r1, #1
 8007844:	0859      	lsrs	r1, r3, #1
 8007846:	4770      	bx	lr

08007848 <finite>:
 8007848:	4b02      	ldr	r3, [pc, #8]	; (8007854 <finite+0xc>)
 800784a:	0048      	lsls	r0, r1, #1
 800784c:	0840      	lsrs	r0, r0, #1
 800784e:	18c0      	adds	r0, r0, r3
 8007850:	0fc0      	lsrs	r0, r0, #31
 8007852:	4770      	bx	lr
 8007854:	80100000 	.word	0x80100000

08007858 <nan>:
 8007858:	2000      	movs	r0, #0
 800785a:	4901      	ldr	r1, [pc, #4]	; (8007860 <nan+0x8>)
 800785c:	4770      	bx	lr
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	7ff80000 	.word	0x7ff80000

08007864 <scalbn>:
 8007864:	004b      	lsls	r3, r1, #1
 8007866:	b570      	push	{r4, r5, r6, lr}
 8007868:	0d5b      	lsrs	r3, r3, #21
 800786a:	0014      	movs	r4, r2
 800786c:	000a      	movs	r2, r1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10d      	bne.n	800788e <scalbn+0x2a>
 8007872:	004b      	lsls	r3, r1, #1
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	4303      	orrs	r3, r0
 8007878:	d010      	beq.n	800789c <scalbn+0x38>
 800787a:	4b27      	ldr	r3, [pc, #156]	; (8007918 <scalbn+0xb4>)
 800787c:	2200      	movs	r2, #0
 800787e:	f7f9 fd3d 	bl	80012fc <__aeabi_dmul>
 8007882:	4b26      	ldr	r3, [pc, #152]	; (800791c <scalbn+0xb8>)
 8007884:	429c      	cmp	r4, r3
 8007886:	da0a      	bge.n	800789e <scalbn+0x3a>
 8007888:	4a25      	ldr	r2, [pc, #148]	; (8007920 <scalbn+0xbc>)
 800788a:	4b26      	ldr	r3, [pc, #152]	; (8007924 <scalbn+0xc0>)
 800788c:	e019      	b.n	80078c2 <scalbn+0x5e>
 800788e:	4d26      	ldr	r5, [pc, #152]	; (8007928 <scalbn+0xc4>)
 8007890:	42ab      	cmp	r3, r5
 8007892:	d108      	bne.n	80078a6 <scalbn+0x42>
 8007894:	0002      	movs	r2, r0
 8007896:	000b      	movs	r3, r1
 8007898:	f7f8 fdf2 	bl	8000480 <__aeabi_dadd>
 800789c:	bd70      	pop	{r4, r5, r6, pc}
 800789e:	000a      	movs	r2, r1
 80078a0:	004b      	lsls	r3, r1, #1
 80078a2:	0d5b      	lsrs	r3, r3, #21
 80078a4:	3b36      	subs	r3, #54	; 0x36
 80078a6:	4d21      	ldr	r5, [pc, #132]	; (800792c <scalbn+0xc8>)
 80078a8:	18e3      	adds	r3, r4, r3
 80078aa:	42ab      	cmp	r3, r5
 80078ac:	dd0c      	ble.n	80078c8 <scalbn+0x64>
 80078ae:	4c20      	ldr	r4, [pc, #128]	; (8007930 <scalbn+0xcc>)
 80078b0:	4d20      	ldr	r5, [pc, #128]	; (8007934 <scalbn+0xd0>)
 80078b2:	2900      	cmp	r1, #0
 80078b4:	da01      	bge.n	80078ba <scalbn+0x56>
 80078b6:	4c1e      	ldr	r4, [pc, #120]	; (8007930 <scalbn+0xcc>)
 80078b8:	4d1f      	ldr	r5, [pc, #124]	; (8007938 <scalbn+0xd4>)
 80078ba:	0020      	movs	r0, r4
 80078bc:	0029      	movs	r1, r5
 80078be:	4a1c      	ldr	r2, [pc, #112]	; (8007930 <scalbn+0xcc>)
 80078c0:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <scalbn+0xd0>)
 80078c2:	f7f9 fd1b 	bl	80012fc <__aeabi_dmul>
 80078c6:	e7e9      	b.n	800789c <scalbn+0x38>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	dd05      	ble.n	80078d8 <scalbn+0x74>
 80078cc:	4c1b      	ldr	r4, [pc, #108]	; (800793c <scalbn+0xd8>)
 80078ce:	051b      	lsls	r3, r3, #20
 80078d0:	4022      	ands	r2, r4
 80078d2:	431a      	orrs	r2, r3
 80078d4:	0011      	movs	r1, r2
 80078d6:	e7e1      	b.n	800789c <scalbn+0x38>
 80078d8:	001d      	movs	r5, r3
 80078da:	3535      	adds	r5, #53	; 0x35
 80078dc:	da13      	bge.n	8007906 <scalbn+0xa2>
 80078de:	4a18      	ldr	r2, [pc, #96]	; (8007940 <scalbn+0xdc>)
 80078e0:	0fcb      	lsrs	r3, r1, #31
 80078e2:	4294      	cmp	r4, r2
 80078e4:	dd08      	ble.n	80078f8 <scalbn+0x94>
 80078e6:	4812      	ldr	r0, [pc, #72]	; (8007930 <scalbn+0xcc>)
 80078e8:	4912      	ldr	r1, [pc, #72]	; (8007934 <scalbn+0xd0>)
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <scalbn+0x8e>
 80078ee:	4810      	ldr	r0, [pc, #64]	; (8007930 <scalbn+0xcc>)
 80078f0:	4911      	ldr	r1, [pc, #68]	; (8007938 <scalbn+0xd4>)
 80078f2:	4a0f      	ldr	r2, [pc, #60]	; (8007930 <scalbn+0xcc>)
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <scalbn+0xd0>)
 80078f6:	e7e4      	b.n	80078c2 <scalbn+0x5e>
 80078f8:	4809      	ldr	r0, [pc, #36]	; (8007920 <scalbn+0xbc>)
 80078fa:	490a      	ldr	r1, [pc, #40]	; (8007924 <scalbn+0xc0>)
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0c3      	beq.n	8007888 <scalbn+0x24>
 8007900:	4807      	ldr	r0, [pc, #28]	; (8007920 <scalbn+0xbc>)
 8007902:	4910      	ldr	r1, [pc, #64]	; (8007944 <scalbn+0xe0>)
 8007904:	e7c0      	b.n	8007888 <scalbn+0x24>
 8007906:	4c0d      	ldr	r4, [pc, #52]	; (800793c <scalbn+0xd8>)
 8007908:	3336      	adds	r3, #54	; 0x36
 800790a:	4022      	ands	r2, r4
 800790c:	051b      	lsls	r3, r3, #20
 800790e:	4313      	orrs	r3, r2
 8007910:	0019      	movs	r1, r3
 8007912:	2200      	movs	r2, #0
 8007914:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <scalbn+0xe4>)
 8007916:	e7d4      	b.n	80078c2 <scalbn+0x5e>
 8007918:	43500000 	.word	0x43500000
 800791c:	ffff3cb0 	.word	0xffff3cb0
 8007920:	c2f8f359 	.word	0xc2f8f359
 8007924:	01a56e1f 	.word	0x01a56e1f
 8007928:	000007ff 	.word	0x000007ff
 800792c:	000007fe 	.word	0x000007fe
 8007930:	8800759c 	.word	0x8800759c
 8007934:	7e37e43c 	.word	0x7e37e43c
 8007938:	fe37e43c 	.word	0xfe37e43c
 800793c:	800fffff 	.word	0x800fffff
 8007940:	0000c350 	.word	0x0000c350
 8007944:	81a56e1f 	.word	0x81a56e1f
 8007948:	3c900000 	.word	0x3c900000

0800794c <_init>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr

08007958 <_fini>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795e:	bc08      	pop	{r3}
 8007960:	469e      	mov	lr, r3
 8007962:	4770      	bx	lr
